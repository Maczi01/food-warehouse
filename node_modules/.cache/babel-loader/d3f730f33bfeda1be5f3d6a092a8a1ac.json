{"ast":null,"code":"// Generated by CoffeeScript 1.7.1\n(function () {\n  var DecodeStream, iconv;\n\n  try {\n    iconv = require('iconv-lite');\n  } catch (_error) {}\n\n  DecodeStream = function () {\n    var key;\n\n    function DecodeStream(buffer) {\n      this.buffer = buffer;\n      this.pos = 0;\n      this.length = this.buffer.length;\n    }\n\n    DecodeStream.TYPES = {\n      UInt8: 1,\n      UInt16: 2,\n      UInt24: 3,\n      UInt32: 4,\n      Int8: 1,\n      Int16: 2,\n      Int24: 3,\n      Int32: 4,\n      Float: 4,\n      Double: 8\n    };\n\n    for (key in Buffer.prototype) {\n      if (key.slice(0, 4) === 'read') {\n        (function (key) {\n          var bytes;\n          bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, '')];\n          return DecodeStream.prototype[key] = function () {\n            var ret;\n            ret = this.buffer[key](this.pos);\n            this.pos += bytes;\n            return ret;\n          };\n        })(key);\n      }\n    }\n\n    DecodeStream.prototype.readString = function (length, encoding) {\n      var buf, byte, i, _i, _ref;\n\n      if (encoding == null) {\n        encoding = 'ascii';\n      }\n\n      switch (encoding) {\n        case 'utf16le':\n        case 'ucs2':\n        case 'utf8':\n        case 'ascii':\n          return this.buffer.toString(encoding, this.pos, this.pos += length);\n\n        case 'utf16be':\n          buf = new Buffer(this.readBuffer(length));\n\n          for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {\n            byte = buf[i];\n            buf[i] = buf[i + 1];\n            buf[i + 1] = byte;\n          }\n\n          return buf.toString('utf16le');\n\n        default:\n          buf = this.readBuffer(length);\n\n          if (iconv) {\n            try {\n              return iconv.decode(buf, encoding);\n            } catch (_error) {}\n          }\n\n          return buf;\n      }\n    };\n\n    DecodeStream.prototype.readBuffer = function (length) {\n      return this.buffer.slice(this.pos, this.pos += length);\n    };\n\n    DecodeStream.prototype.readUInt24BE = function () {\n      return (this.readUInt16BE() << 8) + this.readUInt8();\n    };\n\n    DecodeStream.prototype.readUInt24LE = function () {\n      return this.readUInt16LE() + (this.readUInt8() << 16);\n    };\n\n    DecodeStream.prototype.readInt24BE = function () {\n      return (this.readInt16BE() << 8) + this.readUInt8();\n    };\n\n    DecodeStream.prototype.readInt24LE = function () {\n      return this.readUInt16LE() + (this.readInt8() << 16);\n    };\n\n    return DecodeStream;\n  }();\n\n  module.exports = DecodeStream;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}