{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar LocalList = require('./availablePhoneNumber/local').LocalList;\n\nvar MachineToMachineList = require('./availablePhoneNumber/machineToMachine').MachineToMachineList;\n\nvar MobileList = require('./availablePhoneNumber/mobile').MobileList;\n\nvar NationalList = require('./availablePhoneNumber/national').NationalList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SharedCostList = require('./availablePhoneNumber/sharedCost').SharedCostList;\n\nvar TollFreeList = require('./availablePhoneNumber/tollFree').TollFreeList;\n\nvar VoipList = require('./availablePhoneNumber/voip').VoipList;\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AvailablePhoneNumberCountryList;\nvar AvailablePhoneNumberCountryPage;\nvar AvailablePhoneNumberCountryInstance;\nvar AvailablePhoneNumberCountryContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryList = function AvailablePhoneNumberCountryList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function availablePhoneNumbers\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n\n  /* jshint ignore:end */\n  function AvailablePhoneNumberCountryListInstance(sid) {\n    return AvailablePhoneNumberCountryListInstance.get(sid);\n  }\n\n  AvailablePhoneNumberCountryListInstance._version = version; // Path Solution\n\n  AvailablePhoneNumberCountryListInstance._solution = {\n    accountSid: accountSid\n  };\n  AvailablePhoneNumberCountryListInstance._uri = \"/Accounts/\".concat(accountSid, \"/AvailablePhoneNumbers.json\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams AvailablePhoneNumberCountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AvailablePhoneNumberCountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a available_phone_number_country\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} countryCode -\n   *          The ISO country code of the country to fetch available phone number information about\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.get = function get(countryCode) {\n    return new AvailablePhoneNumberCountryContext(this._version, this._solution.accountSid, countryCode);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AvailablePhoneNumberCountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AvailablePhoneNumberCountryListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailablePhoneNumberCountrySolution} solution - Path solution\n *\n * @returns AvailablePhoneNumberCountryPage\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryPage = function AvailablePhoneNumberCountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AvailablePhoneNumberCountryPage.prototype, Page.prototype);\n\nAvailablePhoneNumberCountryPage.prototype.constructor = AvailablePhoneNumberCountryPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AvailablePhoneNumberCountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @param {AvailablePhoneNumberCountryPayload} payload -\n *          Payload response from the API\n *\n * @returns AvailablePhoneNumberCountryInstance\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAvailablePhoneNumberCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance\n *\n * @property {string} countryCode - The ISO-3166-1 country code of the country.\n * @property {string} country - The name of the country\n * @property {string} uri -\n *          The URI of the Country resource, relative to `https://api.twilio.com`\n * @property {boolean} beta -\n *          Whether all phone numbers available in the country are new to the Twilio platform.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {AvailablePhoneNumberCountryPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance = function AvailablePhoneNumberCountryInstance(version, payload, accountSid, countryCode) {\n  this._version = version; // Marshaled Properties\n\n  this.countryCode = payload.country_code; // jshint ignore:line\n\n  this.country = payload.country; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.beta = payload.beta; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode || this.countryCode\n  };\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new AvailablePhoneNumberCountryContext(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the local\n *\n * @function local\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.local = function local() {\n  return this._proxy.local;\n};\n/* jshint ignore:start */\n\n/**\n * Access the tollFree\n *\n * @function tollFree\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.tollFree = function tollFree() {\n  return this._proxy.tollFree;\n};\n/* jshint ignore:start */\n\n/**\n * Access the mobile\n *\n * @function mobile\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.mobile = function mobile() {\n  return this._proxy.mobile;\n};\n/* jshint ignore:start */\n\n/**\n * Access the national\n *\n * @function national\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.national = function national() {\n  return this._proxy.national;\n};\n/* jshint ignore:start */\n\n/**\n * Access the voip\n *\n * @function voip\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.voip = function voip() {\n  return this._proxy.voip;\n};\n/* jshint ignore:start */\n\n/**\n * Access the sharedCost\n *\n * @function sharedCost\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.sharedCost = function sharedCost() {\n  return this._proxy.sharedCost;\n};\n/* jshint ignore:start */\n\n/**\n * Access the machineToMachine\n *\n * @function machineToMachine\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.machineToMachine = function machineToMachine() {\n  return this._proxy.machineToMachine;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAvailablePhoneNumberCountryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList} local -\n *          local resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList} tollFree -\n *          tollFree resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList} mobile -\n *          mobile resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList} national -\n *          national resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList} voip -\n *          voip resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList} sharedCost -\n *          sharedCost resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList} machineToMachine -\n *          machineToMachine resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account requesting the available phone number Country resource\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryContext = function AvailablePhoneNumberCountryContext(version, accountSid, countryCode) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/AvailablePhoneNumbers/\").concat(countryCode, \".json\"); // Dependents\n\n  this._local = undefined;\n  this._tollFree = undefined;\n  this._mobile = undefined;\n  this._national = undefined;\n  this._voip = undefined;\n  this._sharedCost = undefined;\n  this._machineToMachine = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'local', {\n  get: function get() {\n    if (!this._local) {\n      this._local = new LocalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._local;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'tollFree', {\n  get: function get() {\n    if (!this._tollFree) {\n      this._tollFree = new TollFreeList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._tollFree;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'mobile', {\n  get: function get() {\n    if (!this._mobile) {\n      this._mobile = new MobileList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._mobile;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'national', {\n  get: function get() {\n    if (!this._national) {\n      this._national = new NationalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._national;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'voip', {\n  get: function get() {\n    if (!this._voip) {\n      this._voip = new VoipList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._voip;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'sharedCost', {\n  get: function get() {\n    if (!this._sharedCost) {\n      this._sharedCost = new SharedCostList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._sharedCost;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'machineToMachine', {\n  get: function get() {\n    if (!this._machineToMachine) {\n      this._machineToMachine = new MachineToMachineList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._machineToMachine;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAvailablePhoneNumberCountryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AvailablePhoneNumberCountryList: AvailablePhoneNumberCountryList,\n  AvailablePhoneNumberCountryPage: AvailablePhoneNumberCountryPage,\n  AvailablePhoneNumberCountryInstance: AvailablePhoneNumberCountryInstance,\n  AvailablePhoneNumberCountryContext: AvailablePhoneNumberCountryContext\n};","map":null,"metadata":{},"sourceType":"script"}