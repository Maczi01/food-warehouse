{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} conferenceSid - The SID of the conference the participant is in\n */\n\n/* jshint ignore:end */\n\nParticipantList = function ParticipantList(version, accountSid, conferenceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participants\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version; // Path Solution\n\n  ParticipantListInstance._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid\n  };\n  ParticipantListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Conferences/\").concat(conferenceSid, \"/Participants.json\");\n  /* jshint ignore:start */\n\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.from - The `from` phone number used to invite a participant\n   * @param {string} opts.to -\n   *          The number, client id, or sip address of the new participant\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call `status_callback`\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          Set state change events that will trigger a callback\n   * @param {number} [opts.timeout] -\n   *          he number of seconds that we should wait for an answer\n   * @param {boolean} [opts.record] -\n   *          Whether to record the participant and their conferences\n   * @param {boolean} [opts.muted] - Whether to mute the agent\n   * @param {string} [opts.beep] -\n   *          Whether to play a notification beep to the conference when the participant joins\n   * @param {boolean} [opts.startConferenceOnEnter] -\n   *          Whether the conference starts when the participant joins the conference\n   * @param {boolean} [opts.endConferenceOnExit] -\n   *          Whether to end the conference when the participant leaves\n   * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n   * @param {string} [opts.waitMethod] -\n   *          The HTTP method we should use to call `wait_url`\n   * @param {boolean} [opts.earlyMedia] -\n   *          Whether agents can hear the state of the outbound call\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of agent conference participants\n   * @param {string} [opts.conferenceRecord] -\n   *          Whether to record the conference the participant is joining\n   * @param {string} [opts.conferenceTrim] -\n   *          Whether to trim leading and trailing silence from your recorded conference audio files\n   * @param {string} [opts.conferenceStatusCallback] -\n   *          The callback URL for conference events\n   * @param {string} [opts.conferenceStatusCallbackMethod] -\n   *          HTTP method for requesting `conference_status_callback` URL\n   * @param {string|list} [opts.conferenceStatusCallbackEvent] -\n   *          The conference state changes that should generate a call to `conference_status_callback`\n   * @param {string} [opts.recordingChannels] -\n   *          Specify `mono` or `dual` recording channels\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when we call `recording_status_callback`\n   * @param {string} [opts.sipAuthUsername] -\n   *          The SIP username used for authentication\n   * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n   * @param {string} [opts.region] -\n   *          The region where we should mix the conference audio\n   * @param {string} [opts.conferenceRecordingStatusCallback] -\n   *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n   * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n   *          The HTTP method we should use to call `conference_recording_status_callback`\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording state changes that should generate a call to `recording_status_callback`\n   * @param {string|list} [opts.conferenceRecordingStatusCallbackEvent] -\n   *          The conference recording state changes that should generate a call to `conference_recording_status_callback`\n   * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n   * @param {string} [opts.callSidToCoach] -\n   *          The SID of the participant who is being `coached`\n   * @param {string} [opts.byoc] - BYOC trunk SID (Beta)\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n\n  /* jshint ignore:end */\n\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Beep': _.get(opts, 'beep'),\n      'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n      'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n      'WaitUrl': _.get(opts, 'waitUrl'),\n      'WaitMethod': _.get(opts, 'waitMethod'),\n      'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n      'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n      'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n      'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n      'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'Region': _.get(opts, 'region'),\n      'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n      'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'ConferenceRecordingStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceRecordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'CallSidToCoach': _.get(opts, 'callSidToCoach'),\n      'Byoc': _.get(opts, 'byoc')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Hold': serialize.bool(_.get(opts, 'hold')),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} callSid - The Call SID of the resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.get = function get(callSid) {\n    return new ParticipantContext(this._version, this._solution.accountSid, this._solution.conferenceSid, callSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\n\nParticipantPage.prototype.constructor = ParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} callSidToCoach -\n *          The SID of the participant who is being `coached`\n * @property {boolean} coaching - Indicates if the participant changed to coach\n * @property {string} conferenceSid -\n *          The SID of the conference the participant is in\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {boolean} endConferenceOnExit -\n *          Whether the conference ends when the participant leaves\n * @property {boolean} muted - Whether the participant is muted\n * @property {boolean} hold - Whether the participant is on hold\n * @property {boolean} startConferenceOnEnter -\n *          Whether the conference starts when the participant joins the conference\n * @property {participant.status} status -\n *          The status of the participant's call in a session\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} conferenceSid - The SID of the conference the participant is in\n * @param {sid} callSid - The Call SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance = function ParticipantInstance(version, payload, accountSid, conferenceSid, callSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.callSid = payload.call_sid; // jshint ignore:line\n\n  this.callSidToCoach = payload.call_sid_to_coach; // jshint ignore:line\n\n  this.coaching = payload.coaching; // jshint ignore:line\n\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.endConferenceOnExit = payload.end_conference_on_exit; // jshint ignore:line\n\n  this.muted = payload.muted; // jshint ignore:line\n\n  this.hold = payload.hold; // jshint ignore:line\n\n  this.startConferenceOnEnter = payload.start_conference_on_enter; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid || this.callSid\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} conferenceSid -\n *          The SID of the conference with the participant to fetch\n * @param {sid} callSid - The Call SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext = function ParticipantContext(version, accountSid, conferenceSid, callSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/Conferences/\").concat(conferenceSid, \"/Participants/\").concat(callSid, \".json\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Hold': serialize.bool(_.get(opts, 'hold')),\n    'HoldUrl': _.get(opts, 'holdUrl'),\n    'HoldMethod': _.get(opts, 'holdMethod'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod'),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'BeepOnExit': serialize.bool(_.get(opts, 'beepOnExit')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'Coaching': serialize.bool(_.get(opts, 'coaching')),\n    'CallSidToCoach': _.get(opts, 'callSidToCoach')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":null,"metadata":{},"sourceType":"script"}