{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MemberList;\nvar MemberPage;\nvar MemberInstance;\nvar MemberContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MemberList\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueContext.MemberList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n * @param {string} queueSid - The SID of the Queue the member is in\n */\n\n/* jshint ignore:end */\n\nMemberList = function MemberList(version, accountSid, queueSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function members\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.QueueContext.MemberContext}\n   */\n\n  /* jshint ignore:end */\n  function MemberListInstance(sid) {\n    return MemberListInstance.get(sid);\n  }\n\n  MemberListInstance._version = version; // Path Solution\n\n  MemberListInstance._solution = {\n    accountSid: accountSid,\n    queueSid: queueSid\n  };\n  MemberListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Queues/\").concat(queueSid, \"/Members.json\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams MemberInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  MemberListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MemberInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MemberListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MemberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MemberListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MemberPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MemberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MemberListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MemberPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a member\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberList#\n   *\n   * @param {string} callSid - The Call SID of the resource(s) to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.QueueContext.MemberContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MemberListInstance.get = function get(callSid) {\n    return new MemberContext(this._version, this._solution.accountSid, this._solution.queueSid, callSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MemberListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MemberListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MemberListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MemberPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueContext.MemberPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MemberSolution} solution - Path solution\n *\n * @returns MemberPage\n */\n\n/* jshint ignore:end */\n\n\nMemberPage = function MemberPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MemberPage.prototype, Page.prototype);\n\nMemberPage.prototype.constructor = MemberPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MemberInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberPage#\n *\n * @param {MemberPayload} payload - Payload response from the API\n *\n * @returns MemberInstance\n */\n\n/* jshint ignore:end */\n\nMemberPage.prototype.getInstance = function getInstance(payload) {\n  return new MemberInstance(this._version, payload, this._solution.accountSid, this._solution.queueSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMemberPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMemberPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MemberContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueContext.MemberInstance\n *\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {Date} dateEnqueued - The date the member was enqueued\n * @property {number} position - This member's current position in the queue.\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {number} waitTime -\n *          The number of seconds the member has been in the queue.\n * @property {string} queueSid - The SID of the Queue the member is in\n *\n * @param {V2010} version - Version of the resource\n * @param {MemberPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} queueSid - The SID of the Queue the member is in\n * @param {sid_like} callSid - The Call SID of the resource(s) to fetch\n */\n\n/* jshint ignore:end */\n\n\nMemberInstance = function MemberInstance(version, payload, accountSid, queueSid, callSid) {\n  this._version = version; // Marshaled Properties\n\n  this.callSid = payload.call_sid; // jshint ignore:line\n\n  this.dateEnqueued = deserialize.rfc2822DateTime(payload.date_enqueued); // jshint ignore:line\n\n  this.position = deserialize.integer(payload.position); // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.waitTime = deserialize.integer(payload.wait_time); // jshint ignore:line\n\n  this.queueSid = payload.queue_sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    queueSid: queueSid,\n    callSid: callSid || this.callSid\n  };\n};\n\nObject.defineProperty(MemberInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new MemberContext(this._version, this._solution.accountSid, this._solution.queueSid, this._solution.callSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a MemberInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n\n/* jshint ignore:end */\n\nMemberInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a MemberInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.url - The absolute URL of the Queue resource\n * @param {string} [opts.method] - How to pass the update request data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n\n/* jshint ignore:end */\n\n\nMemberInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMemberInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMemberInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MemberContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueContext.MemberContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} queueSid - The SID of the Queue in which to find the members\n * @param {sid_like} callSid - The Call SID of the resource(s) to fetch\n */\n\n/* jshint ignore:end */\n\n\nMemberContext = function MemberContext(version, accountSid, queueSid, callSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    queueSid: queueSid,\n    callSid: callSid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/Queues/\").concat(queueSid, \"/Members/\").concat(callSid, \".json\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MemberInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n\n/* jshint ignore:end */\n\n\nMemberContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MemberInstance(this._version, payload, this._solution.accountSid, this._solution.queueSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a MemberInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.url - The absolute URL of the Queue resource\n * @param {string} [opts.method] - How to pass the update request data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n\n/* jshint ignore:end */\n\n\nMemberContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.url)) {\n    throw new Error('Required parameter \"opts.url\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Url': _.get(opts, 'url'),\n    'Method': _.get(opts, 'method')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MemberInstance(this._version, payload, this._solution.accountSid, this._solution.queueSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext.MemberContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMemberContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMemberContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MemberList: MemberList,\n  MemberPage: MemberPage,\n  MemberInstance: MemberInstance,\n  MemberContext: MemberContext\n};","map":null,"metadata":{},"sourceType":"script"}