{"ast":null,"code":"// expected hue range: [0, 360)\n// expected saturation range: [0, 1]\n// expected lightness range: [0, 1]\nvar hslToRgb = function hslToRgb(hue, saturation, lightness) {\n  // based on algorithm from http://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n  if (hue == undefined) {\n    return [0, 0, 0];\n  }\n\n  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;\n  var huePrime = hue / 60;\n  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  huePrime = Math.floor(huePrime);\n  var red;\n  var green;\n  var blue;\n\n  if (huePrime === 0) {\n    red = chroma;\n    green = secondComponent;\n    blue = 0;\n  } else if (huePrime === 1) {\n    red = secondComponent;\n    green = chroma;\n    blue = 0;\n  } else if (huePrime === 2) {\n    red = 0;\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime === 3) {\n    red = 0;\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime === 4) {\n    red = secondComponent;\n    green = 0;\n    blue = chroma;\n  } else if (huePrime === 5) {\n    red = chroma;\n    green = 0;\n    blue = secondComponent;\n  }\n\n  var lightnessAdjustment = lightness - chroma / 2;\n  red += lightnessAdjustment;\n  green += lightnessAdjustment;\n  blue += lightnessAdjustment;\n  return [Math.abs(Math.round(red * 255)), Math.abs(Math.round(green * 255)), Math.abs(Math.round(blue * 255))];\n};\n\nmodule.exports = hslToRgb;","map":null,"metadata":{},"sourceType":"script"}