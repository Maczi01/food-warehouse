{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar DataSessionList;\nvar DataSessionPage;\nvar DataSessionInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the DataSessionList\n *\n * @constructor Twilio.Wireless.V1.SimContext.DataSessionList\n *\n * @param {Twilio.Wireless.V1} version - Version of the resource\n * @param {string} simSid -\n *          The SID of the Sim resource that the Data Session is for\n */\n\n/* jshint ignore:end */\n\nDataSessionList = function DataSessionList(version, simSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function dataSessions\n   * @memberof Twilio.Wireless.V1.SimContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Wireless.V1.SimContext.DataSessionContext}\n   */\n\n  /* jshint ignore:end */\n  function DataSessionListInstance(sid) {\n    return DataSessionListInstance.get(sid);\n  }\n\n  DataSessionListInstance._version = version; // Path Solution\n\n  DataSessionListInstance._solution = {\n    simSid: simSid\n  };\n  DataSessionListInstance._uri = \"/Sims/\".concat(simSid, \"/DataSessions\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams DataSessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          The date that the record ended, given as GMT in ISO 8601 format\n   * @param {Date} [opts.start] -\n   *          The date that the Data Session started, given as GMT in ISO 8601 format\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  DataSessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists DataSessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          The date that the record ended, given as GMT in ISO 8601 format\n   * @param {Date} [opts.start] -\n   *          The date that the Data Session started, given as GMT in ISO 8601 format\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DataSessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of DataSessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.end] -\n   *          The date that the record ended, given as GMT in ISO 8601 format\n   * @param {Date} [opts.start] -\n   *          The date that the Data Session started, given as GMT in ISO 8601 format\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DataSessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'End': serialize.iso8601DateTime(_.get(opts, 'end')),\n      'Start': serialize.iso8601DateTime(_.get(opts, 'start')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DataSessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of DataSessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DataSessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DataSessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Wireless.V1.SimContext.DataSessionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  DataSessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DataSessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DataSessionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DataSessionPage\n *\n * @constructor Twilio.Wireless.V1.SimContext.DataSessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DataSessionSolution} solution - Path solution\n *\n * @returns DataSessionPage\n */\n\n/* jshint ignore:end */\n\n\nDataSessionPage = function DataSessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DataSessionPage.prototype, Page.prototype);\n\nDataSessionPage.prototype.constructor = DataSessionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of DataSessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Wireless.V1.SimContext.DataSessionPage#\n *\n * @param {DataSessionPayload} payload - Payload response from the API\n *\n * @returns DataSessionInstance\n */\n\n/* jshint ignore:end */\n\nDataSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new DataSessionInstance(this._version, payload, this._solution.simSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext.DataSessionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDataSessionPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDataSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DataSessionContext\n *\n * @constructor Twilio.Wireless.V1.SimContext.DataSessionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} simSid -\n *          The SID of the Sim resource that the Data Session is for\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} radioLink -\n *          The generation of wireless technology that the device was using\n * @property {string} operatorMcc -\n *          The 'mobile country code' is the unique ID of the home country where the Data Session took place\n * @property {string} operatorMnc -\n *          The 'mobile network code' is the unique ID specific to the mobile operator network where the Data Session took place\n * @property {string} operatorCountry -\n *          The three letter country code representing where the device's Data Session took place\n * @property {string} operatorName -\n *          The friendly name of the mobile operator network that the SIM-connected device is attached to\n * @property {string} cellId -\n *          The unique ID of the cellular tower that the device was attached to at the moment when the Data Session was last updated\n * @property {object} cellLocationEstimate -\n *          An object with the estimated location where the device's Data Session took place\n * @property {number} packetsUploaded -\n *          The number of packets uploaded by the device between the start time and when the Data Session was last updated\n * @property {number} packetsDownloaded -\n *          The number of packets downloaded by the device between the start time and when the Data Session was last updated\n * @property {Date} lastUpdated -\n *          The date that the resource was last updated, given as GMT in ISO 8601 format\n * @property {Date} start -\n *          The date that the Data Session started, given as GMT in ISO 8601 format\n * @property {Date} end -\n *          The date that the record ended, given as GMT in ISO 8601 format\n * @property {string} imei - The unique ID of the device using the SIM to connect\n *\n * @param {V1} version - Version of the resource\n * @param {DataSessionPayload} payload - The instance payload\n * @param {sid_like} simSid -\n *          The SID of the Sim resource that the Data Session is for\n */\n\n/* jshint ignore:end */\n\n\nDataSessionInstance = function DataSessionInstance(version, payload, simSid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.simSid = payload.sim_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.radioLink = payload.radio_link; // jshint ignore:line\n\n  this.operatorMcc = payload.operator_mcc; // jshint ignore:line\n\n  this.operatorMnc = payload.operator_mnc; // jshint ignore:line\n\n  this.operatorCountry = payload.operator_country; // jshint ignore:line\n\n  this.operatorName = payload.operator_name; // jshint ignore:line\n\n  this.cellId = payload.cell_id; // jshint ignore:line\n\n  this.cellLocationEstimate = payload.cell_location_estimate; // jshint ignore:line\n\n  this.packetsUploaded = deserialize.integer(payload.packets_uploaded); // jshint ignore:line\n\n  this.packetsDownloaded = deserialize.integer(payload.packets_downloaded); // jshint ignore:line\n\n  this.lastUpdated = deserialize.iso8601DateTime(payload.last_updated); // jshint ignore:line\n\n  this.start = deserialize.iso8601DateTime(payload.start); // jshint ignore:line\n\n  this.end = deserialize.iso8601DateTime(payload.end); // jshint ignore:line\n\n  this.imei = payload.imei; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    simSid: simSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext.DataSessionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDataSessionInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDataSessionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DataSessionList: DataSessionList,\n  DataSessionPage: DataSessionPage,\n  DataSessionInstance: DataSessionInstance\n};","map":null,"metadata":{},"sourceType":"script"}