{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FeedbackList;\nvar FeedbackPage;\nvar FeedbackInstance;\nvar FeedbackContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackList\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The unique sid that identifies this account\n * @param {string} callSid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\nFeedbackList = function FeedbackList(version, accountSid, callSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function feedback\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext}\n   */\n\n  /* jshint ignore:end */\n  function FeedbackListInstance(sid) {\n    return FeedbackListInstance.get(sid);\n  }\n\n  FeedbackListInstance._version = version; // Path Solution\n\n  FeedbackListInstance._solution = {\n    accountSid: accountSid,\n    callSid: callSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a feedback\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackList#\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext}\n   */\n\n  /* jshint ignore:end */\n\n  FeedbackListInstance.get = function get() {\n    return new FeedbackContext(this._version, this._solution.accountSid, this._solution.callSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FeedbackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FeedbackListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FeedbackListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FeedbackSolution} solution - Path solution\n *\n * @returns FeedbackPage\n */\n\n/* jshint ignore:end */\n\n\nFeedbackPage = function FeedbackPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FeedbackPage.prototype, Page.prototype);\n\nFeedbackPage.prototype.constructor = FeedbackPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FeedbackInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackPage#\n *\n * @param {FeedbackPayload} payload - Payload response from the API\n *\n * @returns FeedbackInstance\n */\n\n/* jshint ignore:end */\n\nFeedbackPage.prototype.getInstance = function getInstance(payload) {\n  return new FeedbackInstance(this._version, payload, this._solution.accountSid, this._solution.callSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFeedbackPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackInstance\n *\n * @property {string} accountSid - The unique sid that identifies this account\n * @property {Date} dateCreated - The date this resource was created\n * @property {Date} dateUpdated - The date this resource was last updated\n * @property {feedback.issues} issues - Issues experienced during the call\n * @property {number} qualityScore - 1 to 5 quality score\n * @property {string} sid -\n *          A string that uniquely identifies this feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {FeedbackPayload} payload - The instance payload\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} callSid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nFeedbackInstance = function FeedbackInstance(version, payload, accountSid, callSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.issues = payload.issues; // jshint ignore:line\n\n  this.qualityScore = deserialize.integer(payload.quality_score); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    callSid: callSid\n  };\n};\n\nObject.defineProperty(FeedbackInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FeedbackContext(this._version, this._solution.accountSid, this._solution.callSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * create a FeedbackInstance\n *\n * @function create\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackInstance#\n *\n * @param {object} opts - Options for request\n * @param {number} opts.qualityScore -\n *          The call quality expressed as an integer from 1 to 5\n * @param {feedback.issues|list} [opts.issue] - Issues experienced during the call\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackInstance\n */\n\n/* jshint ignore:end */\n\nFeedbackInstance.prototype.create = function create(opts, callback) {\n  return this._proxy.create(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FeedbackInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a FeedbackInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackInstance#\n *\n * @param {object} opts - Options for request\n * @param {number} opts.qualityScore -\n *          The call quality expressed as an integer from 1 to 5\n * @param {feedback.issues|list} [opts.issue] - Issues experienced during the call\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFeedbackInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} callSid - The call sid that uniquely identifies the call\n */\n\n/* jshint ignore:end */\n\n\nFeedbackContext = function FeedbackContext(version, accountSid, callSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    callSid: callSid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/Calls/\").concat(callSid, \"/Feedback.json\");\n};\n/* jshint ignore:start */\n\n/**\n * create a FeedbackInstance\n *\n * @function create\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext#\n *\n * @param {object} opts - Options for request\n * @param {number} opts.qualityScore -\n *          The call quality expressed as an integer from 1 to 5\n * @param {feedback.issues|list} [opts.issue] - Issues experienced during the call\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackContext.prototype.create = function create(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.qualityScore)) {\n    throw new Error('Required parameter \"opts.qualityScore\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'QualityScore': _.get(opts, 'qualityScore'),\n    'Issue': serialize.map(_.get(opts, 'issue'), function (e) {\n      return e;\n    })\n  });\n\n  var promise = this._version.create({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FeedbackInstance(this._version, payload, this._solution.accountSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FeedbackInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FeedbackInstance(this._version, payload, this._solution.accountSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a FeedbackInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext#\n *\n * @param {object} opts - Options for request\n * @param {number} opts.qualityScore -\n *          The call quality expressed as an integer from 1 to 5\n * @param {feedback.issues|list} [opts.issue] - Issues experienced during the call\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.qualityScore)) {\n    throw new Error('Required parameter \"opts.qualityScore\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'QualityScore': _.get(opts, 'qualityScore'),\n    'Issue': serialize.map(_.get(opts, 'issue'), function (e) {\n      return e;\n    })\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FeedbackInstance(this._version, payload, this._solution.accountSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFeedbackContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FeedbackList: FeedbackList,\n  FeedbackPage: FeedbackPage,\n  FeedbackInstance: FeedbackInstance,\n  FeedbackContext: FeedbackContext\n};","map":null,"metadata":{},"sourceType":"script"}