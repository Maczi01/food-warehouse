{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar WebhookList;\nvar WebhookPage;\nvar WebhookInstance;\nvar WebhookContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Conversations.V1.WebhookList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nWebhookList = function WebhookList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function webhooks\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.WebhookContext}\n   */\n\n  /* jshint ignore:end */\n  function WebhookListInstance(sid) {\n    return WebhookListInstance.get(sid);\n  }\n\n  WebhookListInstance._version = version; // Path Solution\n\n  WebhookListInstance._solution = {};\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a webhook\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.WebhookList#\n   *\n   * @returns {Twilio.Conversations.V1.WebhookContext}\n   */\n\n  /* jshint ignore:end */\n\n  WebhookListInstance.get = function get() {\n    return new WebhookContext(this._version);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.WebhookList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WebhookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WebhookListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Conversations.V1.WebhookPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WebhookSolution} solution - Path solution\n *\n * @returns WebhookPage\n */\n\n/* jshint ignore:end */\n\n\nWebhookPage = function WebhookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WebhookPage.prototype, Page.prototype);\n\nWebhookPage.prototype.constructor = WebhookPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WebhookInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.WebhookPage#\n *\n * @param {WebhookPayload} payload - Payload response from the API\n *\n * @returns WebhookInstance\n */\n\n/* jshint ignore:end */\n\nWebhookPage.prototype.getInstance = function getInstance(payload) {\n  return new WebhookInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.WebhookPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWebhookPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWebhookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Conversations.V1.WebhookInstance\n *\n * @property {string} accountSid -\n *          The unique id of the Account responsible for this conversation.\n * @property {webhook.method} method -\n *          The HTTP method to be used when sending a webhook request.\n * @property {string} filters -\n *          The list of webhook event triggers that are enabled for this Service.\n * @property {string} preWebhookUrl -\n *          The absolute url the pre-event webhook request should be sent to.\n * @property {string} postWebhookUrl -\n *          The absolute url the post-event webhook request should be sent to.\n * @property {webhook.target} target - The routing target of the webhook.\n * @property {string} url - An absolute URL for this webhook.\n *\n * @param {V1} version - Version of the resource\n * @param {WebhookPayload} payload - The instance payload\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance = function WebhookInstance(version, payload) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.method = payload.method; // jshint ignore:line\n\n  this.filters = payload.filters; // jshint ignore:line\n\n  this.preWebhookUrl = payload.pre_webhook_url; // jshint ignore:line\n\n  this.postWebhookUrl = payload.post_webhook_url; // jshint ignore:line\n\n  this.target = payload.target; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(WebhookInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WebhookContext(this._version);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\nWebhookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.WebhookInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.method] -\n *          The HTTP method to be used when sending a webhook request.\n * @param {string|list} [opts.filters] -\n *          The list of webhook event triggers that are enabled for this Service.\n * @param {string} [opts.preWebhookUrl] -\n *          The absolute url the pre-event webhook request should be sent to.\n * @param {string} [opts.postWebhookUrl] -\n *          The absolute url the post-event webhook request should be sent to.\n * @param {webhook.target} [opts.target] - The routing target of the webhook.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.WebhookInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWebhookInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Conversations.V1.WebhookContext\n *\n * @param {V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext = function WebhookContext(version) {\n  this._version = version; // Path Solution\n\n  this._solution = {};\n  this._uri = \"/Conversations/Webhooks\";\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WebhookInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.WebhookContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.method] -\n *          The HTTP method to be used when sending a webhook request.\n * @param {string|list} [opts.filters] -\n *          The list of webhook event triggers that are enabled for this Service.\n * @param {string} [opts.preWebhookUrl] -\n *          The absolute url the pre-event webhook request should be sent to.\n * @param {string} [opts.postWebhookUrl] -\n *          The absolute url the post-event webhook request should be sent to.\n * @param {webhook.target} [opts.target] - The routing target of the webhook.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Method': _.get(opts, 'method'),\n    'Filters': serialize.map(_.get(opts, 'filters'), function (e) {\n      return e;\n    }),\n    'PreWebhookUrl': _.get(opts, 'preWebhookUrl'),\n    'PostWebhookUrl': _.get(opts, 'postWebhookUrl'),\n    'Target': _.get(opts, 'target')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WebhookInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.WebhookContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWebhookContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WebhookList: WebhookList,\n  WebhookPage: WebhookPage,\n  WebhookInstance: WebhookInstance,\n  WebhookContext: WebhookContext\n};","map":null,"metadata":{},"sourceType":"script"}