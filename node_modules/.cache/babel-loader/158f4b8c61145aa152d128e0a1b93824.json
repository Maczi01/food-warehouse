{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FeedbackList;\nvar FeedbackPage;\nvar FeedbackInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} messageSid -\n *          The SID of the Message resource for which the feedback was provided\n */\n\n/* jshint ignore:end */\n\nFeedbackList = function FeedbackList(version, accountSid, messageSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function feedback\n   * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackContext}\n   */\n\n  /* jshint ignore:end */\n  function FeedbackListInstance(sid) {\n    return FeedbackListInstance.get(sid);\n  }\n\n  FeedbackListInstance._version = version; // Path Solution\n\n  FeedbackListInstance._solution = {\n    accountSid: accountSid,\n    messageSid: messageSid\n  };\n  FeedbackListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Messages/\").concat(messageSid, \"/Feedback.json\");\n  /* jshint ignore:start */\n\n  /**\n   * create a FeedbackInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {feedback.outcome} [opts.outcome] - Whether the feedback has arrived\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FeedbackInstance\n   */\n\n  /* jshint ignore:end */\n\n  FeedbackListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Outcome': _.get(opts, 'outcome')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FeedbackInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FeedbackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FeedbackListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FeedbackListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext.FeedbackPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FeedbackSolution} solution - Path solution\n *\n * @returns FeedbackPage\n */\n\n/* jshint ignore:end */\n\n\nFeedbackPage = function FeedbackPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FeedbackPage.prototype, Page.prototype);\n\nFeedbackPage.prototype.constructor = FeedbackPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FeedbackInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext.FeedbackPage#\n *\n * @param {FeedbackPayload} payload - Payload response from the API\n *\n * @returns FeedbackInstance\n */\n\n/* jshint ignore:end */\n\nFeedbackPage.prototype.getInstance = function getInstance(payload) {\n  return new FeedbackInstance(this._version, payload, this._solution.accountSid, this._solution.messageSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext.FeedbackPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFeedbackPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext.FeedbackInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} messageSid -\n *          The SID of the Message resource for which the feedback was provided\n * @property {feedback.outcome} outcome - Whether the feedback has arrived\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {FeedbackPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} messageSid -\n *          The SID of the Message resource for which the feedback was provided\n */\n\n/* jshint ignore:end */\n\n\nFeedbackInstance = function FeedbackInstance(version, payload, accountSid, messageSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.messageSid = payload.message_sid; // jshint ignore:line\n\n  this.outcome = payload.outcome; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    messageSid: messageSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext.FeedbackInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFeedbackInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FeedbackList: FeedbackList,\n  FeedbackPage: FeedbackPage,\n  FeedbackInstance: FeedbackInstance\n};","map":null,"metadata":{},"sourceType":"script"}