{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _scale = _interopRequireDefault(require(\"../run/scale\"));\n\nvar _resolve = _interopRequireDefault(require(\"../indices/resolve\"));\n\nvar getCharacterSpacing = R.pathOr(0, ['attributes', 'characterSpacing']);\n/**\n * Scale run positions\n *\n * @param  {Object}  run\n * @param  {Array}  positions\n * @return {Array} scaled positions\n */\n\nvar scalePositions = function scalePositions(run, positions) {\n  var multScale = R.multiply((0, _scale[\"default\"])(run));\n  var characterSpacing = getCharacterSpacing(run);\n  var scalePosition = R.evolve({\n    xAdvance: R.o(R.add(characterSpacing), multScale),\n    yAdvance: multScale,\n    xOffset: multScale,\n    yOffset: multScale\n  });\n  var subCharacterSpacing = R.evolve({\n    xAdvance: R.subtract(R.__, characterSpacing)\n  });\n  return R.compose(R.adjust(-1, subCharacterSpacing), R.map(scalePosition))(positions);\n};\n/**\n * Create glyph run\n *\n * @param  {String}  string\n * @param  {Object}  run\n * @return {Object}  glyph run\n */\n\n\nvar layoutRun = function layoutRun(string) {\n  return function (run) {\n    var start = run.start,\n        end = run.end,\n        _run$attributes = run.attributes,\n        attributes = _run$attributes === void 0 ? {} : _run$attributes;\n    var font = attributes.font;\n    if (!font) return (0, _extends2[\"default\"])({}, run, {\n      glyphs: [],\n      glyphIndices: [],\n      positions: []\n    });\n    var runString = string.slice(start, end);\n    var glyphRun = font.layout(runString);\n    var positions = scalePositions(run, glyphRun.positions);\n    var glyphIndices = (0, _resolve[\"default\"])(runString, glyphRun.stringIndices || []);\n    return (0, _extends2[\"default\"])({}, run, {\n      positions: positions,\n      glyphIndices: glyphIndices,\n      glyphs: glyphRun.glyphs\n    });\n  };\n};\n/**\n * Generate glyphs for single attributed string\n *\n * @param  {Object}  layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings\n * @return {Array} attributed string with glyphs\n */\n\n\nvar generateGlyphs = function generateGlyphs() {\n  return function (attributedString) {\n    return R.evolve({\n      runs: R.map(layoutRun(attributedString.string))\n    })(attributedString);\n  };\n};\n\nvar _default = generateGlyphs;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}