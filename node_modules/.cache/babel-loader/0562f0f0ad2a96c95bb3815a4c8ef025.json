{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FeedbackList = require('./message/feedback').FeedbackList;\n\nvar MediaList = require('./message/media').MediaList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version; // Path Solution\n\n  MessageListInstance._solution = {\n    accountSid: accountSid\n  };\n  MessageListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Messages.json\");\n  /* jshint ignore:start */\n\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n\n  /* jshint ignore:end */\n\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function (e) {\n        return e;\n      }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function (e) {\n        return e;\n      })\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n\n/* jshint ignore:end */\n\n\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\n\nMessagePage.prototype.constructor = MessagePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagePage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} body - The message text\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {message.direction} direction - The direction of the message\n * @property {number} errorCode - The error code associated with the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} from - The phone number that initiated the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {string} price - The amount billed for the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} sid - The unique string that identifies the resource\n * @property {message.status} status - The status of the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} to - The phone number that received the message\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.body = payload.body; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n\n  this.errorMessage = payload.error_message; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n\n  this.numMedia = payload.num_media; // jshint ignore:line\n\n  this.numSegments = payload.num_segments; // jshint ignore:line\n\n  this.price = payload.price; // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(MessageInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.body - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n/* jshint ignore:start */\n\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/Messages/\").concat(sid, \".json\"); // Dependents\n\n  this._media = undefined;\n  this._feedback = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.body - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.body)) {\n    throw new Error('Required parameter \"opts.body\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Body': _.get(opts, 'body')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype, 'media', {\n  get: function get() {\n    if (!this._media) {\n      this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._media;\n  }\n});\nObject.defineProperty(MessageContext.prototype, 'feedback', {\n  get: function get() {\n    if (!this._feedback) {\n      this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._feedback;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};","map":null,"metadata":{},"sourceType":"script"}