{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _copy = _interopRequireDefault(require(\"./copy\"));\n\nvar _slice = _interopRequireDefault(require(\"./slice\"));\n\nvar _concat = _interopRequireDefault(require(\"./concat\"));\n\nvar _append = _interopRequireDefault(require(\"./append\"));\n\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\n\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\n\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\n\n\nvar insertGlyph = function insertGlyph(index, glyph, run) {\n  if (!glyph) return (0, _copy[\"default\"])(run); // Split resolves ligature splitting in case new glyph breaks some\n\n  var leadingRun = (0, _slice[\"default\"])(0, index, run);\n  var trailingRun = (0, _slice[\"default\"])(index, Infinity, run);\n  return (0, _concat[\"default\"])((0, _append[\"default\"])(glyph, leadingRun), trailingRun);\n};\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\n\n\nvar insert = function insert(index, value, run) {\n  var font = (0, _getFont[\"default\"])(run);\n  var glyph = (0, _isNumber[\"default\"])(value) ? (0, _fromCodePoint[\"default\"])(value, font) : value;\n  return insertGlyph(index, glyph, run);\n};\n\nvar _default = R.curryN(3, insert);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}