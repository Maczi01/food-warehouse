{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar CompositionHookList;\nvar CompositionHookPage;\nvar CompositionHookInstance;\nvar CompositionHookContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionHookList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCompositionHookList = function CompositionHookList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function compositionHooks\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionHookContext}\n   */\n\n  /* jshint ignore:end */\n  function CompositionHookListInstance(sid) {\n    return CompositionHookListInstance.get(sid);\n  }\n\n  CompositionHookListInstance._version = version; // Path Solution\n\n  CompositionHookListInstance._solution = {};\n  CompositionHookListInstance._uri = \"/CompositionHooks\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams CompositionHookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  CompositionHookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists CompositionHookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of CompositionHookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionHookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of CompositionHookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionHookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a CompositionHookInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A unique string to describe the resource\n   * @param {boolean} [opts.enabled] - Whether the composition hook is active\n   * @param {object} [opts.videoLayout] -\n   *          An object that describes the video layout of the composition hook\n   * @param {string|list} [opts.audioSources] -\n   *          An array of track names from the same group room to merge\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          An array of track names to exclude\n   * @param {string} [opts.resolution] -\n   *          A string that describes the rows (width) and columns (height) of the generated composed video in pixels\n   * @param {composition_hook.format} [opts.format] -\n   *          The container format of the media files used by the compositions created by the composition hook\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {boolean} [opts.trim] -\n   *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionHookInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function (e) {\n        return e;\n      }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function (e) {\n        return e;\n      }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a composition_hook\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.CompositionHookContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.get = function get(sid) {\n    return new CompositionHookContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionHookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionHookListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionHookPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionHookSolution} solution - Path solution\n *\n * @returns CompositionHookPage\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookPage = function CompositionHookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionHookPage.prototype, Page.prototype);\n\nCompositionHookPage.prototype.constructor = CompositionHookPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CompositionHookInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionHookPage#\n *\n * @param {CompositionHookPayload} payload - Payload response from the API\n *\n * @returns CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\nCompositionHookPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionHookInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionHookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionHookInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} enabled - Whether the CompositionHook is active\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} audioSources -\n *          The array of track names to include in the compositions created by the composition hook\n * @property {string} audioSourcesExcluded -\n *          The array of track names to exclude from the compositions created by the composition hook\n * @property {object} videoLayout -\n *          A JSON object that describes the video layout of the Composition\n * @property {string} resolution -\n *          The dimensions of the video image in pixels expressed as columns (width) and rows (height)\n * @property {boolean} trim - Whether intervals with no media are clipped\n * @property {composition_hook.format} format -\n *          The container format of the media files used by the compositions created by the composition hook\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we should use to call status_callback\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionHookPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance = function CompositionHookInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n\n  this.resolution = payload.resolution; // jshint ignore:line\n\n  this.trim = payload.trim; // jshint ignore:line\n\n  this.format = payload.format; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(CompositionHookInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new CompositionHookContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionHookInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\nCompositionHookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a CompositionHookInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a CompositionHookInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName - A unique string to describe the resource\n * @param {boolean} [opts.enabled] - Whether the composition hook is active\n * @param {object} [opts.videoLayout] -\n *          A JSON object that describes the video layout of the composition hook\n * @param {string|list} [opts.audioSources] -\n *          An array of track names from the same group room to merge\n * @param {string|list} [opts.audioSourcesExcluded] -\n *          An array of track names to exclude\n * @param {boolean} [opts.trim] -\n *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n * @param {composition_hook.format} [opts.format] -\n *          The container format of the media files used by the compositions created by the composition hook\n * @param {string} [opts.resolution] -\n *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionHookInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionHookContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext = function CompositionHookContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/CompositionHooks/\".concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionHookInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a CompositionHookInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a CompositionHookInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName - A unique string to describe the resource\n * @param {boolean} [opts.enabled] - Whether the composition hook is active\n * @param {object} [opts.videoLayout] -\n *          A JSON object that describes the video layout of the composition hook\n * @param {string|list} [opts.audioSources] -\n *          An array of track names from the same group room to merge\n * @param {string|list} [opts.audioSourcesExcluded] -\n *          An array of track names to exclude\n * @param {boolean} [opts.trim] -\n *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n * @param {composition_hook.format} [opts.format] -\n *          The container format of the media files used by the compositions created by the composition hook\n * @param {string} [opts.resolution] -\n *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n    'AudioSources': serialize.map(_.get(opts, 'audioSources'), function (e) {\n      return e;\n    }),\n    'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function (e) {\n      return e;\n    }),\n    'Trim': serialize.bool(_.get(opts, 'trim')),\n    'Format': _.get(opts, 'format'),\n    'Resolution': _.get(opts, 'resolution'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionHookContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionHookList: CompositionHookList,\n  CompositionHookPage: CompositionHookPage,\n  CompositionHookInstance: CompositionHookInstance,\n  CompositionHookContext: CompositionHookContext\n};","map":null,"metadata":{},"sourceType":"script"}