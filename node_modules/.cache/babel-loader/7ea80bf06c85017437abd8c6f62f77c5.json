{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FeedbackSummaryList;\nvar FeedbackSummaryPage;\nvar FeedbackSummaryInstance;\nvar FeedbackSummaryContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackSummaryList\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n\n/* jshint ignore:end */\n\nFeedbackSummaryList = function FeedbackSummaryList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function feedbackSummaries\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext}\n   */\n\n  /* jshint ignore:end */\n  function FeedbackSummaryListInstance(sid) {\n    return FeedbackSummaryListInstance.get(sid);\n  }\n\n  FeedbackSummaryListInstance._version = version; // Path Solution\n\n  FeedbackSummaryListInstance._solution = {\n    accountSid: accountSid\n  };\n  FeedbackSummaryListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Calls/FeedbackSummary.json\");\n  /* jshint ignore:start */\n\n  /**\n   * create a FeedbackSummaryInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryList#\n   *\n   * @param {object} opts - Options for request\n   * @param {Date} opts.startDate - Only include feedback given on or after this date\n   * @param {Date} opts.endDate - Only include feedback given on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          `true` includes feedback from the specified account and its subaccounts\n   * @param {string} [opts.statusCallback] -\n   *          The URL that we will request when the feedback summary is complete\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we use to make requests to the StatusCallback URL\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FeedbackSummaryInstance\n   */\n\n  /* jshint ignore:end */\n\n  FeedbackSummaryListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.startDate)) {\n      throw new Error('Required parameter \"opts.startDate\" missing.');\n    }\n\n    if (_.isUndefined(opts.endDate)) {\n      throw new Error('Required parameter \"opts.endDate\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FeedbackSummaryInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a feedback_summary\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryList#\n   *\n   * @param {string} sid -\n   *          A string that uniquely identifies this feedback summary resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FeedbackSummaryListInstance.get = function get(sid) {\n    return new FeedbackSummaryContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FeedbackSummaryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FeedbackSummaryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FeedbackSummaryListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackSummaryPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FeedbackSummarySolution} solution - Path solution\n *\n * @returns FeedbackSummaryPage\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryPage = function FeedbackSummaryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FeedbackSummaryPage.prototype, Page.prototype);\n\nFeedbackSummaryPage.prototype.constructor = FeedbackSummaryPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FeedbackSummaryInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryPage#\n *\n * @param {FeedbackSummaryPayload} payload - Payload response from the API\n *\n * @returns FeedbackSummaryInstance\n */\n\n/* jshint ignore:end */\n\nFeedbackSummaryPage.prototype.getInstance = function getInstance(payload) {\n  return new FeedbackSummaryInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFeedbackSummaryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackSummaryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance\n *\n * @property {string} accountSid - The unique sid that identifies this account\n * @property {number} callCount - The total number of calls\n * @property {number} callFeedbackCount -\n *          The total number of calls with a feedback entry\n * @property {Date} dateCreated - The date this resource was created\n * @property {Date} dateUpdated - The date this resource was last updated\n * @property {Date} endDate - The latest feedback entry date in the summary\n * @property {boolean} includeSubaccounts -\n *          Whether the feedback summary includes subaccounts\n * @property {string} issues - Issues experienced during the call\n * @property {number} qualityScoreAverage -\n *          The average QualityScore of the feedback entries\n * @property {number} qualityScoreMedian -\n *          The median QualityScore of the feedback entries\n * @property {number} qualityScoreStandardDeviation -\n *          The standard deviation of the quality scores\n * @property {string} sid - A string that uniquely identifies this feedback entry\n * @property {Date} startDate - The earliest feedback entry date in the summary\n * @property {feedback_summary.status} status - The status of the feedback summary\n *\n * @param {V2010} version - Version of the resource\n * @param {FeedbackSummaryPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid -\n *          A string that uniquely identifies this feedback summary resource\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryInstance = function FeedbackSummaryInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.callCount = deserialize.integer(payload.call_count); // jshint ignore:line\n\n  this.callFeedbackCount = deserialize.integer(payload.call_feedback_count); // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.endDate = deserialize.iso8601DateTime(payload.end_date); // jshint ignore:line\n\n  this.includeSubaccounts = payload.include_subaccounts; // jshint ignore:line\n\n  this.issues = payload.issues; // jshint ignore:line\n\n  this.qualityScoreAverage = deserialize.decimal(payload.quality_score_average); // jshint ignore:line\n\n  this.qualityScoreMedian = deserialize.decimal(payload.quality_score_median); // jshint ignore:line\n\n  this.qualityScoreStandardDeviation = deserialize.decimal(payload.quality_score_standard_deviation); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.startDate = deserialize.iso8601DateTime(payload.start_date); // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FeedbackSummaryInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FeedbackSummaryContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FeedbackSummaryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackSummaryInstance\n */\n\n/* jshint ignore:end */\n\nFeedbackSummaryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FeedbackSummaryInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackSummaryInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFeedbackSummaryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FeedbackSummaryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} sid -\n *          A string that uniquely identifies this feedback summary resource\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryContext = function FeedbackSummaryContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/Calls/FeedbackSummary/\").concat(sid, \".json\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FeedbackSummaryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackSummaryInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FeedbackSummaryInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FeedbackSummaryInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FeedbackSummaryInstance\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFeedbackSummaryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFeedbackSummaryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FeedbackSummaryList: FeedbackSummaryList,\n  FeedbackSummaryPage: FeedbackSummaryPage,\n  FeedbackSummaryInstance: FeedbackSummaryInstance,\n  FeedbackSummaryContext: FeedbackSummaryContext\n};","map":null,"metadata":{},"sourceType":"script"}