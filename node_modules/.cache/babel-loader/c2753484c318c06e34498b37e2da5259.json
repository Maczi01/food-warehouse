{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar CallSummaryList = require('./call/summary').CallSummaryList;\n\nvar EventList = require('./call/event').EventList;\n\nvar MetricList = require('./call/metric').MetricList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar CallList;\nvar CallPage;\nvar CallInstance;\nvar CallContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CallList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Insights.V1.CallList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCallList = function CallList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function calls\n   * @memberof Twilio.Insights.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.CallContext}\n   */\n\n  /* jshint ignore:end */\n  function CallListInstance(sid) {\n    return CallListInstance.get(sid);\n  }\n\n  CallListInstance._version = version; // Path Solution\n\n  CallListInstance._solution = {};\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a call\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.CallList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Insights.V1.CallContext}\n   */\n\n  /* jshint ignore:end */\n\n  CallListInstance.get = function get(sid) {\n    return new CallContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.CallList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CallListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CallListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CallListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CallPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Insights.V1.CallPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CallSolution} solution - Path solution\n *\n * @returns CallPage\n */\n\n/* jshint ignore:end */\n\n\nCallPage = function CallPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CallPage.prototype, Page.prototype);\n\nCallPage.prototype.constructor = CallPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CallInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.CallPage#\n *\n * @param {CallPayload} payload - Payload response from the API\n *\n * @returns CallInstance\n */\n\n/* jshint ignore:end */\n\nCallPage.prototype.getInstance = function getInstance(payload) {\n  return new CallInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.CallPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCallPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCallPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CallContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Insights.V1.CallInstance\n *\n * @property {string} sid - The sid\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {CallPayload} payload - The instance payload\n * @param {sid} sid - The sid\n */\n\n/* jshint ignore:end */\n\n\nCallInstance = function CallInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(CallInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new CallContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CallInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.CallInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\nCallInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the events\n *\n * @function events\n * @memberof Twilio.Insights.V1.CallInstance#\n *\n * @returns {Twilio.Insights.V1.CallContext.EventList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.events = function events() {\n  return this._proxy.events;\n};\n/* jshint ignore:start */\n\n/**\n * Access the metrics\n *\n * @function metrics\n * @memberof Twilio.Insights.V1.CallInstance#\n *\n * @returns {Twilio.Insights.V1.CallContext.MetricList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.metrics = function metrics() {\n  return this._proxy.metrics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the summary\n *\n * @function summary\n * @memberof Twilio.Insights.V1.CallInstance#\n *\n * @returns {Twilio.Insights.V1.CallContext.CallSummaryList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.summary = function summary() {\n  return this._proxy.summary;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.CallInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCallInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CallContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Insights.V1.CallContext\n *\n * @property {Twilio.Insights.V1.CallContext.EventList} events - events resource\n * @property {Twilio.Insights.V1.CallContext.MetricList} metrics - metrics resource\n * @property {Twilio.Insights.V1.CallContext.CallSummaryList} summary -\n *          summary resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The sid\n */\n\n/* jshint ignore:end */\n\n\nCallContext = function CallContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Voice/\".concat(sid); // Dependents\n\n  this._events = undefined;\n  this._metrics = undefined;\n  this._summary = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CallInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.CallContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\n\nCallContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CallInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(CallContext.prototype, 'events', {\n  get: function get() {\n    if (!this._events) {\n      this._events = new EventList(this._version, this._solution.sid);\n    }\n\n    return this._events;\n  }\n});\nObject.defineProperty(CallContext.prototype, 'metrics', {\n  get: function get() {\n    if (!this._metrics) {\n      this._metrics = new MetricList(this._version, this._solution.sid);\n    }\n\n    return this._metrics;\n  }\n});\nObject.defineProperty(CallContext.prototype, 'summary', {\n  get: function get() {\n    if (!this._summary) {\n      this._summary = new CallSummaryList(this._version, this._solution.sid);\n    }\n\n    return this._summary;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.CallContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nCallContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCallContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CallList: CallList,\n  CallPage: CallPage,\n  CallInstance: CallInstance,\n  CallContext: CallContext\n};","map":null,"metadata":{},"sourceType":"script"}