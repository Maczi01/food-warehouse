{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar CredentialListList = require('./trunk/credentialList').CredentialListList;\n\nvar IpAccessControlListList = require('./trunk/ipAccessControlList').IpAccessControlListList;\n\nvar OriginationUrlList = require('./trunk/originationUrl').OriginationUrlList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar PhoneNumberList = require('./trunk/phoneNumber').PhoneNumberList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar TrunkList;\nvar TrunkPage;\nvar TrunkInstance;\nvar TrunkContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkList\n *\n * @constructor Twilio.Trunking.V1.TrunkList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nTrunkList = function TrunkList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function trunks\n   * @memberof Twilio.Trunking.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n\n  /* jshint ignore:end */\n  function TrunkListInstance(sid) {\n    return TrunkListInstance.get(sid);\n  }\n\n  TrunkListInstance._version = version; // Path Solution\n\n  TrunkListInstance._solution = {};\n  TrunkListInstance._uri = \"/Trunks\";\n  /* jshint ignore:start */\n\n  /**\n   * create a TrunkInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.domainName] -\n   *          The unique address you reserve on Twilio to which you route your SIP traffic\n   * @param {string} [opts.disasterRecoveryUrl] -\n   *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n   * @param {string} [opts.disasterRecoveryMethod] -\n   *          The HTTP method we should use to call the disaster_recovery_url\n   * @param {trunk.recording_setting} [opts.recording] -\n   *          The recording settings for the trunk\n   * @param {boolean} [opts.secure] -\n   *          Whether Secure Trunking is enabled for the trunk\n   * @param {boolean} [opts.cnamLookupEnabled] -\n   *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrunkInstance\n   */\n\n  /* jshint ignore:end */\n\n  TrunkListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'DomainName': _.get(opts, 'domainName'),\n      'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n      'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n      'Recording': _.get(opts, 'recording'),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams TrunkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TrunkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a trunk\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.get = function get(sid) {\n    return new TrunkContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrunkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrunkListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkPage\n *\n * @constructor Twilio.Trunking.V1.TrunkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrunkSolution} solution - Path solution\n *\n * @returns TrunkPage\n */\n\n/* jshint ignore:end */\n\n\nTrunkPage = function TrunkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrunkPage.prototype, Page.prototype);\n\nTrunkPage.prototype.constructor = TrunkPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TrunkInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @param {TrunkPayload} payload - Payload response from the API\n *\n * @returns TrunkInstance\n */\n\n/* jshint ignore:end */\n\nTrunkPage.prototype.getInstance = function getInstance(payload) {\n  return new TrunkInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTrunkPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTrunkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} domainName -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @property {string} disasterRecoveryMethod -\n *          The HTTP method we use to call the disaster_recovery_url\n * @property {string} disasterRecoveryUrl -\n *          The HTTP URL that we call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} secure - Whether Secure Trunking is enabled for the trunk\n * @property {object} recording - The recording settings for the trunk\n * @property {boolean} cnamLookupEnabled -\n *          Whether Caller ID Name (CNAM) lookup is enabled for the trunk\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {string} authTypeSet - Reserved\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TrunkPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance = function TrunkInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.domainName = payload.domain_name; // jshint ignore:line\n\n  this.disasterRecoveryMethod = payload.disaster_recovery_method; // jshint ignore:line\n\n  this.disasterRecoveryUrl = payload.disaster_recovery_url; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.secure = payload.secure; // jshint ignore:line\n\n  this.recording = payload.recording; // jshint ignore:line\n\n  this.cnamLookupEnabled = payload.cnam_lookup_enabled; // jshint ignore:line\n\n  this.authType = payload.auth_type; // jshint ignore:line\n\n  this.authTypeSet = payload.auth_type_set; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TrunkInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new TrunkContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\nTrunkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.recording_setting} [opts.recording] -\n *          The recording settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the originationUrls\n *\n * @function originationUrls\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.originationUrls = function originationUrls() {\n  return this._proxy.originationUrls;\n};\n/* jshint ignore:start */\n\n/**\n * Access the credentialsLists\n *\n * @function credentialsLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.CredentialListList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.credentialsLists = function credentialsLists() {\n  return this._proxy.credentialsLists;\n};\n/* jshint ignore:start */\n\n/**\n * Access the ipAccessControlLists\n *\n * @function ipAccessControlLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.ipAccessControlLists = function ipAccessControlLists() {\n  return this._proxy.ipAccessControlLists;\n};\n/* jshint ignore:start */\n\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.PhoneNumberList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTrunkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext\n *\n * @property {Twilio.Trunking.V1.TrunkContext.OriginationUrlList} originationUrls -\n *          originationUrls resource\n * @property {Twilio.Trunking.V1.TrunkContext.CredentialListList} credentialsLists -\n *          credentialsLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList} ipAccessControlLists -\n *          ipAccessControlLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext = function TrunkContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Trunks/\".concat(sid); // Dependents\n\n  this._originationUrls = undefined;\n  this._credentialsLists = undefined;\n  this._ipAccessControlLists = undefined;\n  this._phoneNumbers = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.recording_setting} [opts.recording] -\n *          The recording settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DomainName': _.get(opts, 'domainName'),\n    'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n    'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n    'Recording': _.get(opts, 'recording'),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrunkContext.prototype, 'originationUrls', {\n  get: function get() {\n    if (!this._originationUrls) {\n      this._originationUrls = new OriginationUrlList(this._version, this._solution.sid);\n    }\n\n    return this._originationUrls;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'credentialsLists', {\n  get: function get() {\n    if (!this._credentialsLists) {\n      this._credentialsLists = new CredentialListList(this._version, this._solution.sid);\n    }\n\n    return this._credentialsLists;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'ipAccessControlLists', {\n  get: function get() {\n    if (!this._ipAccessControlLists) {\n      this._ipAccessControlLists = new IpAccessControlListList(this._version, this._solution.sid);\n    }\n\n    return this._ipAccessControlLists;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'phoneNumbers', {\n  get: function get() {\n    if (!this._phoneNumbers) {\n      this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n    }\n\n    return this._phoneNumbers;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTrunkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrunkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrunkList: TrunkList,\n  TrunkPage: TrunkPage,\n  TrunkInstance: TrunkInstance,\n  TrunkContext: TrunkContext\n};","map":null,"metadata":{},"sourceType":"script"}