{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AddressList = require('./account/address').AddressList;\n\nvar ApplicationList = require('./account/application').ApplicationList;\n\nvar AuthorizedConnectAppList = require('./account/authorizedConnectApp').AuthorizedConnectAppList;\n\nvar AvailablePhoneNumberCountryList = require('./account/availablePhoneNumber').AvailablePhoneNumberCountryList;\n\nvar BalanceList = require('./account/balance').BalanceList;\n\nvar CallList = require('./account/call').CallList;\n\nvar ConferenceList = require('./account/conference').ConferenceList;\n\nvar ConnectAppList = require('./account/connectApp').ConnectAppList;\n\nvar IncomingPhoneNumberList = require('./account/incomingPhoneNumber').IncomingPhoneNumberList;\n\nvar KeyList = require('./account/key').KeyList;\n\nvar MessageList = require('./account/message').MessageList;\n\nvar NewKeyList = require('./account/newKey').NewKeyList;\n\nvar NewSigningKeyList = require('./account/newSigningKey').NewSigningKeyList;\n\nvar NotificationList = require('./account/notification').NotificationList;\n\nvar OutgoingCallerIdList = require('./account/outgoingCallerId').OutgoingCallerIdList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar QueueList = require('./account/queue').QueueList;\n\nvar RecordingList = require('./account/recording').RecordingList;\n\nvar ShortCodeList = require('./account/shortCode').ShortCodeList;\n\nvar SigningKeyList = require('./account/signingKey').SigningKeyList;\n\nvar SipList = require('./account/sip').SipList;\n\nvar TokenList = require('./account/token').TokenList;\n\nvar TranscriptionList = require('./account/transcription').TranscriptionList;\n\nvar UsageList = require('./account/usage').UsageList;\n\nvar ValidationRequestList = require('./account/validationRequest').ValidationRequestList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar AccountList;\nvar AccountPage;\nvar AccountInstance;\nvar AccountContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AccountList\n *\n * @constructor Twilio.Api.V2010.AccountList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nAccountList = function AccountList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function accounts\n   * @memberof Twilio.Api.V2010#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext}\n   */\n\n  /* jshint ignore:end */\n  function AccountListInstance(sid) {\n    return AccountListInstance.get(sid);\n  }\n\n  AccountListInstance._version = version; // Path Solution\n\n  AccountListInstance._solution = {};\n  AccountListInstance._uri = \"/Accounts.json\";\n  /* jshint ignore:start */\n\n  /**\n   * create a AccountInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description of the account\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AccountInstance\n   */\n\n  /* jshint ignore:end */\n\n  AccountListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AccountInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams AccountInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - FriendlyName to filter on\n   * @param {account.status} [opts.status] - Status to filter on\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  AccountListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AccountInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - FriendlyName to filter on\n   * @param {account.status} [opts.status] - Status to filter on\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AccountListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AccountInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - FriendlyName to filter on\n   * @param {account.status} [opts.status] - Status to filter on\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AccountListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AccountPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AccountInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AccountListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AccountPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a account\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @param {string} sid - Fetch by unique Account Sid\n   *\n   * @returns {Twilio.Api.V2010.AccountContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AccountListInstance.get = function get(sid) {\n    return new AccountContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AccountListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AccountListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AccountListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AccountPage\n *\n * @constructor Twilio.Api.V2010.AccountPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AccountSolution} solution - Path solution\n *\n * @returns AccountPage\n */\n\n/* jshint ignore:end */\n\n\nAccountPage = function AccountPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AccountPage.prototype, Page.prototype);\n\nAccountPage.prototype.constructor = AccountPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AccountInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountPage#\n *\n * @param {AccountPayload} payload - Payload response from the API\n *\n * @returns AccountInstance\n */\n\n/* jshint ignore:end */\n\nAccountPage.prototype.getInstance = function getInstance(payload) {\n  return new AccountInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAccountPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAccountPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AccountContext\n *\n * @constructor Twilio.Api.V2010.AccountInstance\n *\n * @property {string} authToken - The authorization token for this account\n * @property {Date} dateCreated - The date this account was created\n * @property {Date} dateUpdated - The date this account was last updated\n * @property {string} friendlyName - A human readable description of this account\n * @property {string} ownerAccountSid -\n *          The unique 34 character id representing the parent of this account\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {account.status} status - The status of this account\n * @property {string} subresourceUris - Account Instance Subresources\n * @property {account.type} type - The type of this account\n * @property {string} uri -\n *          The URI for this resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {AccountPayload} payload - The instance payload\n * @param {sid} sid - Fetch by unique Account Sid\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance = function AccountInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.authToken = payload.auth_token; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.ownerAccountSid = payload.owner_account_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AccountInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new AccountContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AccountInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccountInstance\n */\n\n/* jshint ignore:end */\n\nAccountInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a AccountInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - FriendlyName to update\n * @param {account.status} [opts.status] - Status to update the Account with\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccountInstance\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the addresses\n *\n * @function addresses\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AddressList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.addresses = function addresses() {\n  return this._proxy.addresses;\n};\n/* jshint ignore:start */\n\n/**\n * Access the applications\n *\n * @function applications\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ApplicationList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.applications = function applications() {\n  return this._proxy.applications;\n};\n/* jshint ignore:start */\n\n/**\n * Access the authorizedConnectApps\n *\n * @function authorizedConnectApps\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.authorizedConnectApps = function authorizedConnectApps() {\n  return this._proxy.authorizedConnectApps;\n};\n/* jshint ignore:start */\n\n/**\n * Access the availablePhoneNumbers\n *\n * @function availablePhoneNumbers\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.availablePhoneNumbers = function availablePhoneNumbers() {\n  return this._proxy.availablePhoneNumbers;\n};\n/* jshint ignore:start */\n\n/**\n * Access the balance\n *\n * @function balance\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.BalanceList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.balance = function balance() {\n  return this._proxy.balance;\n};\n/* jshint ignore:start */\n\n/**\n * Access the calls\n *\n * @function calls\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.calls = function calls() {\n  return this._proxy.calls;\n};\n/* jshint ignore:start */\n\n/**\n * Access the conferences\n *\n * @function conferences\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ConferenceList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.conferences = function conferences() {\n  return this._proxy.conferences;\n};\n/* jshint ignore:start */\n\n/**\n * Access the connectApps\n *\n * @function connectApps\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ConnectAppList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.connectApps = function connectApps() {\n  return this._proxy.connectApps;\n};\n/* jshint ignore:start */\n\n/**\n * Access the incomingPhoneNumbers\n *\n * @function incomingPhoneNumbers\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.incomingPhoneNumbers = function incomingPhoneNumbers() {\n  return this._proxy.incomingPhoneNumbers;\n};\n/* jshint ignore:start */\n\n/**\n * Access the keys\n *\n * @function keys\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.KeyList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.keys = function keys() {\n  return this._proxy.keys;\n};\n/* jshint ignore:start */\n\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n/* jshint ignore:start */\n\n/**\n * Access the newKeys\n *\n * @function newKeys\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.NewKeyList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.newKeys = function newKeys() {\n  return this._proxy.newKeys;\n};\n/* jshint ignore:start */\n\n/**\n * Access the newSigningKeys\n *\n * @function newSigningKeys\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.NewSigningKeyList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.newSigningKeys = function newSigningKeys() {\n  return this._proxy.newSigningKeys;\n};\n/* jshint ignore:start */\n\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.NotificationList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n/* jshint ignore:start */\n\n/**\n * Access the outgoingCallerIds\n *\n * @function outgoingCallerIds\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.OutgoingCallerIdList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.outgoingCallerIds = function outgoingCallerIds() {\n  return this._proxy.outgoingCallerIds;\n};\n/* jshint ignore:start */\n\n/**\n * Access the queues\n *\n * @function queues\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.QueueList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.queues = function queues() {\n  return this._proxy.queues;\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.RecordingList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the signingKeys\n *\n * @function signingKeys\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SigningKeyList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.signingKeys = function signingKeys() {\n  return this._proxy.signingKeys;\n};\n/* jshint ignore:start */\n\n/**\n * Access the sip\n *\n * @function sip\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.sip = function sip() {\n  return this._proxy.sip;\n};\n/* jshint ignore:start */\n\n/**\n * Access the shortCodes\n *\n * @function shortCodes\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ShortCodeList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.shortCodes = function shortCodes() {\n  return this._proxy.shortCodes;\n};\n/* jshint ignore:start */\n\n/**\n * Access the tokens\n *\n * @function tokens\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.TokenList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.tokens = function tokens() {\n  return this._proxy.tokens;\n};\n/* jshint ignore:start */\n\n/**\n * Access the transcriptions\n *\n * @function transcriptions\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.TranscriptionList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.transcriptions = function transcriptions() {\n  return this._proxy.transcriptions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the usage\n *\n * @function usage\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.UsageList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.usage = function usage() {\n  return this._proxy.usage;\n};\n/* jshint ignore:start */\n\n/**\n * Access the validationRequests\n *\n * @function validationRequests\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ValidationRequestList}\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.validationRequests = function validationRequests() {\n  return this._proxy.validationRequests;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAccountInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAccountInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AccountContext\n *\n * @constructor Twilio.Api.V2010.AccountContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AddressList} addresses -\n *          addresses resource\n * @property {Twilio.Api.V2010.AccountContext.ApplicationList} applications -\n *          applications resource\n * @property {Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList} authorizedConnectApps -\n *          authorizedConnectApps resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList} availablePhoneNumbers -\n *          availablePhoneNumbers resource\n * @property {Twilio.Api.V2010.AccountContext.BalanceList} balance -\n *          balance resource\n * @property {Twilio.Api.V2010.AccountContext.CallList} calls - calls resource\n * @property {Twilio.Api.V2010.AccountContext.ConferenceList} conferences -\n *          conferences resource\n * @property {Twilio.Api.V2010.AccountContext.ConnectAppList} connectApps -\n *          connectApps resource\n * @property {Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList} incomingPhoneNumbers -\n *          incomingPhoneNumbers resource\n * @property {Twilio.Api.V2010.AccountContext.KeyList} keys - keys resource\n * @property {Twilio.Api.V2010.AccountContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Api.V2010.AccountContext.NewKeyList} newKeys -\n *          newKeys resource\n * @property {Twilio.Api.V2010.AccountContext.NewSigningKeyList} newSigningKeys -\n *          newSigningKeys resource\n * @property {Twilio.Api.V2010.AccountContext.NotificationList} notifications -\n *          notifications resource\n * @property {Twilio.Api.V2010.AccountContext.OutgoingCallerIdList} outgoingCallerIds -\n *          outgoingCallerIds resource\n * @property {Twilio.Api.V2010.AccountContext.QueueList} queues - queues resource\n * @property {Twilio.Api.V2010.AccountContext.RecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Api.V2010.AccountContext.SigningKeyList} signingKeys -\n *          signingKeys resource\n * @property {Twilio.Api.V2010.AccountContext.SipList} sip - sip resource\n * @property {Twilio.Api.V2010.AccountContext.ShortCodeList} shortCodes -\n *          shortCodes resource\n * @property {Twilio.Api.V2010.AccountContext.TokenList} tokens - tokens resource\n * @property {Twilio.Api.V2010.AccountContext.TranscriptionList} transcriptions -\n *          transcriptions resource\n * @property {Twilio.Api.V2010.AccountContext.UsageList} usage - usage resource\n * @property {Twilio.Api.V2010.AccountContext.ValidationRequestList} validationRequests -\n *          validationRequests resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} sid - Fetch by unique Account Sid\n */\n\n/* jshint ignore:end */\n\n\nAccountContext = function AccountContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Accounts/\".concat(sid, \".json\"); // Dependents\n\n  this._addresses = undefined;\n  this._applications = undefined;\n  this._authorizedConnectApps = undefined;\n  this._availablePhoneNumbers = undefined;\n  this._balance = undefined;\n  this._calls = undefined;\n  this._conferences = undefined;\n  this._connectApps = undefined;\n  this._incomingPhoneNumbers = undefined;\n  this._keys = undefined;\n  this._messages = undefined;\n  this._newKeys = undefined;\n  this._newSigningKeys = undefined;\n  this._notifications = undefined;\n  this._outgoingCallerIds = undefined;\n  this._queues = undefined;\n  this._recordings = undefined;\n  this._signingKeys = undefined;\n  this._sip = undefined;\n  this._shortCodes = undefined;\n  this._tokens = undefined;\n  this._transcriptions = undefined;\n  this._usage = undefined;\n  this._validationRequests = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AccountInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccountInstance\n */\n\n/* jshint ignore:end */\n\n\nAccountContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AccountInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a AccountInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - FriendlyName to update\n * @param {account.status} [opts.status] - Status to update the Account with\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AccountInstance\n */\n\n/* jshint ignore:end */\n\n\nAccountContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AccountInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AccountContext.prototype, 'addresses', {\n  get: function get() {\n    if (!this._addresses) {\n      this._addresses = new AddressList(this._version, this._solution.sid);\n    }\n\n    return this._addresses;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'applications', {\n  get: function get() {\n    if (!this._applications) {\n      this._applications = new ApplicationList(this._version, this._solution.sid);\n    }\n\n    return this._applications;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'authorizedConnectApps', {\n  get: function get() {\n    if (!this._authorizedConnectApps) {\n      this._authorizedConnectApps = new AuthorizedConnectAppList(this._version, this._solution.sid);\n    }\n\n    return this._authorizedConnectApps;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'availablePhoneNumbers', {\n  get: function get() {\n    if (!this._availablePhoneNumbers) {\n      this._availablePhoneNumbers = new AvailablePhoneNumberCountryList(this._version, this._solution.sid);\n    }\n\n    return this._availablePhoneNumbers;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'balance', {\n  get: function get() {\n    if (!this._balance) {\n      this._balance = new BalanceList(this._version, this._solution.sid);\n    }\n\n    return this._balance;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'calls', {\n  get: function get() {\n    if (!this._calls) {\n      this._calls = new CallList(this._version, this._solution.sid);\n    }\n\n    return this._calls;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'conferences', {\n  get: function get() {\n    if (!this._conferences) {\n      this._conferences = new ConferenceList(this._version, this._solution.sid);\n    }\n\n    return this._conferences;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'connectApps', {\n  get: function get() {\n    if (!this._connectApps) {\n      this._connectApps = new ConnectAppList(this._version, this._solution.sid);\n    }\n\n    return this._connectApps;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'incomingPhoneNumbers', {\n  get: function get() {\n    if (!this._incomingPhoneNumbers) {\n      this._incomingPhoneNumbers = new IncomingPhoneNumberList(this._version, this._solution.sid);\n    }\n\n    return this._incomingPhoneNumbers;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'keys', {\n  get: function get() {\n    if (!this._keys) {\n      this._keys = new KeyList(this._version, this._solution.sid);\n    }\n\n    return this._keys;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'messages', {\n  get: function get() {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.sid);\n    }\n\n    return this._messages;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'newKeys', {\n  get: function get() {\n    if (!this._newKeys) {\n      this._newKeys = new NewKeyList(this._version, this._solution.sid);\n    }\n\n    return this._newKeys;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'newSigningKeys', {\n  get: function get() {\n    if (!this._newSigningKeys) {\n      this._newSigningKeys = new NewSigningKeyList(this._version, this._solution.sid);\n    }\n\n    return this._newSigningKeys;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'notifications', {\n  get: function get() {\n    if (!this._notifications) {\n      this._notifications = new NotificationList(this._version, this._solution.sid);\n    }\n\n    return this._notifications;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'outgoingCallerIds', {\n  get: function get() {\n    if (!this._outgoingCallerIds) {\n      this._outgoingCallerIds = new OutgoingCallerIdList(this._version, this._solution.sid);\n    }\n\n    return this._outgoingCallerIds;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'queues', {\n  get: function get() {\n    if (!this._queues) {\n      this._queues = new QueueList(this._version, this._solution.sid);\n    }\n\n    return this._queues;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'recordings', {\n  get: function get() {\n    if (!this._recordings) {\n      this._recordings = new RecordingList(this._version, this._solution.sid);\n    }\n\n    return this._recordings;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'signingKeys', {\n  get: function get() {\n    if (!this._signingKeys) {\n      this._signingKeys = new SigningKeyList(this._version, this._solution.sid);\n    }\n\n    return this._signingKeys;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'sip', {\n  get: function get() {\n    if (!this._sip) {\n      this._sip = new SipList(this._version, this._solution.sid);\n    }\n\n    return this._sip;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'shortCodes', {\n  get: function get() {\n    if (!this._shortCodes) {\n      this._shortCodes = new ShortCodeList(this._version, this._solution.sid);\n    }\n\n    return this._shortCodes;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'tokens', {\n  get: function get() {\n    if (!this._tokens) {\n      this._tokens = new TokenList(this._version, this._solution.sid);\n    }\n\n    return this._tokens;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'transcriptions', {\n  get: function get() {\n    if (!this._transcriptions) {\n      this._transcriptions = new TranscriptionList(this._version, this._solution.sid);\n    }\n\n    return this._transcriptions;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'usage', {\n  get: function get() {\n    if (!this._usage) {\n      this._usage = new UsageList(this._version, this._solution.sid);\n    }\n\n    return this._usage;\n  }\n});\nObject.defineProperty(AccountContext.prototype, 'validationRequests', {\n  get: function get() {\n    if (!this._validationRequests) {\n      this._validationRequests = new ValidationRequestList(this._version, this._solution.sid);\n    }\n\n    return this._validationRequests;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAccountContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAccountContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AccountList: AccountList,\n  AccountPage: AccountPage,\n  AccountInstance: AccountInstance,\n  AccountContext: AccountContext\n};","map":null,"metadata":{},"sourceType":"script"}