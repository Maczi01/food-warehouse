{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FunctionVersionContentList = require('./functionVersion/functionVersionContent').FunctionVersionContentList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FunctionVersionList;\nvar FunctionVersionPage;\nvar FunctionVersionInstance;\nvar FunctionVersionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {string} functionSid -\n *          The SID of the function that is the parent of the function version\n */\n\n/* jshint ignore:end */\n\nFunctionVersionList = function FunctionVersionList(version, serviceSid, functionSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function functionVersions\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext}\n   */\n\n  /* jshint ignore:end */\n  function FunctionVersionListInstance(sid) {\n    return FunctionVersionListInstance.get(sid);\n  }\n\n  FunctionVersionListInstance._version = version; // Path Solution\n\n  FunctionVersionListInstance._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid\n  };\n  FunctionVersionListInstance._uri = \"/Services/\".concat(serviceSid, \"/Functions/\").concat(functionSid, \"/Versions\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams FunctionVersionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FunctionVersionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FunctionVersionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FunctionVersionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FunctionVersionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FunctionVersionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FunctionVersionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a function_version\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {string} sid -\n   *          The SID that identifies the Function Version resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.get = function get(sid) {\n    return new FunctionVersionContext(this._version, this._solution.serviceSid, this._solution.functionSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FunctionVersionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FunctionVersionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FunctionVersionSolution} solution - Path solution\n *\n * @returns FunctionVersionPage\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionPage = function FunctionVersionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FunctionVersionPage.prototype, Page.prototype);\n\nFunctionVersionPage.prototype.constructor = FunctionVersionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FunctionVersionInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage#\n *\n * @param {FunctionVersionPayload} payload - Payload response from the API\n *\n * @returns FunctionVersionInstance\n */\n\n/* jshint ignore:end */\n\nFunctionVersionPage.prototype.getInstance = function getInstance(payload) {\n  return new FunctionVersionInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFunctionVersionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Function Version resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Function Version resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @property {string} functionSid -\n *          The SID of the function that is the parent of the function version\n * @property {string} path -\n *          The URL-friendly string by which the function version can be referenced\n * @property {function_version.visibility} visibility -\n *          The access control that determines how the function version can be accessed\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Function Version resource was created\n * @property {string} url - The absolute URL of the Function Version resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {FunctionVersionPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {sid} functionSid -\n *          The SID of the function that is the parent of the function version\n * @param {sid} sid -\n *          The SID that identifies the Function Version resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionInstance = function FunctionVersionInstance(version, payload, serviceSid, functionSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.functionSid = payload.function_sid; // jshint ignore:line\n\n  this.path = payload.path; // jshint ignore:line\n\n  this.visibility = payload.visibility; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FunctionVersionInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FunctionVersionContext(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FunctionVersionInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionInstance\n */\n\n/* jshint ignore:end */\n\nFunctionVersionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the functionVersionContent\n *\n * @function functionVersionContent\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList}\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionInstance.prototype.functionVersionContent = function functionVersionContent() {\n  return this._proxy.functionVersionContent;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFunctionVersionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList} functionVersionContent -\n *          functionVersionContent resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Function Version resource from\n * @param {sid} functionSid -\n *          The SID of the function that is the parent of the Function Version resource to fetch\n * @param {sid} sid -\n *          The SID that identifies the Function Version resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContext = function FunctionVersionContext(version, serviceSid, functionSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Functions/\").concat(functionSid, \"/Versions/\").concat(sid); // Dependents\n\n  this._functionVersionContent = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FunctionVersionInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionInstance\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FunctionVersionInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FunctionVersionContext.prototype, 'functionVersionContent', {\n  get: function get() {\n    if (!this._functionVersionContent) {\n      this._functionVersionContent = new FunctionVersionContentList(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n    }\n\n    return this._functionVersionContent;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFunctionVersionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFunctionVersionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FunctionVersionList: FunctionVersionList,\n  FunctionVersionPage: FunctionVersionPage,\n  FunctionVersionInstance: FunctionVersionInstance,\n  FunctionVersionContext: FunctionVersionContext\n};","map":null,"metadata":{},"sourceType":"script"}