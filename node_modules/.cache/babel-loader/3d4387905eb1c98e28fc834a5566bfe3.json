{"ast":null,"code":"'use strict';\n\nvar paramCounts = {\n  a: 7,\n  c: 6,\n  h: 1,\n  l: 2,\n  m: 2,\n  r: 4,\n  q: 4,\n  s: 4,\n  t: 2,\n  v: 1,\n  z: 0\n};\nvar SPECIAL_SPACES = [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];\n\nfunction isSpace(ch) {\n  return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029 || // Line terminators\n  // White spaces\n  ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && SPECIAL_SPACES.indexOf(ch) >= 0;\n}\n\nfunction isCommand(code) {\n  /*eslint-disable no-bitwise*/\n  switch (code | 0x20) {\n    case 0x6D\n    /* m */\n    :\n    case 0x7A\n    /* z */\n    :\n    case 0x6C\n    /* l */\n    :\n    case 0x68\n    /* h */\n    :\n    case 0x76\n    /* v */\n    :\n    case 0x63\n    /* c */\n    :\n    case 0x73\n    /* s */\n    :\n    case 0x71\n    /* q */\n    :\n    case 0x74\n    /* t */\n    :\n    case 0x61\n    /* a */\n    :\n    case 0x72\n    /* r */\n    :\n      return true;\n  }\n\n  return false;\n}\n\nfunction isArc(code) {\n  return (code | 0x20) === 0x61;\n}\n\nfunction isDigit(code) {\n  return code >= 48 && code <= 57; // 0..9\n}\n\nfunction isDigitStart(code) {\n  return code >= 48 && code <= 57 ||\n  /* 0..9 */\n  code === 0x2B ||\n  /* + */\n  code === 0x2D ||\n  /* - */\n  code === 0x2E;\n  /* . */\n}\n\nfunction State(path) {\n  this.index = 0;\n  this.path = path;\n  this.max = path.length;\n  this.result = [];\n  this.param = 0.0;\n  this.err = '';\n  this.segmentStart = 0;\n  this.data = [];\n}\n\nfunction skipSpaces(state) {\n  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {\n    state.index++;\n  }\n}\n\nfunction scanFlag(state) {\n  var ch = state.path.charCodeAt(state.index);\n\n  if (ch === 0x30\n  /* 0 */\n  ) {\n      state.param = 0;\n      state.index++;\n      return;\n    }\n\n  if (ch === 0x31\n  /* 1 */\n  ) {\n      state.param = 1;\n      state.index++;\n      return;\n    }\n\n  state.err = 'SvgPath: arc flag can be 0 or 1 only (at pos ' + state.index + ')';\n}\n\nfunction scanParam(state) {\n  var start = state.index,\n      index = start,\n      max = state.max,\n      zeroFirst = false,\n      hasCeiling = false,\n      hasDecimal = false,\n      hasDot = false,\n      ch;\n\n  if (index >= max) {\n    state.err = 'SvgPath: missed param (at pos ' + index + ')';\n    return;\n  }\n\n  ch = state.path.charCodeAt(index);\n\n  if (ch === 0x2B\n  /* + */\n  || ch === 0x2D\n  /* - */\n  ) {\n      index++;\n      ch = index < max ? state.path.charCodeAt(index) : 0;\n    } // This logic is shamelessly borrowed from Esprima\n  // https://github.com/ariya/esprimas\n  //\n\n\n  if (!isDigit(ch) && ch !== 0x2E\n  /* . */\n  ) {\n      state.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';\n      return;\n    }\n\n  if (ch !== 0x2E\n  /* . */\n  ) {\n      zeroFirst = ch === 0x30\n      /* 0 */\n      ;\n      index++;\n      ch = index < max ? state.path.charCodeAt(index) : 0;\n\n      if (zeroFirst && index < max) {\n        // decimal number starts with '0' such as '09' is illegal.\n        if (ch && isDigit(ch)) {\n          state.err = 'SvgPath: numbers started with `0` such as `09` are illegal (at pos ' + start + ')';\n          return;\n        }\n      }\n\n      while (index < max && isDigit(state.path.charCodeAt(index))) {\n        index++;\n        hasCeiling = true;\n      }\n\n      ch = index < max ? state.path.charCodeAt(index) : 0;\n    }\n\n  if (ch === 0x2E\n  /* . */\n  ) {\n      hasDot = true;\n      index++;\n\n      while (isDigit(state.path.charCodeAt(index))) {\n        index++;\n        hasDecimal = true;\n      }\n\n      ch = index < max ? state.path.charCodeAt(index) : 0;\n    }\n\n  if (ch === 0x65\n  /* e */\n  || ch === 0x45\n  /* E */\n  ) {\n      if (hasDot && !hasCeiling && !hasDecimal) {\n        state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n        return;\n      }\n\n      index++;\n      ch = index < max ? state.path.charCodeAt(index) : 0;\n\n      if (ch === 0x2B\n      /* + */\n      || ch === 0x2D\n      /* - */\n      ) {\n          index++;\n        }\n\n      if (index < max && isDigit(state.path.charCodeAt(index))) {\n        while (index < max && isDigit(state.path.charCodeAt(index))) {\n          index++;\n        }\n      } else {\n        state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n        return;\n      }\n    }\n\n  state.index = index;\n  state.param = parseFloat(state.path.slice(start, index)) + 0.0;\n}\n\nfunction finalizeSegment(state) {\n  var cmd, cmdLC; // Process duplicated commands (without comand name)\n  // This logic is shamelessly borrowed from Raphael\n  // https://github.com/DmitryBaranovskiy/raphael/\n  //\n\n  cmd = state.path[state.segmentStart];\n  cmdLC = cmd.toLowerCase();\n  var params = state.data;\n\n  if (cmdLC === 'm' && params.length > 2) {\n    state.result.push([cmd, params[0], params[1]]);\n    params = params.slice(2);\n    cmdLC = 'l';\n    cmd = cmd === 'm' ? 'l' : 'L';\n  }\n\n  if (cmdLC === 'r') {\n    state.result.push([cmd].concat(params));\n  } else {\n    while (params.length >= paramCounts[cmdLC]) {\n      state.result.push([cmd].concat(params.splice(0, paramCounts[cmdLC])));\n\n      if (!paramCounts[cmdLC]) {\n        break;\n      }\n    }\n  }\n}\n\nfunction scanSegment(state) {\n  var max = state.max,\n      cmdCode,\n      is_arc,\n      comma_found,\n      need_params,\n      i;\n  state.segmentStart = state.index;\n  cmdCode = state.path.charCodeAt(state.index);\n  is_arc = isArc(cmdCode);\n\n  if (!isCommand(cmdCode)) {\n    state.err = 'SvgPath: bad command ' + state.path[state.index] + ' (at pos ' + state.index + ')';\n    return;\n  }\n\n  need_params = paramCounts[state.path[state.index].toLowerCase()];\n  state.index++;\n  skipSpaces(state);\n  state.data = [];\n\n  if (!need_params) {\n    // Z\n    finalizeSegment(state);\n    return;\n  }\n\n  comma_found = false;\n\n  for (;;) {\n    for (i = need_params; i > 0; i--) {\n      if (is_arc && (i === 3 || i === 4)) scanFlag(state);else scanParam(state);\n\n      if (state.err.length) {\n        return;\n      }\n\n      state.data.push(state.param);\n      skipSpaces(state);\n      comma_found = false;\n\n      if (state.index < max && state.path.charCodeAt(state.index) === 0x2C\n      /* , */\n      ) {\n          state.index++;\n          skipSpaces(state);\n          comma_found = true;\n        }\n    } // after ',' param is mandatory\n\n\n    if (comma_found) {\n      continue;\n    }\n\n    if (state.index >= state.max) {\n      break;\n    } // Stop on next segment\n\n\n    if (!isDigitStart(state.path.charCodeAt(state.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(state);\n}\n/* Returns array of segments:\n *\n * [\n *   [ command, coord1, coord2, ... ]\n * ]\n */\n\n\nmodule.exports = function pathParse(svgPath) {\n  var state = new State(svgPath);\n  var max = state.max;\n  skipSpaces(state);\n\n  while (state.index < max && !state.err.length) {\n    scanSegment(state);\n  }\n\n  if (state.err.length) {\n    state.result = [];\n  } else if (state.result.length) {\n    if ('mM'.indexOf(state.result[0][0]) < 0) {\n      state.err = 'SvgPath: string should start with `M` or `m`';\n      state.result = [];\n    } else {\n      state.result[0][0] = 'M';\n    }\n  }\n\n  return {\n    err: state.err,\n    segments: state.result\n  };\n};","map":null,"metadata":{},"sourceType":"script"}