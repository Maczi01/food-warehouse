{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var XMLStringWriter, XMLWriterBase;\n  XMLWriterBase = require('./XMLWriterBase'); // Prints XML nodes as plain text\n\n  module.exports = XMLStringWriter = /*#__PURE__*/function (_XMLWriterBase) {\n    \"use strict\";\n\n    _inherits(XMLStringWriter, _XMLWriterBase);\n\n    // Initializes a new instance of `XMLStringWriter`\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    function XMLStringWriter(options) {\n      _classCallCheck(this, XMLStringWriter);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(XMLStringWriter).call(this, options));\n    }\n\n    _createClass(XMLStringWriter, [{\n      key: \"document\",\n      value: function document(doc, options) {\n        var child, i, len, r, ref;\n        options = this.filterOptions(options);\n        r = '';\n        ref = doc.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, 0);\n        } // remove trailing newline\n\n\n        if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n          r = r.slice(0, -options.newline.length);\n        }\n\n        return r;\n      }\n    }]);\n\n    return XMLStringWriter;\n  }(XMLWriterBase);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}