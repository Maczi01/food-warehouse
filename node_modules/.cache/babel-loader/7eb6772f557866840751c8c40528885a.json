{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkflowStatisticsList;\nvar WorkflowStatisticsPage;\nvar WorkflowStatisticsInstance;\nvar WorkflowStatisticsContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowStatisticsList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n * @param {string} workflowSid -\n *          Returns the list of Tasks that are being controlled by the Workflow with the specified SID value\n */\n\n/* jshint ignore:end */\n\nWorkflowStatisticsList = function WorkflowStatisticsList(version, workspaceSid, workflowSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function statistics\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkflowStatisticsListInstance(sid) {\n    return WorkflowStatisticsListInstance.get(sid);\n  }\n\n  WorkflowStatisticsListInstance._version = version; // Path Solution\n\n  WorkflowStatisticsListInstance._solution = {\n    workspaceSid: workspaceSid,\n    workflowSid: workflowSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a workflow_statistics\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList#\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsContext}\n   */\n\n  /* jshint ignore:end */\n\n  WorkflowStatisticsListInstance.get = function get() {\n    return new WorkflowStatisticsContext(this._version, this._solution.workspaceSid, this._solution.workflowSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowStatisticsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkflowStatisticsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkflowStatisticsListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowStatisticsPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkflowStatisticsSolution} solution - Path solution\n *\n * @returns WorkflowStatisticsPage\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsPage = function WorkflowStatisticsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkflowStatisticsPage.prototype, Page.prototype);\n\nWorkflowStatisticsPage.prototype.constructor = WorkflowStatisticsPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkflowStatisticsInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsPage#\n *\n * @param {WorkflowStatisticsPayload} payload - Payload response from the API\n *\n * @returns WorkflowStatisticsInstance\n */\n\n/* jshint ignore:end */\n\nWorkflowStatisticsPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkflowStatisticsInstance(this._version, payload, this._solution.workspaceSid, this._solution.workflowSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkflowStatisticsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowStatisticsContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {object} cumulative -\n *          An object that contains the cumulative statistics for the Workflow\n * @property {object} realtime -\n *          An object that contains the real-time statistics for the Workflow\n * @property {string} workflowSid -\n *          Returns the list of Tasks that are being controlled by the Workflow with the specified SID value\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n * @property {string} url - The absolute URL of the Workflow statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {WorkflowStatisticsPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Workflow\n * @param {sid} workflowSid -\n *          Returns the list of Tasks that are being controlled by the Workflow with the specified SID value\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsInstance = function WorkflowStatisticsInstance(version, payload, workspaceSid, workflowSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.cumulative = payload.cumulative; // jshint ignore:line\n\n  this.realtime = payload.realtime; // jshint ignore:line\n\n  this.workflowSid = payload.workflow_sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workflowSid: workflowSid\n  };\n};\n\nObject.defineProperty(WorkflowStatisticsInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WorkflowStatisticsContext(this._version, this._solution.workspaceSid, this._solution.workflowSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkflowStatisticsInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.minutes] -\n *          Only calculate statistics since this many minutes in the past\n * @param {Date} [opts.startDate] -\n *          Only calculate statistics from on or after this date\n * @param {Date} [opts.endDate] -\n *          Only calculate statistics from this date and time and earlier\n * @param {string} [opts.taskChannel] -\n *          Only calculate real-time statistics on this TaskChannel.\n * @param {string} [opts.splitByWaitTime] -\n *          A comma separated list of values that describes the thresholds to calculate statistics on\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowStatisticsInstance\n */\n\n/* jshint ignore:end */\n\nWorkflowStatisticsInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkflowStatisticsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowStatisticsContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Workflow to fetch\n * @param {sid} workflowSid -\n *          Returns the list of Tasks that are being controlled by the Workflow with the specified SID value\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsContext = function WorkflowStatisticsContext(version, workspaceSid, workflowSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workflowSid: workflowSid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workflows/\").concat(workflowSid, \"/Statistics\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkflowStatisticsInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.minutes] -\n *          Only calculate statistics since this many minutes in the past\n * @param {Date} [opts.startDate] -\n *          Only calculate statistics from on or after this date\n * @param {Date} [opts.endDate] -\n *          Only calculate statistics from this date and time and earlier\n * @param {string} [opts.taskChannel] -\n *          Only calculate real-time statistics on this TaskChannel.\n * @param {string} [opts.splitByWaitTime] -\n *          A comma separated list of values that describes the thresholds to calculate statistics on\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowStatisticsInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Minutes': _.get(opts, 'minutes'),\n    'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n    'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n    'TaskChannel': _.get(opts, 'taskChannel'),\n    'SplitByWaitTime': _.get(opts, 'splitByWaitTime')\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    params: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkflowStatisticsInstance(this._version, payload, this._solution.workspaceSid, this._solution.workflowSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowStatisticsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkflowStatisticsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkflowStatisticsList: WorkflowStatisticsList,\n  WorkflowStatisticsPage: WorkflowStatisticsPage,\n  WorkflowStatisticsInstance: WorkflowStatisticsInstance,\n  WorkflowStatisticsContext: WorkflowStatisticsContext\n};","map":null,"metadata":{},"sourceType":"script"}