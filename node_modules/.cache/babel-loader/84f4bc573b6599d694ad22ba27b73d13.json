{"ast":null,"code":"// Generated by CoffeeScript 1.7.1\n(function () {\n  var ArrayT,\n      LazyArray,\n      LazyArrayT,\n      NumberT,\n      inspect,\n      utils,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  ArrayT = require('./Array');\n  NumberT = require('./Number').Number;\n  utils = require('./utils');\n  inspect = require('util').inspect;\n\n  LazyArrayT = function (_super) {\n    __extends(LazyArrayT, _super);\n\n    function LazyArrayT() {\n      return LazyArrayT.__super__.constructor.apply(this, arguments);\n    }\n\n    LazyArrayT.prototype.decode = function (stream, parent) {\n      var length, pos, res;\n      pos = stream.pos;\n      length = utils.resolveLength(this.length, stream, parent);\n\n      if (this.length instanceof NumberT) {\n        parent = {\n          parent: parent,\n          _startOffset: pos,\n          _currentOffset: 0,\n          _length: length\n        };\n      }\n\n      res = new LazyArray(this.type, length, stream, parent);\n      stream.pos += length * this.type.size(null, parent);\n      return res;\n    };\n\n    LazyArrayT.prototype.size = function (val, ctx) {\n      if (val instanceof LazyArray) {\n        val = val.toArray();\n      }\n\n      return LazyArrayT.__super__.size.call(this, val, ctx);\n    };\n\n    LazyArrayT.prototype.encode = function (stream, val, ctx) {\n      if (val instanceof LazyArray) {\n        val = val.toArray();\n      }\n\n      return LazyArrayT.__super__.encode.call(this, stream, val, ctx);\n    };\n\n    return LazyArrayT;\n  }(ArrayT);\n\n  LazyArray = function () {\n    function LazyArray(type, length, stream, ctx) {\n      this.type = type;\n      this.length = length;\n      this.stream = stream;\n      this.ctx = ctx;\n      this.base = this.stream.pos;\n      this.items = [];\n    }\n\n    LazyArray.prototype.get = function (index) {\n      var pos;\n\n      if (index < 0 || index >= this.length) {\n        return void 0;\n      }\n\n      if (this.items[index] == null) {\n        pos = this.stream.pos;\n        this.stream.pos = this.base + this.type.size(null, this.ctx) * index;\n        this.items[index] = this.type.decode(this.stream, this.ctx);\n        this.stream.pos = pos;\n      }\n\n      return this.items[index];\n    };\n\n    LazyArray.prototype.toArray = function () {\n      var i, _i, _ref, _results;\n\n      _results = [];\n\n      for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {\n        _results.push(this.get(i));\n      }\n\n      return _results;\n    };\n\n    LazyArray.prototype.inspect = function () {\n      return inspect(this.toArray());\n    };\n\n    return LazyArray;\n  }();\n\n  module.exports = LazyArrayT;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}