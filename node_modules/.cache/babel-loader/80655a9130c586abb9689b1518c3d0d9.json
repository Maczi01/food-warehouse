{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar WorkflowCumulativeStatisticsList = require('./workflow/workflowCumulativeStatistics').WorkflowCumulativeStatisticsList;\n\nvar WorkflowRealTimeStatisticsList = require('./workflow/workflowRealTimeStatistics').WorkflowRealTimeStatisticsList;\n\nvar WorkflowStatisticsList = require('./workflow/workflowStatistics').WorkflowStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkflowList;\nvar WorkflowPage;\nvar WorkflowInstance;\nvar WorkflowContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n */\n\n/* jshint ignore:end */\n\nWorkflowList = function WorkflowList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function workflows\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkflowListInstance(sid) {\n    return WorkflowListInstance.get(sid);\n  }\n\n  WorkflowListInstance._version = version; // Path Solution\n\n  WorkflowListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  WorkflowListInstance._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workflows\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams WorkflowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  WorkflowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists WorkflowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of WorkflowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkflowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of WorkflowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkflowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a WorkflowInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *         descriptive string that you create to describe the Workflow resource\n   * @param {string} opts.configuration -\n   *          A JSON string that contains the rules to apply to the Workflow\n   * @param {string} [opts.assignmentCallbackUrl] -\n   *          The URL from your application that will process task assignment events\n   * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n   *          The URL that we should call when a call to the `assignment_callback_url` fails\n   * @param {number} [opts.taskReservationTimeout] -\n   *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkflowInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    if (_.isUndefined(opts.configuration)) {\n      throw new Error('Required parameter \"opts.configuration\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Configuration': _.get(opts, 'configuration'),\n      'AssignmentCallbackUrl': _.get(opts, 'assignmentCallbackUrl'),\n      'FallbackAssignmentCallbackUrl': _.get(opts, 'fallbackAssignmentCallbackUrl'),\n      'TaskReservationTimeout': _.get(opts, 'taskReservationTimeout')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkflowInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a workflow\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {string} sid - The SID of the resource\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.get = function get(sid) {\n    return new WorkflowContext(this._version, this._solution.workspaceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkflowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkflowListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkflowSolution} solution - Path solution\n *\n * @returns WorkflowPage\n */\n\n/* jshint ignore:end */\n\n\nWorkflowPage = function WorkflowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkflowPage.prototype, Page.prototype);\n\nWorkflowPage.prototype.constructor = WorkflowPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkflowInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage#\n *\n * @param {WorkflowPayload} payload - Payload response from the API\n *\n * @returns WorkflowInstance\n */\n\n/* jshint ignore:end */\n\nWorkflowPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkflowInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkflowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentCallbackUrl -\n *          The URL that we call when a task managed by the Workflow is assigned to a Worker\n * @property {string} configuration -\n *          A JSON string that contains the Workflow's configuration\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} documentContentType - The MIME type of the document\n * @property {string} fallbackAssignmentCallbackUrl -\n *          The URL that we call when a call to the `assignment_callback_url` fails\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Workflow resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {number} taskReservationTimeout -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n * @property {string} url - The absolute URL of the Workflow resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkflowPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Workflow\n * @param {sid} sid - The SID of the resource\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance = function WorkflowInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.assignmentCallbackUrl = payload.assignment_callback_url; // jshint ignore:line\n\n  this.configuration = payload.configuration; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.documentContentType = payload.document_content_type; // jshint ignore:line\n\n  this.fallbackAssignmentCallbackUrl = payload.fallback_assignment_callback_url; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taskReservationTimeout = deserialize.integer(payload.task_reservation_timeout); // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(WorkflowInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WorkflowContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkflowInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\nWorkflowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkflowInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *         descriptive string that you create to describe the Workflow resource\n * @param {string} [opts.assignmentCallbackUrl] -\n *          The URL from your application that will process task assignment events\n * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n *          The URL that we should call when a call to the `assignment_callback_url` fails\n * @param {string} [opts.configuration] -\n *          A JSON string that contains the rules to apply to the Workflow\n * @param {number} [opts.taskReservationTimeout] -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @param {string} [opts.reEvaluateTasks] - Whether or not to re-evaluate Tasks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkflowInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkflowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Workflow to fetch\n * @param {sid} sid - The SID of the resource\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext = function WorkflowContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workflows/\").concat(sid); // Dependents\n\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkflowInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkflowInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkflowInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *         descriptive string that you create to describe the Workflow resource\n * @param {string} [opts.assignmentCallbackUrl] -\n *          The URL from your application that will process task assignment events\n * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n *          The URL that we should call when a call to the `assignment_callback_url` fails\n * @param {string} [opts.configuration] -\n *          A JSON string that contains the rules to apply to the Workflow\n * @param {number} [opts.taskReservationTimeout] -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @param {string} [opts.reEvaluateTasks] - Whether or not to re-evaluate Tasks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AssignmentCallbackUrl': _.get(opts, 'assignmentCallbackUrl'),\n    'FallbackAssignmentCallbackUrl': _.get(opts, 'fallbackAssignmentCallbackUrl'),\n    'Configuration': _.get(opts, 'configuration'),\n    'TaskReservationTimeout': _.get(opts, 'taskReservationTimeout'),\n    'ReEvaluateTasks': _.get(opts, 'reEvaluateTasks')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkflowInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkflowInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkflowContext.prototype, 'statistics', {\n  get: function get() {\n    if (!this._statistics) {\n      this._statistics = new WorkflowStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(WorkflowContext.prototype, 'realTimeStatistics', {\n  get: function get() {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkflowRealTimeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(WorkflowContext.prototype, 'cumulativeStatistics', {\n  get: function get() {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkflowCumulativeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nWorkflowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkflowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkflowList: WorkflowList,\n  WorkflowPage: WorkflowPage,\n  WorkflowInstance: WorkflowInstance,\n  WorkflowContext: WorkflowContext\n};","map":null,"metadata":{},"sourceType":"script"}