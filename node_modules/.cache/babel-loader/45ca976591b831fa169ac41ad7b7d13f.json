{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar LocalList;\nvar LocalPage;\nvar LocalInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the LocalList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n\n/* jshint ignore:end */\n\nLocalList = function LocalList(version, accountSid, countryCode) {\n  /* jshint ignore:start */\n\n  /**\n   * @function local\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalContext}\n   */\n\n  /* jshint ignore:end */\n  function LocalListInstance(sid) {\n    return LocalListInstance.get(sid);\n  }\n\n  LocalListInstance._version = version; // Path Solution\n\n  LocalListInstance._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  LocalListInstance._uri = \"/Accounts/\".concat(accountSid, \"/AvailablePhoneNumbers/\").concat(countryCode, \"/Local.json\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams LocalInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  LocalListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists LocalInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  LocalListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of LocalInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  LocalListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new LocalPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of LocalInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  LocalListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new LocalPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  LocalListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  LocalListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return LocalListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the LocalPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {LocalSolution} solution - Path solution\n *\n * @returns LocalPage\n */\n\n/* jshint ignore:end */\n\n\nLocalPage = function LocalPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(LocalPage.prototype, Page.prototype);\n\nLocalPage.prototype.constructor = LocalPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of LocalInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalPage#\n *\n * @param {LocalPayload} payload - Payload response from the API\n *\n * @returns LocalInstance\n */\n\n/* jshint ignore:end */\n\nLocalPage.prototype.getInstance = function getInstance(payload) {\n  return new LocalInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nLocalPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nLocalPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the LocalContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {LocalPayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n\n/* jshint ignore:end */\n\n\nLocalInstance = function LocalInstance(version, payload, accountSid, countryCode) {\n  this._version = version; // Marshaled Properties\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n\n  this.lata = payload.lata; // jshint ignore:line\n\n  this.locality = payload.locality; // jshint ignore:line\n\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n\n  this.region = payload.region; // jshint ignore:line\n\n  this.postalCode = payload.postal_code; // jshint ignore:line\n\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n\n  this.beta = payload.beta; // jshint ignore:line\n\n  this.capabilities = payload.capabilities; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nLocalInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nLocalInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  LocalList: LocalList,\n  LocalPage: LocalPage,\n  LocalInstance: LocalInstance\n};","map":null,"metadata":{},"sourceType":"script"}