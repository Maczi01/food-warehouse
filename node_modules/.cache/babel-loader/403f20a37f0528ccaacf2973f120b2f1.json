{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { __values, __spread, __awaiter, __generator, __assign } from 'tslib';\nimport { ErrorFactory } from '@firebase/util';\nimport { deleteDb, openDb } from 'idb';\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_MAP = (_a = {}, _a[\"missing-app-config-values\"\n/* MISSING_APP_CONFIG_VALUES */\n] = 'Missing App configuration value: \"{$valueName}\"', _a[\"only-available-in-window\"\n/* AVAILABLE_IN_WINDOW */\n] = 'This method is available in a Window context.', _a[\"only-available-in-sw\"\n/* AVAILABLE_IN_SW */\n] = 'This method is available in a service worker context.', _a[\"permission-default\"\n/* PERMISSION_DEFAULT */\n] = 'The notification permission was not granted and dismissed instead.', _a[\"permission-blocked\"\n/* PERMISSION_BLOCKED */\n] = 'The notification permission was not granted and blocked instead.', _a[\"unsupported-browser\"\n/* UNSUPPORTED_BROWSER */\n] = \"This browser doesn't support the API's required to use the firebase SDK.\", _a[\"failed-service-worker-registration\"\n/* FAILED_DEFAULT_REGISTRATION */\n] = 'We are unable to register the default service worker. {$browserErrorMessage}', _a[\"token-subscribe-failed\"\n/* TOKEN_SUBSCRIBE_FAILED */\n] = 'A problem occured while subscribing the user to FCM: {$errorInfo}', _a[\"token-subscribe-no-token\"\n/* TOKEN_SUBSCRIBE_NO_TOKEN */\n] = 'FCM returned no token when subscribing the user to push.', _a[\"token-unsubscribe-failed\"\n/* TOKEN_UNSUBSCRIBE_FAILED */\n] = 'A problem occured while unsubscribing the ' + 'user from FCM: {$errorInfo}', _a[\"token-update-failed\"\n/* TOKEN_UPDATE_FAILED */\n] = 'A problem occured while updating the user from FCM: {$errorInfo}', _a[\"token-update-no-token\"\n/* TOKEN_UPDATE_NO_TOKEN */\n] = 'FCM returned no token when updating the user to push.', _a[\"use-sw-after-get-token\"\n/* USE_SW_AFTER_GET_TOKEN */\n] = 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.', _a[\"invalid-sw-registration\"\n/* INVALID_SW_REGISTRATION */\n] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.', _a[\"invalid-bg-handler\"\n/* INVALID_BG_HANDLER */\n] = 'The input to setBackgroundMessageHandler() must be a function.', _a[\"invalid-vapid-key\"\n/* INVALID_VAPID_KEY */\n] = 'The public VAPID key must be a string.', _a[\"use-vapid-key-after-get-token\"\n/* USE_VAPID_KEY_AFTER_GET_TOKEN */\n] = 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.', _a);\nvar ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction extractAppConfig(app) {\n  var e_1, _a;\n\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  var configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  var options = app.options;\n\n  try {\n    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n      var keyName = configKeys_1_1.value;\n\n      if (!options[keyName]) {\n        throw getMissingValueError(keyName);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName: valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction arrayToBase64(array) {\n  var uint8Array = new Uint8Array(array);\n  var base64String = btoa(String.fromCharCode.apply(String, __spread(uint8Array)));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64ToArray(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher,\r\n * so that the upgrade callback is called for all versions of the old DB.\r\n */\n\nvar OLD_DB_VERSION = 5;\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction migrateOldDatabase(senderId) {\n  return __awaiter(this, void 0, void 0, function () {\n    var databases, dbNames, tokenDetails, db;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!('databases' in indexedDB)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , indexedDB.databases()];\n\n        case 1:\n          databases = _a.sent();\n          dbNames = databases.map(function (db) {\n            return db.name;\n          });\n\n          if (!dbNames.includes(OLD_DB_NAME)) {\n            // old DB didn't exist, no need to open.\n            return [2\n            /*return*/\n            , null];\n          }\n\n          _a.label = 2;\n\n        case 2:\n          tokenDetails = null;\n          return [4\n          /*yield*/\n          , openDb(OLD_DB_NAME, OLD_DB_VERSION, function (db) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var objectStore, value, oldDetails, oldDetails, oldDetails;\n\n              var _a;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (db.oldVersion < 2) {\n                      // Database too old, skip migration.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n                      // Database did not exist. Nothing to do.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n                    return [4\n                    /*yield*/\n                    , objectStore.index('fcmSenderId').get(senderId)];\n\n                  case 1:\n                    value = _b.sent();\n                    return [4\n                    /*yield*/\n                    , objectStore.clear()];\n\n                  case 2:\n                    _b.sent();\n\n                    if (!value) {\n                      // No entry in the database, nothing to migrate.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    if (db.oldVersion === 2) {\n                      oldDetails = value;\n\n                      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n                        subscriptionOptions: {\n                          auth: oldDetails.auth,\n                          p256dh: oldDetails.p256dh,\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 3) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 4) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 3:\n          db = _a.sent();\n          db.close(); // Delete all old databases.\n\n          return [4\n          /*yield*/\n          , deleteDb(OLD_DB_NAME)];\n\n        case 4:\n          // Delete all old databases.\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , deleteDb('fcm_vapid_details_db')];\n\n        case 5:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , deleteDb('undefined')];\n\n        case 6:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , checkTokenDetails(tokenDetails) ? tokenDetails : null];\n      }\n    });\n  });\n}\n\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n\n  var subscriptionOptions = tokenDetails.subscriptionOptions;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\n\n\nvar DATABASE_NAME = 'firebase-messaging-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-messaging-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\n\n\nfunction dbGet(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tokenDetails, oldTokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          return [4\n          /*yield*/\n          , db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key)];\n\n        case 2:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3\n          /*break*/\n          , 3];\n          return [2\n          /*return*/\n          , tokenDetails];\n\n        case 3:\n          return [4\n          /*yield*/\n          , migrateOldDatabase(firebaseDependencies.appConfig.senderId)];\n\n        case 4:\n          oldTokenDetails = _a.sent();\n          if (!oldTokenDetails) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, oldTokenDetails)];\n\n        case 5:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , oldTokenDetails];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction dbSet(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , tokenDetails];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction dbRemove(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getKey(_a) {\n  var appConfig = _a.appConfig;\n  return appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nvar DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\nvar DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nvar ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n/** Key of FCM Payload in Notification's data field. */\n\nvar FCM_MSG = 'FCM_MSG';\nvar CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nvar CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nvar CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\n\nvar CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction requestGetToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, subscribeOptions, responseData, response, err_1, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          body = getBody(subscriptionOptions);\n          subscribeOptions = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_1 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n          /* TOKEN_SUBSCRIBE_FAILED */\n          , {\n            errorInfo: err_1\n          });\n\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n            /* TOKEN_SUBSCRIBE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-subscribe-no-token\"\n            /* TOKEN_SUBSCRIBE_NO_TOKEN */\n            );\n          }\n\n          return [2\n          /*return*/\n          , responseData.token];\n      }\n    });\n  });\n}\n\nfunction requestUpdateToken(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, updateOptions, responseData, response, err_2, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          body = getBody(tokenDetails.subscriptionOptions);\n          updateOptions = {\n            method: 'PATCH',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + tokenDetails.token, updateOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_2 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-update-failed\"\n          /* TOKEN_UPDATE_FAILED */\n          , {\n            errorInfo: err_2\n          });\n\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-update-failed\"\n            /* TOKEN_UPDATE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-update-no-token\"\n            /* TOKEN_UPDATE_NO_TOKEN */\n            );\n          }\n\n          return [2\n          /*return*/\n          , responseData.token];\n      }\n    });\n  });\n}\n\nfunction requestDeleteToken(firebaseDependencies, token) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, unsubscribeOptions, response, responseData, message, err_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          unsubscribeOptions = {\n            method: 'DELETE',\n            headers: headers\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + token, unsubscribeOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n            /* TOKEN_UNSUBSCRIBE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_3 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n          /* TOKEN_UNSUBSCRIBE_FAILED */\n          , {\n            errorInfo: err_3\n          });\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getEndpoint(_a) {\n  var projectId = _a.projectId;\n  return ENDPOINT + \"/projects/\" + projectId + \"/registrations\";\n}\n\nfunction getHeaders(_a) {\n  var appConfig = _a.appConfig,\n      installations = _a.installations;\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , installations.getToken()];\n\n        case 1:\n          authToken = _b.sent();\n          return [2\n          /*return*/\n          , new Headers({\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'x-goog-api-key': appConfig.apiKey,\n            'x-goog-firebase-installations-auth': \"FIS \" + authToken\n          })];\n      }\n    });\n  });\n}\n\nfunction getBody(_a) {\n  var p256dh = _a.p256dh,\n      auth = _a.auth,\n      endpoint = _a.endpoint,\n      vapidKey = _a.vapidKey;\n  var body = {\n    web: {\n      endpoint: endpoint,\n      auth: auth,\n      p256dh: p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** UpdateRegistration will be called once every week. */\n\n\nvar TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nfunction getToken(firebaseDependencies, swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pushSubscription, tokenDetails, subscriptionOptions, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (Notification.permission !== 'granted') {\n            throw ERROR_FACTORY.create(\"permission-blocked\"\n            /* PERMISSION_BLOCKED */\n            );\n          }\n\n          return [4\n          /*yield*/\n          , getPushSubscription(swRegistration, vapidKey)];\n\n        case 1:\n          pushSubscription = _a.sent();\n          return [4\n          /*yield*/\n          , dbGet(firebaseDependencies)];\n\n        case 2:\n          tokenDetails = _a.sent();\n          subscriptionOptions = {\n            vapidKey: vapidKey,\n            swScope: swRegistration.scope,\n            endpoint: pushSubscription.endpoint,\n            auth: arrayToBase64(pushSubscription.getKey('auth')),\n            p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n          };\n          if (!!tokenDetails) return [3\n          /*break*/\n          , 3]; // No token, get a new one.\n\n          return [2\n          /*return*/\n          , getNewToken(firebaseDependencies, subscriptionOptions)];\n\n        case 3:\n          if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [3\n          /*break*/\n          , 8];\n          _a.label = 4;\n\n        case 4:\n          _a.trys.push([4, 6,, 7]);\n\n          return [4\n          /*yield*/\n          , requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n\n        case 5:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          e_1 = _a.sent(); // Suppress errors because of #2364\n\n          console.warn(e_1);\n          return [3\n          /*break*/\n          , 7];\n\n        case 7:\n          return [2\n          /*return*/\n          , getNewToken(firebaseDependencies, subscriptionOptions)];\n\n        case 8:\n          if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n            // Weekly token refresh\n            return [2\n            /*return*/\n            , updateToken({\n              token: tokenDetails.token,\n              createTime: Date.now(),\n              subscriptionOptions: subscriptionOptions\n            }, firebaseDependencies, swRegistration)];\n          } else {\n            // Valid token, nothing to do.\n            return [2\n            /*return*/\n            , tokenDetails.token];\n          }\n\n        case 9:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from\r\n * FCM, and unregisters the push subscription if it exists.\r\n */\n\n\nfunction deleteToken(firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenDetails, pushSubscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , dbGet(firebaseDependencies)];\n\n        case 1:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , dbRemove(firebaseDependencies)];\n\n        case 3:\n          _a.sent();\n\n          _a.label = 4;\n\n        case 4:\n          return [4\n          /*yield*/\n          , swRegistration.pushManager.getSubscription()];\n\n        case 5:\n          pushSubscription = _a.sent();\n\n          if (pushSubscription) {\n            return [2\n            /*return*/\n            , pushSubscription.unsubscribe()];\n          } // If there's no SW, consider it a success.\n\n\n          return [2\n          /*return*/\n          , true];\n      }\n    });\n  });\n}\n\nfunction updateToken(tokenDetails, firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var updatedToken, updatedTokenDetails, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 5]);\n\n          return [4\n          /*yield*/\n          , requestUpdateToken(firebaseDependencies, tokenDetails)];\n\n        case 1:\n          updatedToken = _a.sent();\n          updatedTokenDetails = __assign({\n            token: updatedToken,\n            createTime: Date.now()\n          }, tokenDetails);\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, updatedTokenDetails)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , updatedToken];\n\n        case 3:\n          e_2 = _a.sent();\n          return [4\n          /*yield*/\n          , deleteToken(firebaseDependencies, swRegistration)];\n\n        case 4:\n          _a.sent();\n\n          throw e_2;\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getNewToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var token, tokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , requestGetToken(firebaseDependencies, subscriptionOptions)];\n\n        case 1:\n          token = _a.sent();\n          tokenDetails = {\n            token: token,\n            createTime: Date.now(),\n            subscriptionOptions: subscriptionOptions\n          };\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, tokenDetails)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , tokenDetails.token];\n      }\n    });\n  });\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\n\n\nfunction getPushSubscription(swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var subscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , swRegistration.pushManager.getSubscription()];\n\n        case 1:\n          subscription = _a.sent();\n\n          if (subscription) {\n            return [2\n            /*return*/\n            , subscription];\n          }\n\n          return [2\n          /*return*/\n          , swRegistration.pushManager.subscribe({\n            userVisibleOnly: true,\n            // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n            // submitted to pushManager#subscribe must be of type Uint8Array.\n            applicationServerKey: base64ToArray(vapidKey)\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\n\n\nfunction isTokenValid(dbOptions, currentOptions) {\n  var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  var isAuthEqual = currentOptions.auth === dbOptions.auth;\n  var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the\n  // Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WindowController =\n/** @class */\nfunction () {\n  function WindowController(firebaseDependencies) {\n    var _this = this;\n\n    this.firebaseDependencies = firebaseDependencies;\n    this.vapidKey = null;\n    this.onMessageCallback = null;\n    navigator.serviceWorker.addEventListener('message', function (e) {\n      return _this.messageEventListener(e);\n    });\n  }\n\n  Object.defineProperty(WindowController.prototype, \"app\", {\n    get: function get() {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  WindowController.prototype.getToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var swRegistration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.vapidKey) {\n              this.vapidKey = DEFAULT_VAPID_KEY;\n            }\n\n            return [4\n            /*yield*/\n            , this.getServiceWorkerRegistration()];\n\n          case 1:\n            swRegistration = _a.sent();\n            if (!(Notification.permission === 'default')) return [3\n            /*break*/\n            , 3]; // The user hasn't allowed or denied notifications yet. Ask them.\n\n            return [4\n            /*yield*/\n            , Notification.requestPermission()];\n\n          case 2:\n            // The user hasn't allowed or denied notifications yet. Ask them.\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            if (Notification.permission !== 'granted') {\n              throw ERROR_FACTORY.create(\"permission-blocked\"\n              /* PERMISSION_BLOCKED */\n              );\n            }\n\n            return [2\n            /*return*/\n            , getToken(this.firebaseDependencies, swRegistration, this.vapidKey)];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.deleteToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var swRegistration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getServiceWorkerRegistration()];\n\n          case 1:\n            swRegistration = _a.sent();\n            return [2\n            /*return*/\n            , deleteToken(this.firebaseDependencies, swRegistration)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Request permission if it is not currently granted.\r\n   *\r\n   * @return Resolves if the permission was granted, rejects otherwise.\r\n   *\r\n   * @deprecated Use Notification.requestPermission() instead.\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n   */\n\n\n  WindowController.prototype.requestPermission = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var permissionResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Notification.permission === 'granted') {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , Notification.requestPermission()];\n\n          case 1:\n            permissionResult = _a.sent();\n\n            if (permissionResult === 'granted') {\n              return [2\n              /*return*/\n              ];\n            } else if (permissionResult === 'denied') {\n              throw ERROR_FACTORY.create(\"permission-blocked\"\n              /* PERMISSION_BLOCKED */\n              );\n            } else {\n              throw ERROR_FACTORY.create(\"permission-default\"\n              /* PERMISSION_DEFAULT */\n              );\n            }\n\n        }\n      });\n    });\n  }; // TODO: Deprecate this and make VAPID key a parameter in getToken.\n\n\n  WindowController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\"\n      /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n      );\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\"\n      /* INVALID_VAPID_KEY */\n      );\n    }\n\n    this.vapidKey = vapidKey;\n  };\n\n  WindowController.prototype.useServiceWorker = function (swRegistration) {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(\"invalid-sw-registration\"\n      /* INVALID_SW_REGISTRATION */\n      );\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(\"use-sw-after-get-token\"\n      /* USE_SW_AFTER_GET_TOKEN */\n      );\n    }\n\n    this.swRegistration = swRegistration;\n  };\n  /**\r\n   * @param nextOrObserver An observer object or a function triggered on\r\n   * message.\r\n   * @return The unsubscribe function for the observer.\r\n   */\n  // TODO: Simplify this to only accept a function and not an Observer.\n\n\n  WindowController.prototype.onMessage = function (nextOrObserver) {\n    var _this = this;\n\n    this.onMessageCallback = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next;\n    return function () {\n      _this.onMessageCallback = null;\n    };\n  };\n\n  WindowController.prototype.setBackgroundMessageHandler = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\"\n    /* AVAILABLE_IN_SW */\n    );\n  }; // Unimplemented\n\n\n  WindowController.prototype.onTokenRefresh = function () {\n    return function () {};\n  };\n  /**\r\n   * Creates or updates the default service worker registration.\r\n   * @return The service worker registration to be used for the push service.\r\n   */\n\n\n  WindowController.prototype.getServiceWorkerRegistration = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, e_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.swRegistration) return [3\n            /*break*/\n            , 4];\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            _a = this;\n            return [4\n            /*yield*/\n            , navigator.serviceWorker.register(DEFAULT_SW_PATH, {\n              scope: DEFAULT_SW_SCOPE\n            })];\n\n          case 2:\n            _a.swRegistration = _b.sent(); // The timing when browser updates sw when sw has an update is unreliable by my experiment.\n            // It leads to version conflict when the SDK upgrades to a newer version in the main page, but\n            // sw is stuck with the old version. For example, https://github.com/firebase/firebase-js-sdk/issues/2590\n            // The following line reliably updates sw if there was an update.\n\n            this.swRegistration.update().catch(function () {\n              /* it is non blocking and we don't care if it failed */\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _b.sent();\n            throw ERROR_FACTORY.create(\"failed-service-worker-registration\"\n            /* FAILED_DEFAULT_REGISTRATION */\n            , {\n              browserErrorMessage: e_1.message\n            });\n\n          case 4:\n            return [2\n            /*return*/\n            , this.swRegistration];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.messageEventListener = function (event) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, type, payload, data;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!((_a = event.data) === null || _a === void 0 ? void 0 : _a.firebaseMessaging)) {\n              // Not a message from FCM\n              return [2\n              /*return*/\n              ];\n            }\n\n            _b = event.data.firebaseMessaging, type = _b.type, payload = _b.payload;\n\n            if (this.onMessageCallback && type === MessageType.PUSH_RECEIVED) {\n              this.onMessageCallback(payload);\n            }\n\n            data = payload.data;\n            if (!(isConsoleMessage(data) && data[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [3\n            /*break*/\n            , 2]; // Analytics is enabled on this message, so we should log it.\n\n            return [4\n            /*yield*/\n            , this.logEvent(type, data)];\n\n          case 1:\n            // Analytics is enabled on this message, so we should log it.\n            _c.sent();\n\n            _c.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.logEvent = function (messageType, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventType, analytics;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventType = getEventType(messageType);\n            return [4\n            /*yield*/\n            , this.firebaseDependencies.analyticsProvider.get()];\n\n          case 1:\n            analytics = _a.sent();\n            analytics.logEvent(eventType, {\n              /* eslint-disable camelcase */\n              message_id: data[CONSOLE_CAMPAIGN_ID],\n              message_name: data[CONSOLE_CAMPAIGN_NAME],\n              message_time: data[CONSOLE_CAMPAIGN_TIME],\n              message_device_time: Math.floor(Date.now() / 1000)\n              /* eslint-enable camelcase */\n\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return WindowController;\n}();\n\nfunction getEventType(messageType) {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n\n    default:\n      throw new Error();\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar SwController =\n/** @class */\nfunction () {\n  function SwController(firebaseDependencies) {\n    var _this = this;\n\n    this.firebaseDependencies = firebaseDependencies;\n    this.vapidKey = null;\n    this.bgMessageHandler = null;\n    self.addEventListener('push', function (e) {\n      e.waitUntil(_this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', function (e) {\n      e.waitUntil(_this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', function (e) {\n      e.waitUntil(_this.onNotificationClick(e));\n    });\n  }\n\n  Object.defineProperty(SwController.prototype, \"app\", {\n    get: function get() {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Calling setBackgroundMessageHandler will opt in to some specific\r\n   * behaviours.\r\n   * 1.) If a notification doesn't need to be shown due to a window already\r\n   * being visible, then push messages will be sent to the page.\r\n   * 2.) If a notification needs to be shown, and the message contains no\r\n   * notification data this method will be called\r\n   * and the promise it returns will be passed to event.waitUntil.\r\n   * If you do not set this callback then all push messages will let and the\r\n   * developer can handle them in a their own 'push' event callback\r\n   *\r\n   * @param callback The callback to be called when a push message is received\r\n   * and a notification must be shown. The callback will be given the data from\r\n   * the push message.\r\n   */\n\n  SwController.prototype.setBackgroundMessageHandler = function (callback) {\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(\"invalid-bg-handler\"\n      /* INVALID_BG_HANDLER */\n      );\n    }\n\n    this.bgMessageHandler = callback;\n  }; // TODO: Remove getToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n\n\n  SwController.prototype.getToken = function () {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!!this.vapidKey) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , dbGet(this.firebaseDependencies)];\n\n          case 1:\n            tokenDetails = _c.sent();\n            this.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n            _c.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , getToken(this.firebaseDependencies, self.registration, this.vapidKey)];\n        }\n      });\n    });\n  }; // TODO: Remove deleteToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n\n\n  SwController.prototype.deleteToken = function () {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  };\n\n  SwController.prototype.requestPermission = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  }; // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  // TODO: Remove this together with getToken from SW Controller.\n\n\n  SwController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\"\n      /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n      );\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\"\n      /* INVALID_VAPID_KEY */\n      );\n    }\n\n    this.vapidKey = vapidKey;\n  };\n\n  SwController.prototype.useServiceWorker = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n\n  SwController.prototype.onMessage = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n\n  SwController.prototype.onTokenRefresh = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n  /**\r\n   * A handler for push events that shows notifications based on the content of\r\n   * the payload.\r\n   *\r\n   * The payload must be a JSON-encoded Object with a `notification` key. The\r\n   * value of the `notification` property will be used as the NotificationOptions\r\n   * object passed to showNotification. Additionally, the `title` property of the\r\n   * notification object will be used as the title.\r\n   *\r\n   * If there is no notification data in the payload then no notification will be\r\n   * shown.\r\n   */\n\n\n  SwController.prototype.onPush = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, clientList, notificationDetails;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = getMessagePayload(event);\n\n            if (!payload) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , getClientList()];\n\n          case 1:\n            clientList = _a.sent();\n\n            if (hasVisibleClients(clientList)) {\n              // App in foreground. Send to page.\n              return [2\n              /*return*/\n              , sendMessageToWindowClients(clientList, payload)];\n            }\n\n            notificationDetails = getNotificationData(payload);\n            if (!notificationDetails) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , showNotification(notificationDetails)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            if (!this.bgMessageHandler) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.bgMessageHandler(payload)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onSubChange = function (event) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var newSubscription, tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            newSubscription = event.newSubscription;\n            if (!!newSubscription) return [3\n            /*break*/\n            , 2]; // Subscription revoked, delete token\n\n            return [4\n            /*yield*/\n            , deleteToken(this.firebaseDependencies, self.registration)];\n\n          case 1:\n            // Subscription revoked, delete token\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            return [4\n            /*yield*/\n            , dbGet(this.firebaseDependencies)];\n\n          case 3:\n            tokenDetails = _c.sent();\n            return [4\n            /*yield*/\n            , deleteToken(this.firebaseDependencies, self.registration)];\n\n          case 4:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , getToken(this.firebaseDependencies, self.registration, (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];\n\n          case 5:\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onNotificationClick = function (event) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, link, client, message;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            payload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n\n            if (!payload) {\n              // Not an FCM notification, do nothing.\n              return [2\n              /*return*/\n              ];\n            } else if (event.action) {\n              // User clicked on an action button.\n              // This will allow devs to act on action button clicks by using a custom\n              // onNotificationClick listener that they define.\n              return [2\n              /*return*/\n              ];\n            } // Prevent other listeners from receiving the event\n\n\n            event.stopImmediatePropagation();\n            event.notification.close();\n            link = getLink(payload);\n\n            if (!link) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , getWindowClient(link)];\n\n          case 1:\n            client = _c.sent();\n            if (!!client) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , self.clients.openWindow(link)];\n\n          case 2:\n            // Unable to find window client so need to open one.\n            // This also focuses the opened client.\n            client = _c.sent(); // Wait three seconds for the client to initialize and set up the message\n            // handler so that it can receive the message.\n\n            return [4\n            /*yield*/\n            , sleep(3000)];\n\n          case 3:\n            // Wait three seconds for the client to initialize and set up the message\n            // handler so that it can receive the message.\n            _c.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , client.focus()];\n\n          case 5:\n            client = _c.sent();\n            _c.label = 6;\n\n          case 6:\n            if (!client) {\n              // Window Client will not be returned if it's for a third party origin.\n              return [2\n              /*return*/\n              ];\n            }\n\n            message = createNewMessage(MessageType.NOTIFICATION_CLICKED, payload);\n            return [2\n            /*return*/\n            , client.postMessage(message)];\n        }\n      });\n    });\n  };\n\n  return SwController;\n}();\n\nfunction getMessagePayload(_a) {\n  var data = _a.data;\n\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\nfunction getNotificationData(payload) {\n  var _a;\n\n  if (!payload || typeof payload.notification !== 'object') {\n    return;\n  }\n\n  var notificationInformation = __assign({}, payload.notification); // Put the message payload under FCM_MSG name so we can identify the\n  // notification as being an FCM notification vs a notification from\n  // somewhere else (i.e. normal web push or developer generated\n  // notification).\n\n\n  notificationInformation.data = __assign(__assign({}, payload.notification.data), (_a = {}, _a[FCM_MSG] = payload, _a));\n  return notificationInformation;\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\n\n\nfunction getWindowClient(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedURL, clientList, clientList_1, clientList_1_1, client, parsedClientUrl;\n\n    var e_1, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          parsedURL = new URL(url, self.location.href);\n          return [4\n          /*yield*/\n          , getClientList()];\n\n        case 1:\n          clientList = _b.sent();\n\n          try {\n            for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {\n              client = clientList_1_1.value;\n              parsedClientUrl = new URL(client.url, self.location.href);\n\n              if (parsedClientUrl.host === parsedURL.host) {\n                return [2\n                /*return*/\n                , client];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (clientList_1_1 && !clientList_1_1.done && (_a = clientList_1.return)) _a.call(clientList_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          return [2\n          /*return*/\n          , null];\n      }\n    });\n  });\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will\r\n * resolve to true, otherwise false.\r\n */\n\n\nfunction hasVisibleClients(clientList) {\n  return clientList.some(function (client) {\n    return client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages\n    // of extensions, which are always considered visible for some reason.\n    !client.url.startsWith('chrome-extension://');\n  });\n}\n/**\r\n * @param payload The data from the push event that should be sent to all\r\n * available pages.\r\n * @returns Returns a promise that resolves once the message has been sent to\r\n * all WindowClients.\r\n */\n\n\nfunction sendMessageToWindowClients(clientList, payload) {\n  var e_2, _a;\n\n  var message = createNewMessage(MessageType.PUSH_RECEIVED, payload);\n\n  try {\n    for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {\n      var client = clientList_2_1.value;\n      client.postMessage(message);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (clientList_2_1 && !clientList_2_1.done && (_a = clientList_2.return)) _a.call(clientList_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n\n  });\n}\n\nfunction createNewMessage(type, payload) {\n  return {\n    firebaseMessaging: {\n      type: type,\n      payload: payload\n    }\n  };\n}\n\nfunction showNotification(details) {\n  var _a;\n\n  var title = (_a = details.title) !== null && _a !== void 0 ? _a : '';\n  var actions = details.actions; // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n\n  var maxActions = Notification.maxActions;\n\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\"This browser only supports \" + maxActions + \" actions. The remaining actions will not be displayed.\");\n  }\n\n  return self.registration.showNotification(title, details);\n}\n\nfunction getLink(payload) {\n  var _a, _b, _c; // eslint-disable-next-line camelcase\n\n\n  var link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MESSAGING_NAME = 'messaging';\n\nfunction factoryMethod(container) {\n  // Dependencies.\n  var app = container.getProvider('app').getImmediate();\n  var appConfig = extractAppConfig(app);\n  var installations = container.getProvider('installations').getImmediate();\n  var analyticsProvider = container.getProvider('analytics-internal');\n  var firebaseDependencies = {\n    app: app,\n    appConfig: appConfig,\n    installations: installations,\n    analyticsProvider: analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(\"unsupported-browser\"\n    /* UNSUPPORTED_BROWSER */\n    );\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nvar NAMESPACE_EXPORTS = {\n  isSupported: isSupported\n};\nfirebase.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, \"PUBLIC\"\n/* PUBLIC */\n).setServiceProps(NAMESPACE_EXPORTS));\n\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n */\n\n\nfunction isWindowControllerSupported() {\n  return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\n\n\nfunction isSWControllerSupported() {\n  return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}","map":null,"metadata":{},"sourceType":"module"}