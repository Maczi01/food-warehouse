{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DependentHostedNumberOrderList = require('./authorizationDocument/dependentHostedNumberOrder').DependentHostedNumberOrderList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar AuthorizationDocumentList;\nvar AuthorizationDocumentPage;\nvar AuthorizationDocumentInstance;\nvar AuthorizationDocumentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizationDocumentList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.HostedNumbers.AuthorizationDocumentList\n *\n * @param {Twilio.Preview.HostedNumbers} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nAuthorizationDocumentList = function AuthorizationDocumentList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function authorizationDocuments\n   * @memberof Twilio.Preview.HostedNumbers#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.HostedNumbers.AuthorizationDocumentContext}\n   */\n\n  /* jshint ignore:end */\n  function AuthorizationDocumentListInstance(sid) {\n    return AuthorizationDocumentListInstance.get(sid);\n  }\n\n  AuthorizationDocumentListInstance._version = version; // Path Solution\n\n  AuthorizationDocumentListInstance._solution = {};\n  AuthorizationDocumentListInstance._uri = \"/AuthorizationDocuments\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams AuthorizationDocumentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.email] - Email.\n   * @param {authorization_document.status} [opts.status] -\n   *          The Status of this AuthorizationDocument.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AuthorizationDocumentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AuthorizationDocumentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.email] - Email.\n   * @param {authorization_document.status} [opts.status] -\n   *          The Status of this AuthorizationDocument.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizationDocumentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AuthorizationDocumentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.email] - Email.\n   * @param {authorization_document.status} [opts.status] -\n   *          The Status of this AuthorizationDocument.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizationDocumentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Email': _.get(opts, 'email'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthorizationDocumentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AuthorizationDocumentInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizationDocumentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthorizationDocumentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a AuthorizationDocumentInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string|list} opts.hostedNumberOrderSids -\n   *          A list of HostedNumberOrder sids.\n   * @param {string} opts.addressSid - Address sid.\n   * @param {string} opts.email - Email.\n   * @param {string} opts.contactTitle -\n   *          Title of signee of this Authorization Document.\n   * @param {string} opts.contactPhoneNumber -\n   *          Authorization Document's signee's phone number.\n   * @param {string|list} [opts.ccEmails] - A list of emails.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthorizationDocumentInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizationDocumentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.hostedNumberOrderSids)) {\n      throw new Error('Required parameter \"opts.hostedNumberOrderSids\" missing.');\n    }\n\n    if (_.isUndefined(opts.addressSid)) {\n      throw new Error('Required parameter \"opts.addressSid\" missing.');\n    }\n\n    if (_.isUndefined(opts.email)) {\n      throw new Error('Required parameter \"opts.email\" missing.');\n    }\n\n    if (_.isUndefined(opts.contactTitle)) {\n      throw new Error('Required parameter \"opts.contactTitle\" missing.');\n    }\n\n    if (_.isUndefined(opts.contactPhoneNumber)) {\n      throw new Error('Required parameter \"opts.contactPhoneNumber\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'HostedNumberOrderSids': serialize.map(_.get(opts, 'hostedNumberOrderSids'), function (e) {\n        return e;\n      }),\n      'AddressSid': _.get(opts, 'addressSid'),\n      'Email': _.get(opts, 'email'),\n      'ContactTitle': _.get(opts, 'contactTitle'),\n      'ContactPhoneNumber': _.get(opts, 'contactPhoneNumber'),\n      'CcEmails': serialize.map(_.get(opts, 'ccEmails'), function (e) {\n        return e;\n      })\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthorizationDocumentInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a authorization_document\n   *\n   * @function get\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @param {string} sid - AuthorizationDocument sid.\n   *\n   * @returns {Twilio.Preview.HostedNumbers.AuthorizationDocumentContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizationDocumentListInstance.get = function get(sid) {\n    return new AuthorizationDocumentContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizationDocumentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthorizationDocumentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthorizationDocumentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizationDocumentPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.HostedNumbers.AuthorizationDocumentPage\n *\n * @param {HostedNumbers} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthorizationDocumentSolution} solution - Path solution\n *\n * @returns AuthorizationDocumentPage\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentPage = function AuthorizationDocumentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthorizationDocumentPage.prototype, Page.prototype);\n\nAuthorizationDocumentPage.prototype.constructor = AuthorizationDocumentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AuthorizationDocumentInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentPage#\n *\n * @param {AuthorizationDocumentPayload} payload - Payload response from the API\n *\n * @returns AuthorizationDocumentInstance\n */\n\n/* jshint ignore:end */\n\nAuthorizationDocumentPage.prototype.getInstance = function getInstance(payload) {\n  return new AuthorizationDocumentInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthorizationDocumentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizationDocumentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.HostedNumbers.AuthorizationDocumentInstance\n *\n * @property {string} sid - AuthorizationDocument sid.\n * @property {string} addressSid - Address sid.\n * @property {authorization_document.status} status -\n *          The Status of this AuthorizationDocument.\n * @property {string} email - Email.\n * @property {string} ccEmails - A list of emails.\n * @property {Date} dateCreated - The date this AuthorizationDocument was created.\n * @property {Date} dateUpdated - The date this AuthorizationDocument was updated.\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {HostedNumbers} version - Version of the resource\n * @param {AuthorizationDocumentPayload} payload - The instance payload\n * @param {sid} sid - AuthorizationDocument sid.\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentInstance = function AuthorizationDocumentInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.addressSid = payload.address_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.email = payload.email; // jshint ignore:line\n\n  this.ccEmails = payload.cc_emails; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AuthorizationDocumentInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new AuthorizationDocumentContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AuthorizationDocumentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthorizationDocumentInstance\n */\n\n/* jshint ignore:end */\n\nAuthorizationDocumentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a AuthorizationDocumentInstance\n *\n * @function update\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string|list} [opts.hostedNumberOrderSids] -\n *          A list of HostedNumberOrder sids.\n * @param {string} [opts.addressSid] - Address sid.\n * @param {string} [opts.email] - Email.\n * @param {string|list} [opts.ccEmails] - A list of emails.\n * @param {authorization_document.status} [opts.status] -\n *          The Status of this AuthorizationDocument.\n * @param {string} [opts.contactTitle] -\n *          Title of signee of this Authorization Document.\n * @param {string} [opts.contactPhoneNumber] -\n *          Authorization Document's signee's phone number.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthorizationDocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the dependentHostedNumberOrders\n *\n * @function dependentHostedNumberOrders\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentInstance#\n *\n * @returns {Twilio.Preview.HostedNumbers.AuthorizationDocumentContext.DependentHostedNumberOrderList}\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentInstance.prototype.dependentHostedNumberOrders = function dependentHostedNumberOrders() {\n  return this._proxy.dependentHostedNumberOrders;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthorizationDocumentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizationDocumentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.HostedNumbers.AuthorizationDocumentContext\n *\n * @property {Twilio.Preview.HostedNumbers.AuthorizationDocumentContext.DependentHostedNumberOrderList} dependentHostedNumberOrders -\n *          dependentHostedNumberOrders resource\n *\n * @param {HostedNumbers} version - Version of the resource\n * @param {sid} sid - AuthorizationDocument sid.\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentContext = function AuthorizationDocumentContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/AuthorizationDocuments/\".concat(sid); // Dependents\n\n  this._dependentHostedNumberOrders = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AuthorizationDocumentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthorizationDocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AuthorizationDocumentInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a AuthorizationDocumentInstance\n *\n * @function update\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string|list} [opts.hostedNumberOrderSids] -\n *          A list of HostedNumberOrder sids.\n * @param {string} [opts.addressSid] - Address sid.\n * @param {string} [opts.email] - Email.\n * @param {string|list} [opts.ccEmails] - A list of emails.\n * @param {authorization_document.status} [opts.status] -\n *          The Status of this AuthorizationDocument.\n * @param {string} [opts.contactTitle] -\n *          Title of signee of this Authorization Document.\n * @param {string} [opts.contactPhoneNumber] -\n *          Authorization Document's signee's phone number.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthorizationDocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthorizationDocumentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'HostedNumberOrderSids': serialize.map(_.get(opts, 'hostedNumberOrderSids'), function (e) {\n      return e;\n    }),\n    'AddressSid': _.get(opts, 'addressSid'),\n    'Email': _.get(opts, 'email'),\n    'CcEmails': serialize.map(_.get(opts, 'ccEmails'), function (e) {\n      return e;\n    }),\n    'Status': _.get(opts, 'status'),\n    'ContactTitle': _.get(opts, 'contactTitle'),\n    'ContactPhoneNumber': _.get(opts, 'contactPhoneNumber')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AuthorizationDocumentInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AuthorizationDocumentContext.prototype, 'dependentHostedNumberOrders', {\n  get: function get() {\n    if (!this._dependentHostedNumberOrders) {\n      this._dependentHostedNumberOrders = new DependentHostedNumberOrderList(this._version, this._solution.sid);\n    }\n\n    return this._dependentHostedNumberOrders;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.HostedNumbers.AuthorizationDocumentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAuthorizationDocumentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAuthorizationDocumentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthorizationDocumentList: AuthorizationDocumentList,\n  AuthorizationDocumentPage: AuthorizationDocumentPage,\n  AuthorizationDocumentInstance: AuthorizationDocumentInstance,\n  AuthorizationDocumentContext: AuthorizationDocumentContext\n};","map":null,"metadata":{},"sourceType":"script"}