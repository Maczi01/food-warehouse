{"ast":null,"code":"var WritableStream = require('stream').Writable;\n\nvar util = require('util');\n\nvar Blob = require('blob');\n\nvar URL = global.URL || global.webkitURL || global.mozURL;\n\nfunction BlobStream() {\n  if (!(this instanceof BlobStream)) return new BlobStream();\n  WritableStream.call(this);\n  this._chunks = [];\n  this._blob = null;\n  this.length = 0;\n}\n\nutil.inherits(BlobStream, WritableStream);\n\nBlobStream.prototype._write = function (chunk, encoding, callback) {\n  // convert chunks to Uint8Arrays (e.g. Buffer when array fallback is being used)\n  if (!(chunk instanceof Uint8Array)) chunk = new Uint8Array(chunk);\n  this.length += chunk.length;\n\n  this._chunks.push(chunk);\n\n  callback();\n};\n\nBlobStream.prototype.toBlob = function (type) {\n  type = type || 'application/octet-stream'; // cache the blob if needed\n\n  if (!this._blob) {\n    this._blob = new Blob(this._chunks, {\n      type: type\n    });\n    this._chunks = []; // free memory\n  } // if the cached blob's type doesn't match the requested type, make a new blob\n\n\n  if (this._blob.type !== type) this._blob = new Blob([this._blob], {\n    type: type\n  });\n  return this._blob;\n};\n\nBlobStream.prototype.toBlobURL = function (type) {\n  return URL.createObjectURL(this.toBlob(type));\n};\n\nmodule.exports = BlobStream;","map":null,"metadata":{},"sourceType":"script"}