{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MonthlyList;\nvar MonthlyPage;\nvar MonthlyInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the MonthlyList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nMonthlyList = function MonthlyList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function monthly\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyContext}\n   */\n\n  /* jshint ignore:end */\n  function MonthlyListInstance(sid) {\n    return MonthlyListInstance.get(sid);\n  }\n\n  MonthlyListInstance._version = version; // Path Solution\n\n  MonthlyListInstance._solution = {\n    accountSid: accountSid\n  };\n  MonthlyListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Usage/Records/Monthly.json\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams MonthlyInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {monthly.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  MonthlyListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MonthlyInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {monthly.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MonthlyListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MonthlyInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {monthly.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MonthlyListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Category': _.get(opts, 'category'),\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MonthlyPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MonthlyInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MonthlyListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MonthlyPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MonthlyListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MonthlyListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MonthlyListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MonthlyPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MonthlySolution} solution - Path solution\n *\n * @returns MonthlyPage\n */\n\n/* jshint ignore:end */\n\n\nMonthlyPage = function MonthlyPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MonthlyPage.prototype, Page.prototype);\n\nMonthlyPage.prototype.constructor = MonthlyPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MonthlyInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyPage#\n *\n * @param {MonthlyPayload} payload - Payload response from the API\n *\n * @returns MonthlyInstance\n */\n\n/* jshint ignore:end */\n\nMonthlyPage.prototype.getInstance = function getInstance(payload) {\n  return new MonthlyInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMonthlyPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMonthlyPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MonthlyContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyInstance\n *\n * @property {string} accountSid - The SID of the Account accrued the usage\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} asOf - Usage records up to date as of this timestamp\n * @property {monthly.category} category - The category of usage\n * @property {string} count - The number of usage events\n * @property {string} countUnit - The units in which count is measured\n * @property {string} description -\n *          A plain-language description of the usage category\n * @property {Date} endDate -\n *          The last date for which usage is included in the UsageRecord\n * @property {number} price - The total price of the usage\n * @property {string} priceUnit - The currency in which `price` is measured\n * @property {Date} startDate -\n *          The first date for which usage is included in this UsageRecord\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} usage - The amount of usage\n * @property {string} usageUnit - The units in which usage is measured\n *\n * @param {V2010} version - Version of the resource\n * @param {MonthlyPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nMonthlyInstance = function MonthlyInstance(version, payload, accountSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.asOf = payload.as_of; // jshint ignore:line\n\n  this.category = payload.category; // jshint ignore:line\n\n  this.count = payload.count; // jshint ignore:line\n\n  this.countUnit = payload.count_unit; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.endDate = deserialize.iso8601Date(payload.end_date); // jshint ignore:line\n\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.startDate = deserialize.iso8601Date(payload.start_date); // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.usage = payload.usage; // jshint ignore:line\n\n  this.usageUnit = payload.usage_unit; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.MonthlyInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMonthlyInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMonthlyInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MonthlyList: MonthlyList,\n  MonthlyPage: MonthlyPage,\n  MonthlyInstance: MonthlyInstance\n};","map":null,"metadata":{},"sourceType":"script"}