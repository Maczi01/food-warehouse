{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar _ = require('lodash');\n\nvar scmp = require('scmp');\n\nvar urllib = require('url');\n\nvar Url = require('url-parse');\n/**\n * Utility function to construct the URL string, since Node.js url library won't include standard port numbers\n *\n * @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n * @returns {string} - URL with standard port number included\n */\n\n\nfunction buildUrlWithStandardPort(parsedUrl) {\n  var url = '';\n  var port = parsedUrl.protocol === 'https:' ? ':443' : ':80';\n  url += parsedUrl.protocol ? parsedUrl.protocol + '//' : '';\n  url += parsedUrl.username;\n  url += parsedUrl.password ? ':' + parsedUrl.password : '';\n  url += parsedUrl.username || parsedUrl.password ? '@' : '';\n  url += parsedUrl.host ? parsedUrl.host + port : '';\n  url += parsedUrl.pathname + parsedUrl.query + parsedUrl.hash;\n  return url;\n}\n/**\n Utility function to add a port number to a URL\n\n @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n @returns {string} - URL with port\n */\n\n\nfunction addPort(parsedUrl) {\n  if (!parsedUrl.port) {\n    return buildUrlWithStandardPort(parsedUrl);\n  }\n\n  return parsedUrl.toString();\n}\n/**\n Utility function to remove a port number from a URL\n\n @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n @returns {string} - URL without port\n */\n\n\nfunction removePort(parsedUrl) {\n  parsedUrl.set('port', '');\n  return parsedUrl.toString();\n}\n/**\n Utility function to get the expected signature for a given request\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {string} - signature\n */\n\n\nfunction getExpectedTwilioSignature(authToken, url, params) {\n  if (url.indexOf('bodySHA256') !== -1) {\n    params = {};\n  }\n\n  var data = Object.keys(params).sort().reduce(function (acc, key) {\n    return acc + key + params[key];\n  }, url);\n  return crypto.createHmac('sha1', authToken).update(Buffer.from(data, 'utf-8')).digest('base64');\n}\n/**\n Utility function to get the expected body hash for a given request's body\n\n @param {string} body - The plain-text body of the request\n */\n\n\nfunction getExpectedBodyHash(body) {\n  return crypto.createHash('sha256').update(Buffer.from(body, 'utf-8')).digest('hex');\n}\n/**\n Utility function to validate an incoming request is indeed from Twilio\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {boolean} - valid\n */\n\n\nfunction validateRequest(authToken, twilioHeader, url, params) {\n  twilioHeader = twilioHeader || '';\n  var urlObject = new Url(url);\n  var urlWithPort = addPort(urlObject);\n  var urlWithoutPort = removePort(urlObject);\n  /*\n   *  Check signature of the url with and without the port number\n   *  since signature generation on the back end is inconsistent\n   */\n\n  var signatureWithPort = getExpectedTwilioSignature(authToken, urlWithPort, params);\n  var signatureWithoutPort = getExpectedTwilioSignature(authToken, urlWithoutPort, params);\n  var validSignatureWithPort = scmp(Buffer.from(twilioHeader), Buffer.from(signatureWithPort));\n  var validSignatureWithoutPort = scmp(Buffer.from(twilioHeader), Buffer.from(signatureWithoutPort));\n  return validSignatureWithoutPort || validSignatureWithPort;\n}\n\nfunction validateBody(body, bodyHash) {\n  var expectedHash = getExpectedBodyHash(body);\n  return scmp(Buffer.from(bodyHash), Buffer.from(expectedHash));\n}\n/**\n Utility function to validate an incoming request is indeed from Twilio. This also validates\n the request body against the bodySHA256 post parameter.\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {string} body - The body of the request\n @returns {boolean} - valid\n */\n\n\nfunction validateRequestWithBody(authToken, twilioHeader, url, body) {\n  var urlObject = new Url(url, true);\n  return validateRequest(authToken, twilioHeader, url, {}) && validateBody(body, urlObject.query.bodySHA256);\n}\n/**\n Utility function to validate an incoming request is indeed from Twilio (for use with express).\n adapted from https://github.com/crabasa/twiliosig\n\n @param {object} request - An expressjs request object (http://expressjs.com/api.html#req.params)\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {object} opts - options for request validation:\n    - url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n    - host: manually specify the host name used by Twilio in a number's webhook config\n    - protocol: manually specify the protocol used by Twilio in a number's webhook config\n */\n\n\nfunction validateExpressRequest(request, authToken, opts) {\n  var options = opts || {};\n  var webhookUrl;\n\n  if (options.url) {\n    // Let the user specify the full URL\n    webhookUrl = options.url;\n  } else {\n    // Use configured host/protocol, or infer based on request\n    var protocol = options.protocol || request.protocol;\n    var host = options.host || request.headers.host;\n    webhookUrl = urllib.format({\n      protocol: protocol,\n      host: host,\n      pathname: request.originalUrl\n    });\n\n    if (request.originalUrl.search(/\\?/) >= 0) {\n      webhookUrl = webhookUrl.replace(/%3F/g, '?');\n    }\n  }\n\n  if (webhookUrl.indexOf('bodySHA256') > 0) {\n    return validateRequestWithBody(authToken, request.header('X-Twilio-Signature'), webhookUrl, request.body || {});\n  } else {\n    return validateRequest(authToken, request.header('X-Twilio-Signature'), webhookUrl, request.body || {});\n  }\n}\n/**\nExpress middleware to accompany a Twilio webhook. Provides Twilio\nrequest validation, and makes the response a little more friendly for our\nTwiML generator.  Request validation requires the express.urlencoded middleware\nto have been applied (e.g. app.use(express.urlencoded()); in your app config).\n\nOptions:\n- validate: {Boolean} whether or not the middleware should validate the request\n    came from Twilio.  Default true. If the request does not originate from\n    Twilio, we will return a text body and a 403.  If there is no configured\n    auth token and validate=true, this is an error condition, so we will return\n    a 500.\n- host: manually specify the host name used by Twilio in a number's webhook config\n- protocol: manually specify the protocol used by Twilio in a number's webhook config\n- url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n\nReturns a middleware function.\n\nExamples:\nvar webhookMiddleware = twilio.webhook();\nvar webhookMiddleware = twilio.webhook('asdha9dhjasd'); //init with auth token\nvar webhookMiddleware = twilio.webhook({\n    validate:false // don't attempt request validation\n});\nvar webhookMiddleware = twilio.webhook({\n    host: 'hook.twilio.com',\n    protocol: 'https'\n});\n */\n\n\nfunction webhook() {\n  var opts = {\n    validate: true\n  }; // Process arguments\n\n  var tokenString;\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    var arg = arguments[i];\n\n    if (typeof arg === 'string') {\n      tokenString = arg;\n    } else {\n      opts = _.extend(opts, arg);\n    }\n  } // set auth token from input or environment variable\n\n\n  opts.authToken = tokenString ? tokenString : process.env.TWILIO_AUTH_TOKEN; // Create middleware function\n\n  return function hook(request, response, next) {\n    // Do validation if requested\n    if (opts.validate) {\n      // Check if the 'X-Twilio-Signature' header exists or not\n      if (!request.header('X-Twilio-Signature')) {\n        return response.type('text/plain').status(400).send('No signature header error - X-Twilio-Signature header does not exist, maybe this request is not coming from Twilio.');\n      } // Check for a valid auth token\n\n\n      if (!opts.authToken) {\n        console.error('[Twilio]: Error - Twilio auth token is required for webhook request validation.');\n        response.type('text/plain').status(500).send('Webhook Error - we attempted to validate this request without first configuring our auth token.');\n      } else {\n        // Check that the request originated from Twilio\n        var valid = validateExpressRequest(request, opts.authToken, {\n          url: opts.url,\n          host: opts.host,\n          protocol: opts.protocol\n        });\n\n        if (valid) {\n          next();\n        } else {\n          return response.type('text/plain').status(403).send('Twilio Request Validation Failed.');\n        }\n      }\n    } else {\n      next();\n    }\n  };\n}\n\nmodule.exports = {\n  getExpectedTwilioSignature: getExpectedTwilioSignature,\n  getExpectedBodyHash: getExpectedBodyHash,\n  validateRequest: validateRequest,\n  validateRequestWithBody: validateRequestWithBody,\n  validateExpressRequest: validateExpressRequest,\n  validateBody: validateBody,\n  webhook: webhook\n};","map":null,"metadata":{},"sourceType":"script"}