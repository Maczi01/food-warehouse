{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDAttList, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents an attribute list\n\n  module.exports = XMLDTDAttList = /*#__PURE__*/function (_XMLNode) {\n    \"use strict\";\n\n    _inherits(XMLDTDAttList, _XMLNode);\n\n    // Initializes a new instance of `XMLDTDAttList`\n    // `parent` the parent `XMLDocType` element\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n    //                    #FIXED or #DEFAULT)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var _this;\n\n      _classCallCheck(this, XMLDTDAttList);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLDTDAttList).call(this, parent));\n\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + _this.debugInfo());\n      }\n\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + _this.debugInfo(elementName));\n      }\n\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + _this.debugInfo(elementName));\n      }\n\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + _this.debugInfo(elementName));\n      }\n\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + _this.debugInfo(elementName));\n      }\n\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + _this.debugInfo(elementName));\n      }\n\n      _this.elementName = _this.stringify.name(elementName);\n      _this.type = NodeType.AttributeDeclaration;\n      _this.attributeName = _this.stringify.name(attributeName);\n      _this.attributeType = _this.stringify.dtdAttType(attributeType);\n\n      if (defaultValue) {\n        _this.defaultValue = _this.stringify.dtdAttDefault(defaultValue);\n      }\n\n      _this.defaultValueType = defaultValueType;\n      return _this;\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    _createClass(XMLDTDAttList, [{\n      key: \"toString\",\n      value: function toString(options) {\n        return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n      }\n    }]);\n\n    return XMLDTDAttList;\n  }(XMLNode);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}