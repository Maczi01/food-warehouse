{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar CompositionSettingsList;\nvar CompositionSettingsPage;\nvar CompositionSettingsInstance;\nvar CompositionSettingsContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionSettingsList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCompositionSettingsList = function CompositionSettingsList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function compositionSettings\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionSettingsContext}\n   */\n\n  /* jshint ignore:end */\n  function CompositionSettingsListInstance(sid) {\n    return CompositionSettingsListInstance.get(sid);\n  }\n\n  CompositionSettingsListInstance._version = version; // Path Solution\n\n  CompositionSettingsListInstance._solution = {};\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a composition_settings\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionSettingsList#\n   *\n   * @returns {Twilio.Video.V1.CompositionSettingsContext}\n   */\n\n  /* jshint ignore:end */\n\n  CompositionSettingsListInstance.get = function get() {\n    return new CompositionSettingsContext(this._version);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionSettingsList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionSettingsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionSettingsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionSettingsListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionSettingsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSettingsSolution} solution - Path solution\n *\n * @returns CompositionSettingsPage\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsPage = function CompositionSettingsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionSettingsPage.prototype, Page.prototype);\n\nCompositionSettingsPage.prototype.constructor = CompositionSettingsPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CompositionSettingsInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionSettingsPage#\n *\n * @param {CompositionSettingsPayload} payload - Payload response from the API\n *\n * @returns CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\nCompositionSettingsPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionSettingsInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionSettingsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionSettingsInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} awsCredentialsSid - The SID of the stored Credential resource\n * @property {string} awsS3Url -\n *          The URL of the AWS S3 bucket where the compositions are stored\n * @property {boolean} awsStorageEnabled -\n *          Whether all compositions are written to the aws_s3_url\n * @property {string} encryptionKeySid -\n *          The SID of the Public Key resource used for encryption\n * @property {boolean} encryptionEnabled -\n *          Whether all compositions are stored in an encrypted form\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionSettingsPayload} payload - The instance payload\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsInstance = function CompositionSettingsInstance(version, payload) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.awsCredentialsSid = payload.aws_credentials_sid; // jshint ignore:line\n\n  this.awsS3Url = payload.aws_s3_url; // jshint ignore:line\n\n  this.awsStorageEnabled = payload.aws_storage_enabled; // jshint ignore:line\n\n  this.encryptionKeySid = payload.encryption_key_sid; // jshint ignore:line\n\n  this.encryptionEnabled = payload.encryption_enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(CompositionSettingsInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new CompositionSettingsContext(this._version);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\nCompositionSettingsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * create a CompositionSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A descriptive string that you create to describe the resource\n * @param {string} [opts.awsCredentialsSid] -\n *          The SID of the stored Credential resource\n * @param {string} [opts.encryptionKeySid] -\n *          The SID of the Public Key resource to use for encryption\n * @param {string} [opts.awsS3Url] -\n *          The URL of the AWS S3 bucket where the compositions should be stored\n * @param {boolean} [opts.awsStorageEnabled] -\n *          Whether all compositions should be written to the aws_s3_url\n * @param {boolean} [opts.encryptionEnabled] -\n *          Whether all compositions should be stored in an encrypted form\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsInstance.prototype.create = function create(opts, callback) {\n  return this._proxy.create(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionSettingsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionSettingsContext\n *\n * @param {V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext = function CompositionSettingsContext(version) {\n  this._version = version; // Path Solution\n\n  this._solution = {};\n  this._uri = \"/CompositionSettings/Default\";\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionSettingsInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * create a CompositionSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A descriptive string that you create to describe the resource\n * @param {string} [opts.awsCredentialsSid] -\n *          The SID of the stored Credential resource\n * @param {string} [opts.encryptionKeySid] -\n *          The SID of the Public Key resource to use for encryption\n * @param {string} [opts.awsS3Url] -\n *          The URL of the AWS S3 bucket where the compositions should be stored\n * @param {boolean} [opts.awsStorageEnabled] -\n *          Whether all compositions should be written to the aws_s3_url\n * @param {boolean} [opts.encryptionEnabled] -\n *          Whether all compositions should be stored in an encrypted form\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext.prototype.create = function create(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AwsCredentialsSid': _.get(opts, 'awsCredentialsSid'),\n    'EncryptionKeySid': _.get(opts, 'encryptionKeySid'),\n    'AwsS3Url': _.get(opts, 'awsS3Url'),\n    'AwsStorageEnabled': serialize.bool(_.get(opts, 'awsStorageEnabled')),\n    'EncryptionEnabled': serialize.bool(_.get(opts, 'encryptionEnabled'))\n  });\n\n  var promise = this._version.create({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionSettingsInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionSettingsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionSettingsList: CompositionSettingsList,\n  CompositionSettingsPage: CompositionSettingsPage,\n  CompositionSettingsInstance: CompositionSettingsInstance,\n  CompositionSettingsContext: CompositionSettingsContext\n};","map":null,"metadata":{},"sourceType":"script"}