{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar jwt = require('jsonwebtoken');\n\nvar util = require('util');\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.workspaceSid - The workspace unique ID\n * @param {string} options.workerSid - The worker unique ID\n * @param {string} options.role - The role of the grant\n */\n\n\nfunction TaskRouterGrant(options) {\n  options = options || {};\n  this.workspaceSid = options.workspaceSid;\n  this.workerSid = options.workerSid;\n  this.role = options.role;\n}\n\n_.extend(TaskRouterGrant.prototype, {\n  key: 'task_router',\n  toPayload: function toPayload() {\n    var grant = {};\n\n    if (this.workspaceSid) {\n      grant.workspace_sid = this.workspaceSid;\n    }\n\n    if (this.workerSid) {\n      grant.worker_sid = this.workerSid;\n    }\n\n    if (this.role) {\n      grant.role = this.role;\n    }\n\n    return grant;\n  }\n});\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\n\n\nfunction ChatGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n  this.deploymentRoleSid = options.deploymentRoleSid;\n  this.pushCredentialSid = options.pushCredentialSid;\n}\n\n_.extend(ChatGrant.prototype, {\n  key: 'chat',\n  toPayload: function toPayload() {\n    var grant = {};\n\n    if (this.serviceSid) {\n      grant.service_sid = this.serviceSid;\n    }\n\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n\n    if (this.deploymentRoleSid) {\n      grant.deployment_role_sid = this.deploymentRoleSid;\n    }\n\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n\n    return grant;\n  }\n});\n/**\n * @deprecated - Use ChatGrant instead.\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\n\n\nfunction IpMessagingGrant(options) {\n  ChatGrant.call(this, options);\n}\n\nIpMessagingGrant.prototype = _.create(ChatGrant.prototype, _.assign({\n  '_super': ChatGrant.prototype,\n  'constructor': ChatGrant\n}));\nIpMessagingGrant.prototype.key = 'ip_messaging';\n/**\n  * @deprecated - Use VideoGrant instead\n  *\n  * @constructor\n  * @param {object} options - ...\n  * @param {string} options.configurationProfileSid - The configuration\n  *                 profile unique ID\n  */\n\nfunction ConversationsGrant(options) {\n  options = options || {};\n  this.configurationProfileSid = options.configurationProfileSid;\n}\n\n_.extend(ConversationsGrant.prototype, {\n  key: 'rtc',\n  toPayload: function toPayload() {\n    var grant = {};\n\n    if (this.configurationProfileSid) {\n      grant.configuration_profile_sid = this.configurationProfileSid;\n    }\n\n    return grant;\n  }\n});\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.room - The Room name or Room sid.\n */\n\n\nfunction VideoGrant(options) {\n  options = options || {};\n  this.room = options.room;\n}\n\n_.extend(VideoGrant.prototype, {\n  key: 'video',\n  toPayload: function toPayload() {\n    var grant = {};\n\n    if (this.room) {\n      grant.room = this.room;\n    }\n\n    return grant;\n  }\n});\n/**\n * @constructor\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n */\n\n\nfunction SyncGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n}\n\n_.extend(SyncGrant.prototype, {\n  key: 'data_sync',\n  toPayload: function toPayload() {\n    var grant = {};\n\n    if (this.serviceSid) {\n      grant.service_sid = this.serviceSid;\n    }\n\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n\n    return grant;\n  }\n});\n/**\n * @constructor\n * @param {object} options - ...\n * @param {boolean} options.incomingAllow - Whether or not this endpoint is allowed to receive incoming calls as grants.identity\n * @param {string} options.outgoingApplicationSid - application sid to call when placing outgoing call\n * @param {object} options.outgoingApplicationParams - request params to pass to the application\n * @param {string} options.pushCredentialSid - Push Credential Sid to use when registering to receive incoming call notifications\n * @param {string} options.endpointId - Specify an endpoint identifier for this device, which will allow the developer\n *                 to direct calls to a specific endpoint when multiple devices are associated with a single identity\n */\n\n\nfunction VoiceGrant(options) {\n  options = options || {};\n  this.incomingAllow = options.incomingAllow;\n  this.outgoingApplicationSid = options.outgoingApplicationSid;\n  this.outgoingApplicationParams = options.outgoingApplicationParams;\n  this.pushCredentialSid = options.pushCredentialSid;\n  this.endpointId = options.endpointId;\n}\n\n_.extend(VoiceGrant.prototype, {\n  key: 'voice',\n  toPayload: function toPayload() {\n    var grant = {};\n\n    if (this.incomingAllow === true) {\n      grant.incoming = {\n        allow: true\n      };\n    }\n\n    if (this.outgoingApplicationSid) {\n      grant.outgoing = {};\n      grant.outgoing.application_sid = this.outgoingApplicationSid;\n\n      if (this.outgoingApplicationParams) {\n        grant.outgoing.params = this.outgoingApplicationParams;\n      }\n    }\n\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n\n    return grant;\n  }\n});\n/**\n * @constructor\n * @param {string} accountSid - The account's unique ID to which access is scoped\n * @param {string} keySid - The signing key's unique ID\n * @param {string} secret - The secret to sign the token with\n * @param {object} options - ...\n * @param {number} [options.ttl=3600] - Time to live in seconds\n * @param {string} [options.identity] - The identity of the first person\n * @param {number} [options.nbf] - Time from epoch in seconds for not before value\n */\n\n\nfunction AccessToken(accountSid, keySid, secret, options) {\n  if (!accountSid) {\n    throw new Error('accountSid is required');\n  }\n\n  if (!keySid) {\n    throw new Error('keySid is required');\n  }\n\n  if (!secret) {\n    throw new Error('secret is required');\n  }\n\n  options = options || {};\n  this.accountSid = accountSid;\n  this.keySid = keySid;\n  this.secret = secret;\n  this.ttl = options.ttl || 3600;\n  this.identity = options.identity;\n  this.nbf = options.nbf;\n  this.grants = [];\n} // Class level properties\n\n\nAccessToken.IpMessagingGrant = util.deprecate(IpMessagingGrant, 'IpMessagingGrant is deprecated, use ChatGrant instead.');\nAccessToken.ChatGrant = ChatGrant;\nAccessToken.VoiceGrant = VoiceGrant;\nAccessToken.SyncGrant = SyncGrant;\nAccessToken.VideoGrant = VideoGrant;\nAccessToken.ConversationsGrant = util.deprecate(ConversationsGrant, 'ConversationsGrant is deprecated, use VideoGrant instead.');\nAccessToken.TaskRouterGrant = TaskRouterGrant;\nAccessToken.DEFAULT_ALGORITHM = 'HS256';\nAccessToken.ALGORITHMS = ['HS256', 'HS384', 'HS512'];\n\n_.extend(AccessToken.prototype, {\n  addGrant: function addGrant(grant) {\n    this.grants.push(grant);\n  },\n  toJwt: function toJwt(algorithm) {\n    algorithm = algorithm || AccessToken.DEFAULT_ALGORITHM;\n\n    if (!_.includes(AccessToken.ALGORITHMS, algorithm)) {\n      throw new Error('Algorithm not supported. Allowed values are ' + AccessToken.ALGORITHMS.join(', '));\n    }\n\n    var grants = {};\n\n    if (_.isInteger(this.identity) || _.isString(this.identity)) {\n      grants.identity = String(this.identity);\n    }\n\n    _.each(this.grants, function (grant) {\n      grants[grant.key] = grant.toPayload();\n    });\n\n    var now = Math.floor(Date.now() / 1000);\n    var payload = {\n      jti: this.keySid + '-' + now,\n      grants: grants\n    };\n\n    if (_.isNumber(this.nbf)) {\n      payload.nbf = this.nbf;\n    }\n\n    return jwt.sign(payload, this.secret, {\n      header: {\n        cty: 'twilio-fpa;v=1',\n        typ: 'JWT'\n      },\n      algorithm: algorithm,\n      issuer: this.keySid,\n      subject: this.accountSid,\n      expiresIn: this.ttl\n    });\n  }\n});\n\nmodule.exports = AccessToken;","map":null,"metadata":{},"sourceType":"script"}