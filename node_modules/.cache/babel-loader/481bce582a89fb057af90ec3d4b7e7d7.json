{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar StreamMessageList;\nvar StreamMessagePage;\nvar StreamMessageInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the StreamMessageList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessageList\n *\n * @param {Twilio.Sync.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n * @param {string} streamSid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\nStreamMessageList = function StreamMessageList(version, serviceSid, streamSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function streamMessages\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncStreamContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessageContext}\n   */\n\n  /* jshint ignore:end */\n  function StreamMessageListInstance(sid) {\n    return StreamMessageListInstance.get(sid);\n  }\n\n  StreamMessageListInstance._version = version; // Path Solution\n\n  StreamMessageListInstance._solution = {\n    serviceSid: serviceSid,\n    streamSid: streamSid\n  };\n  StreamMessageListInstance._uri = \"/Services/\".concat(serviceSid, \"/Streams/\").concat(streamSid, \"/Messages\");\n  /* jshint ignore:start */\n\n  /**\n   * create a StreamMessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {object} opts.data -\n   *          A JSON string that represents an arbitrary, schema-less object that makes up the Stream Message body\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed StreamMessageInstance\n   */\n\n  /* jshint ignore:end */\n\n  StreamMessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.data)) {\n      throw new Error('Required parameter \"opts.data\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Data': serialize.object(_.get(opts, 'data'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new StreamMessageInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessageList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  StreamMessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  StreamMessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return StreamMessageListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StreamMessagePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessagePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {StreamMessageSolution} solution - Path solution\n *\n * @returns StreamMessagePage\n */\n\n/* jshint ignore:end */\n\n\nStreamMessagePage = function StreamMessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(StreamMessagePage.prototype, Page.prototype);\n\nStreamMessagePage.prototype.constructor = StreamMessagePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of StreamMessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessagePage#\n *\n * @param {StreamMessagePayload} payload - Payload response from the API\n *\n * @returns StreamMessageInstance\n */\n\n/* jshint ignore:end */\n\nStreamMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new StreamMessageInstance(this._version, payload, this._solution.serviceSid, this._solution.streamSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessagePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStreamMessagePage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nStreamMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StreamMessageContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessageInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {object} data - Stream Message body\n *\n * @param {V1} version - Version of the resource\n * @param {StreamMessagePayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n * @param {sid} streamSid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nStreamMessageInstance = function StreamMessageInstance(version, payload, serviceSid, streamSid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.data = payload.data; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    streamSid: streamSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncStreamContext.StreamMessageInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStreamMessageInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nStreamMessageInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  StreamMessageList: StreamMessageList,\n  StreamMessagePage: StreamMessagePage,\n  StreamMessageInstance: StreamMessageInstance\n};","map":null,"metadata":{},"sourceType":"script"}