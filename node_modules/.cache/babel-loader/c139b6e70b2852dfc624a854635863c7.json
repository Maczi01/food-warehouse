{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar RestException = require('./RestException');\n/**\n * @constructor\n *\n * @description Base version object\n *\n * @param {Domain} domain twilio domain\n * @param {Version} version api version\n */\n\n\nfunction Version(domain, version) {\n  this._domain = domain;\n  this._version = version;\n}\n/**\n * Generate absolute url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\n\n\nVersion.prototype.absoluteUrl = function (uri) {\n  return this._domain.absoluteUrl(this.relativeUrl(uri));\n};\n/**\n * Generate relative url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\n\n\nVersion.prototype.relativeUrl = function (uri) {\n  return _.trim(this._version, '/') + '/' + _.trim(uri, '/');\n};\n/**\n * Make a request against the domain\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to request response\n */\n\n\nVersion.prototype.request = function (opts) {\n  return this._domain.request(_.assign({}, opts, {\n    uri: this.relativeUrl(opts.uri)\n  }));\n};\n/**\n * Fetch a instance of a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to fetched result\n */\n\n\nVersion.prototype.fetch = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    if (typeof response.body === 'string') {\n      return JSON.parse(response.body);\n    }\n\n    return response.body;\n  });\n  return qResponse;\n};\n/**\n * Update a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to updated result\n */\n\n\nVersion.prototype.update = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    if (typeof response.body === 'string') {\n      return JSON.parse(response.body);\n    }\n\n    return response.body;\n  });\n  return qResponse;\n};\n/**\n * Delete a record\n * @throws {Error} If response returns a 5xx status\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to true if record was deleted\n */\n\n\nVersion.prototype.remove = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    return response.statusCode === 204;\n  });\n  return qResponse;\n};\n/**\n * Create a new record\n * @throws {Error} If response returns non 2xx or 201 status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to created record\n */\n\n\nVersion.prototype.create = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    if (typeof response.body === 'string') {\n      return JSON.parse(response.body);\n    }\n\n    return response.body;\n  });\n  return qResponse;\n};\n/**\n * Fetch a page of records\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to page of records\n */\n\n\nVersion.prototype.page = function (opts) {\n  return this.request(opts);\n};\n/**\n * Process limits for list requests\n *\n * @param {object} [opts] ...\n * @param {number} [opts.limit] The maximum number of items to fetch\n * @param {number} [opts.pageSize] The maximum number of items to return\n *                                  with every request\n */\n\n\nVersion.prototype.readLimits = function (opts) {\n  var limit = opts.limit;\n  var pageLimit;\n  var pageSize = opts.pageSize;\n\n  if (!_.isNil(limit) && (!_.isFinite(limit) || limit <= 0)) {\n    throw new TypeError('Parameter limit must be a positive integer');\n  }\n\n  if (!_.isNil(pageSize) && (!_.isFinite(pageSize) || pageSize <= 0)) {\n    throw new TypeError('Parameter pageSize must be a positive integer');\n  }\n\n  if (limit) {\n    if (!pageSize) {\n      pageSize = limit;\n    }\n\n    pageLimit = parseInt(Math.ceil(limit / parseFloat(pageSize)), 10);\n  }\n\n  return {\n    limit: limit,\n    pageSize: pageSize,\n    pageLimit: pageLimit\n  };\n};\n\nmodule.exports = Version;","map":null,"metadata":{},"sourceType":"script"}