{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var XMLCharacterData, XMLNode;\n  XMLNode = require('./XMLNode'); // Represents a character data node\n\n  module.exports = XMLCharacterData = function () {\n    var XMLCharacterData = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLCharacterData, _XMLNode);\n\n      // Initializes a new instance of `XMLCharacterData`\n      function XMLCharacterData(parent) {\n        var _this;\n\n        _classCallCheck(this, XMLCharacterData);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLCharacterData).call(this, parent));\n        _this.value = '';\n        return _this;\n      } // Creates and returns a deep clone of `this`\n\n\n      _createClass(XMLCharacterData, [{\n        key: \"clone\",\n        value: function clone() {\n          return Object.create(this);\n        } // DOM level 1 functions to be implemented later\n\n      }, {\n        key: \"substringData\",\n        value: function substringData(offset, count) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"appendData\",\n        value: function appendData(arg) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"insertData\",\n        value: function insertData(offset, arg) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"deleteData\",\n        value: function deleteData(offset, count) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"replaceData\",\n        value: function replaceData(offset, count, arg) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"isEqualNode\",\n        value: function isEqualNode(node) {\n          if (!_get(_getPrototypeOf(XMLCharacterData.prototype), \"isEqualNode\", this).call(this, node)) {\n            return false;\n          }\n\n          if (node.data !== this.data) {\n            return false;\n          }\n\n          return true;\n        }\n      }]);\n\n      return XMLCharacterData;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        return this.value = value || '';\n      }\n    });\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function get() {\n        return this.value.length;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        return this.value = value || '';\n      }\n    });\n    return XMLCharacterData;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}