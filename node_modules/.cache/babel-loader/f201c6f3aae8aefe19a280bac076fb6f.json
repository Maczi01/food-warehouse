{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n * @format\n */\n\n\nvar CONSTANTS = require('./YGEnums');\n\nvar Layout = function () {\n  function Layout(left, right, top, bottom, width, height) {\n    _classCallCheck(this, Layout);\n\n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(Layout, [{\n    key: 'fromJS',\n    value: function fromJS(expose) {\n      expose(this.left, this.right, this.top, this.bottom, this.width, this.height);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '<Layout#' + this.left + ':' + this.right + ';' + this.top + ':' + this.bottom + ';' + this.width + ':' + this.height + '>';\n    }\n  }]);\n\n  return Layout;\n}();\n\nvar Size = function () {\n  _createClass(Size, null, [{\n    key: 'fromJS',\n    value: function fromJS(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return new Size(width, height);\n    }\n  }]);\n\n  function Size(width, height) {\n    _classCallCheck(this, Size);\n\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(Size, [{\n    key: 'fromJS',\n    value: function fromJS(expose) {\n      expose(this.width, this.height);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '<Size#' + this.width + 'x' + this.height + '>';\n    }\n  }]);\n\n  return Size;\n}();\n\nvar Value = function () {\n  function Value(unit, value) {\n    _classCallCheck(this, Value);\n\n    this.unit = unit;\n    this.value = value;\n  }\n\n  _createClass(Value, [{\n    key: 'fromJS',\n    value: function fromJS(expose) {\n      expose(this.unit, this.value);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      switch (this.unit) {\n        case CONSTANTS.UNIT_POINT:\n          return String(this.value);\n\n        case CONSTANTS.UNIT_PERCENT:\n          return this.value + '%';\n\n        case CONSTANTS.UNIT_AUTO:\n          return 'auto';\n\n        default:\n          {\n            return this.value + '?';\n          }\n      }\n    }\n  }, {\n    key: 'valueOf',\n    value: function valueOf() {\n      return this.value;\n    }\n  }]);\n\n  return Value;\n}();\n\nmodule.exports = function (bind, lib) {\n  function patch(prototype, name, fn) {\n    var original = prototype[name];\n\n    prototype[name] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return fn.call.apply(fn, [this, original].concat(args));\n    };\n  }\n\n  var _arr = ['setPosition', 'setMargin', 'setFlexBasis', 'setWidth', 'setHeight', 'setMinWidth', 'setMinHeight', 'setMaxWidth', 'setMaxHeight', 'setPadding'];\n\n  var _loop = function _loop() {\n    var _methods;\n\n    var fnName = _arr[_i];\n    var methods = (_methods = {}, _defineProperty(_methods, CONSTANTS.UNIT_POINT, lib.Node.prototype[fnName]), _defineProperty(_methods, CONSTANTS.UNIT_PERCENT, lib.Node.prototype[fnName + 'Percent']), _defineProperty(_methods, CONSTANTS.UNIT_AUTO, lib.Node.prototype[fnName + 'Auto']), _methods);\n    patch(lib.Node.prototype, fnName, function (original) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      } // We patch all these functions to add support for the following calls:\n      // .setWidth(100) / .setWidth(\"100%\") / .setWidth(.getWidth()) / .setWidth(\"auto\")\n\n\n      var value = args.pop();\n      var unit = void 0,\n          asNumber = void 0;\n\n      if (value === 'auto') {\n        unit = CONSTANTS.UNIT_AUTO;\n        asNumber = undefined;\n      } else if (value instanceof Value) {\n        unit = value.unit;\n        asNumber = value.valueOf();\n      } else {\n        unit = typeof value === 'string' && value.endsWith('%') ? CONSTANTS.UNIT_PERCENT : CONSTANTS.UNIT_POINT;\n        asNumber = parseFloat(value);\n\n        if (!Number.isNaN(value) && Number.isNaN(asNumber)) {\n          throw new Error('Invalid value ' + value + ' for ' + fnName);\n        }\n      }\n\n      if (!methods[unit]) throw new Error('Failed to execute \"' + fnName + '\": Unsupported unit \\'' + value + '\\'');\n\n      if (asNumber !== undefined) {\n        var _methods$unit;\n\n        return (_methods$unit = methods[unit]).call.apply(_methods$unit, [this].concat(args, [asNumber]));\n      } else {\n        var _methods$unit2;\n\n        return (_methods$unit2 = methods[unit]).call.apply(_methods$unit2, [this].concat(args));\n      }\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n\n  patch(lib.Config.prototype, 'free', function () {\n    // Since we handle the memory allocation ourselves (via lib.Config.create),\n    // we also need to handle the deallocation\n    lib.Config.destroy(this);\n  });\n  patch(lib.Node, 'create', function (_, config) {\n    // We decide the constructor we want to call depending on the parameters\n    return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();\n  });\n  patch(lib.Node.prototype, 'free', function () {\n    // Since we handle the memory allocation ourselves (via lib.Node.create),\n    // we also need to handle the deallocation\n    lib.Node.destroy(this);\n  });\n  patch(lib.Node.prototype, 'freeRecursive', function () {\n    for (var t = 0, T = this.getChildCount(); t < T; ++t) {\n      this.getChild(0).freeRecursive();\n    }\n\n    this.free();\n  });\n  patch(lib.Node.prototype, 'setMeasureFunc', function (original, measureFunc) {\n    // This patch is just a convenience patch, since it helps write more\n    // idiomatic source code (such as .setMeasureFunc(null))\n    // We also automatically convert the return value of the measureFunc\n    // to a Size object, so that we can return anything that has .width and\n    // .height properties\n    if (measureFunc) {\n      return original.call(this, function () {\n        return Size.fromJS(measureFunc.apply(undefined, arguments));\n      });\n    } else {\n      return this.unsetMeasureFunc();\n    }\n  });\n  patch(lib.Node.prototype, 'calculateLayout', function (original) {\n    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;\n    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;\n    var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : CONSTANTS.DIRECTION_LTR; // Just a small patch to add support for the function default parameters\n\n    return original.call(this, width, height, direction);\n  });\n  return _extends({\n    Config: lib.Config,\n    Node: lib.Node,\n    Layout: bind('Layout', Layout),\n    Size: bind('Size', Size),\n    Value: bind('Value', Value),\n    getInstanceCount: function getInstanceCount() {\n      return lib.getInstanceCount.apply(lib, arguments);\n    }\n  }, CONSTANTS);\n};","map":null,"metadata":{},"sourceType":"script"}