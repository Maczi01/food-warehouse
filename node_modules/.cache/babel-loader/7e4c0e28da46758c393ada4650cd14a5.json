{"ast":null,"code":"// Convert an arc to a sequence of cubic bézier curves\n//\n'use strict';\n\nvar TAU = Math.PI * 2;\n/* eslint-disable space-infix-ops */\n// Calculate an angle between two unit vectors\n//\n// Since we measure angle between radii of circular arcs,\n// we can use simplified math (without length normalization)\n//\n\nfunction unit_vector_angle(ux, uy, vx, vy) {\n  var sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  var dot = ux * vx + uy * vy; // Add this to work with arbitrary vectors:\n  // dot /= Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n  // rounding errors, e.g. -1.0000000000000002 can screw up this\n\n  if (dot > 1.0) {\n    dot = 1.0;\n  }\n\n  if (dot < -1.0) {\n    dot = -1.0;\n  }\n\n  return sign * Math.acos(dot);\n} // Convert from endpoint to center parameterization,\n// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n//\n// Return [cx, cy, theta1, delta_theta]\n//\n\n\nfunction get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {\n  // Step 1.\n  //\n  // Moving an ellipse so origin will be the middlepoint between our two\n  // points. After that, rotate it to line up ellipse axes with coordinate\n  // axes.\n  //\n  var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;\n  var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;\n  var rx_sq = rx * rx;\n  var ry_sq = ry * ry;\n  var x1p_sq = x1p * x1p;\n  var y1p_sq = y1p * y1p; // Step 2.\n  //\n  // Compute coordinates of the centre of this ellipse (cx', cy')\n  // in the new coordinate system.\n  //\n\n  var radicant = rx_sq * ry_sq - rx_sq * y1p_sq - ry_sq * x1p_sq;\n\n  if (radicant < 0) {\n    // due to rounding errors it might be e.g. -1.3877787807814457e-17\n    radicant = 0;\n  }\n\n  radicant /= rx_sq * y1p_sq + ry_sq * x1p_sq;\n  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);\n  var cxp = radicant * rx / ry * y1p;\n  var cyp = radicant * -ry / rx * x1p; // Step 3.\n  //\n  // Transform back to get centre coordinates (cx, cy) in the original\n  // coordinate system.\n  //\n\n  var cx = cos_phi * cxp - sin_phi * cyp + (x1 + x2) / 2;\n  var cy = sin_phi * cxp + cos_phi * cyp + (y1 + y2) / 2; // Step 4.\n  //\n  // Compute angles (theta1, delta_theta).\n  //\n\n  var v1x = (x1p - cxp) / rx;\n  var v1y = (y1p - cyp) / ry;\n  var v2x = (-x1p - cxp) / rx;\n  var v2y = (-y1p - cyp) / ry;\n  var theta1 = unit_vector_angle(1, 0, v1x, v1y);\n  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);\n\n  if (fs === 0 && delta_theta > 0) {\n    delta_theta -= TAU;\n  }\n\n  if (fs === 1 && delta_theta < 0) {\n    delta_theta += TAU;\n  }\n\n  return [cx, cy, theta1, delta_theta];\n} //\n// Approximate one unit arc segment with bézier curves,\n// see http://math.stackexchange.com/questions/873224\n//\n\n\nfunction approximate_unit_arc(theta1, delta_theta) {\n  var alpha = 4 / 3 * Math.tan(delta_theta / 4);\n  var x1 = Math.cos(theta1);\n  var y1 = Math.sin(theta1);\n  var x2 = Math.cos(theta1 + delta_theta);\n  var y2 = Math.sin(theta1 + delta_theta);\n  return [x1, y1, x1 - y1 * alpha, y1 + x1 * alpha, x2 + y2 * alpha, y2 - x2 * alpha, x2, y2];\n}\n\nmodule.exports = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {\n  var sin_phi = Math.sin(phi * TAU / 360);\n  var cos_phi = Math.cos(phi * TAU / 360); // Make sure radii are valid\n  //\n\n  var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;\n  var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;\n\n  if (x1p === 0 && y1p === 0) {\n    // we're asked to draw line to itself\n    return [];\n  }\n\n  if (rx === 0 || ry === 0) {\n    // one of the radii is zero\n    return [];\n  } // Compensate out-of-range radii\n  //\n\n\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  var lambda = x1p * x1p / (rx * rx) + y1p * y1p / (ry * ry);\n\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  } // Get center parameters (cx, cy, theta1, delta_theta)\n  //\n\n\n  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);\n  var result = [];\n  var theta1 = cc[2];\n  var delta_theta = cc[3]; // Split an arc to multiple segments, so each segment\n  // will be less than τ/4 (= 90°)\n  //\n\n  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);\n  delta_theta /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    result.push(approximate_unit_arc(theta1, delta_theta));\n    theta1 += delta_theta;\n  } // We have a bezier approximation of a unit circle,\n  // now need to transform back to the original ellipse\n  //\n\n\n  return result.map(function (curve) {\n    for (var i = 0; i < curve.length; i += 2) {\n      var x = curve[i + 0];\n      var y = curve[i + 1]; // scale\n\n      x *= rx;\n      y *= ry; // rotate\n\n      var xp = cos_phi * x - sin_phi * y;\n      var yp = sin_phi * x + cos_phi * y; // translate\n\n      curve[i + 0] = xp + cc[0];\n      curve[i + 1] = yp + cc[1];\n    }\n\n    return curve;\n  });\n};","map":null,"metadata":{},"sourceType":"script"}