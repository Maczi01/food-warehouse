{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  // Copies all enumerable own properties from `sources` to `target`\n  var assign,\n      getValue,\n      isArray,\n      isEmpty,\n      isFunction,\n      isObject,\n      isPlainObject,\n      hasProp = {}.hasOwnProperty;\n\n  assign = function assign(target) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    var i, key, len, source;\n\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n\n    return target;\n  }; // Determines if `val` is a Function object\n\n\n  isFunction = function isFunction(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  }; // Determines if `val` is an Object\n\n\n  isObject = function isObject(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  }; // Determines if `val` is an Array\n\n\n  isArray = function isArray(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  }; // Determines if `val` is an empty Array or an Object with no own properties\n\n\n  isEmpty = function isEmpty(val) {\n    var key;\n\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n\n      return true;\n    }\n  }; // Determines if `val` is a plain Object\n\n\n  isPlainObject = function isPlainObject(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n  }; // Gets the primitive value of an object\n\n\n  getValue = function getValue(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n  module.exports.isFunction = isFunction;\n  module.exports.isObject = isObject;\n  module.exports.isArray = isArray;\n  module.exports.isEmpty = isEmpty;\n  module.exports.isPlainObject = isPlainObject;\n  module.exports.getValue = getValue;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}