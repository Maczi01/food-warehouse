{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar ActivityList = require('./workspace/activity').ActivityList;\n\nvar EventList = require('./workspace/event').EventList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar TaskChannelList = require('./workspace/taskChannel').TaskChannelList;\n\nvar TaskList = require('./workspace/task').TaskList;\n\nvar TaskQueueList = require('./workspace/taskQueue').TaskQueueList;\n\nvar WorkerList = require('./workspace/worker').WorkerList;\n\nvar WorkflowList = require('./workspace/workflow').WorkflowList;\n\nvar WorkspaceCumulativeStatisticsList = require('./workspace/workspaceCumulativeStatistics').WorkspaceCumulativeStatisticsList;\n\nvar WorkspaceRealTimeStatisticsList = require('./workspace/workspaceRealTimeStatistics').WorkspaceRealTimeStatisticsList;\n\nvar WorkspaceStatisticsList = require('./workspace/workspaceStatistics').WorkspaceStatisticsList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkspaceList;\nvar WorkspacePage;\nvar WorkspaceInstance;\nvar WorkspaceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkspaceList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nWorkspaceList = function WorkspaceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function workspaces\n   * @memberof Twilio.Taskrouter.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkspaceListInstance(sid) {\n    return WorkspaceListInstance.get(sid);\n  }\n\n  WorkspaceListInstance._version = version; // Path Solution\n\n  WorkspaceListInstance._solution = {};\n  WorkspaceListInstance._uri = \"/Workspaces\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams WorkspaceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workspace resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  WorkspaceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists WorkspaceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workspace resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkspaceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of WorkspaceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workspace resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkspaceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkspacePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of WorkspaceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkspaceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkspacePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a WorkspaceInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the Workspace resource\n   * @param {string} [opts.eventCallbackUrl] -\n   *          The URL we should call when an event occurs\n   * @param {string} [opts.eventsFilter] -\n   *          The list of Workspace events for which to call event_callback_url\n   * @param {boolean} [opts.multiTaskEnabled] - Whether multi-tasking is enabled\n   * @param {string} [opts.template] - An available template name\n   * @param {workspace.queue_order} [opts.prioritizeQueueOrder] -\n   *          The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkspaceInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkspaceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EventCallbackUrl': _.get(opts, 'eventCallbackUrl'),\n      'EventsFilter': _.get(opts, 'eventsFilter'),\n      'MultiTaskEnabled': serialize.bool(_.get(opts, 'multiTaskEnabled')),\n      'Template': _.get(opts, 'template'),\n      'PrioritizeQueueOrder': _.get(opts, 'prioritizeQueueOrder')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkspaceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a workspace\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkspaceListInstance.get = function get(sid) {\n    return new WorkspaceContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkspaceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkspaceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkspaceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkspacePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspacePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkspaceSolution} solution - Path solution\n *\n * @returns WorkspacePage\n */\n\n/* jshint ignore:end */\n\n\nWorkspacePage = function WorkspacePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkspacePage.prototype, Page.prototype);\n\nWorkspacePage.prototype.constructor = WorkspacePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkspaceInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspacePage#\n *\n * @param {WorkspacePayload} payload - Payload response from the API\n *\n * @returns WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\nWorkspacePage.prototype.getInstance = function getInstance(payload) {\n  return new WorkspaceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspacePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkspacePage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkspacePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkspaceContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} defaultActivityName - The name of the default activity\n * @property {string} defaultActivitySid -\n *          The SID of the Activity that will be used when new Workers are created in the Workspace\n * @property {string} eventCallbackUrl - The URL we call when an event occurs\n * @property {string} eventsFilter -\n *          The list of Workspace events for which to call event_callback_url\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Workspace resource\n * @property {boolean} multiTaskEnabled - Whether multi-tasking is enabled\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} timeoutActivityName - The name of the timeout activity\n * @property {string} timeoutActivitySid -\n *          The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response\n * @property {workspace.queue_order} prioritizeQueueOrder -\n *          The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues\n * @property {string} url - The absolute URL of the Workspace resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkspacePayload} payload - The instance payload\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance = function WorkspaceInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.defaultActivityName = payload.default_activity_name; // jshint ignore:line\n\n  this.defaultActivitySid = payload.default_activity_sid; // jshint ignore:line\n\n  this.eventCallbackUrl = payload.event_callback_url; // jshint ignore:line\n\n  this.eventsFilter = payload.events_filter; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.multiTaskEnabled = payload.multi_task_enabled; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.timeoutActivityName = payload.timeout_activity_name; // jshint ignore:line\n\n  this.timeoutActivitySid = payload.timeout_activity_sid; // jshint ignore:line\n\n  this.prioritizeQueueOrder = payload.prioritize_queue_order; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(WorkspaceInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WorkspaceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkspaceInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\nWorkspaceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkspaceInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.defaultActivitySid] -\n *          The SID of the Activity that will be used when new Workers are created in the Workspace\n * @param {string} [opts.eventCallbackUrl] -\n *          The URL we should call when an event occurs\n * @param {string} [opts.eventsFilter] -\n *          The list of Workspace events for which to call event_callback_url\n * @param {string} [opts.friendlyName] -\n *          A string to describe the Workspace resource\n * @param {boolean} [opts.multiTaskEnabled] - Whether multi-tasking is enabled\n * @param {string} [opts.timeoutActivitySid] -\n *          The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response\n * @param {workspace.queue_order} [opts.prioritizeQueueOrder] -\n *          The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkspaceInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the activities\n *\n * @function activities\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.ActivityList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.activities = function activities() {\n  return this._proxy.activities;\n};\n/* jshint ignore:start */\n\n/**\n * Access the events\n *\n * @function events\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.events = function events() {\n  return this._proxy.events;\n};\n/* jshint ignore:start */\n\n/**\n * Access the tasks\n *\n * @function tasks\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.tasks = function tasks() {\n  return this._proxy.tasks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the taskQueues\n *\n * @function taskQueues\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.taskQueues = function taskQueues() {\n  return this._proxy.taskQueues;\n};\n/* jshint ignore:start */\n\n/**\n * Access the workers\n *\n * @function workers\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.workers = function workers() {\n  return this._proxy.workers;\n};\n/* jshint ignore:start */\n\n/**\n * Access the workflows\n *\n * @function workflows\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.workflows = function workflows() {\n  return this._proxy.workflows;\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkspaceStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkspaceRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkspaceCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the taskChannels\n *\n * @function taskChannels\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskChannelList}\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.taskChannels = function taskChannels() {\n  return this._proxy.taskChannels;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkspaceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkspaceContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.ActivityList} activities -\n *          activities resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.EventList} events -\n *          events resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskList} tasks -\n *          tasks resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList} taskQueues -\n *          taskQueues resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerList} workers -\n *          workers resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList} workflows -\n *          workflows resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkspaceStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkspaceRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkspaceCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskChannelList} taskChannels -\n *          taskChannels resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceContext = function WorkspaceContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Workspaces/\".concat(sid); // Dependents\n\n  this._activities = undefined;\n  this._events = undefined;\n  this._tasks = undefined;\n  this._taskQueues = undefined;\n  this._workers = undefined;\n  this._workflows = undefined;\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n  this._taskChannels = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkspaceInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkspaceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkspaceInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.defaultActivitySid] -\n *          The SID of the Activity that will be used when new Workers are created in the Workspace\n * @param {string} [opts.eventCallbackUrl] -\n *          The URL we should call when an event occurs\n * @param {string} [opts.eventsFilter] -\n *          The list of Workspace events for which to call event_callback_url\n * @param {string} [opts.friendlyName] -\n *          A string to describe the Workspace resource\n * @param {boolean} [opts.multiTaskEnabled] - Whether multi-tasking is enabled\n * @param {string} [opts.timeoutActivitySid] -\n *          The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response\n * @param {workspace.queue_order} [opts.prioritizeQueueOrder] -\n *          The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'DefaultActivitySid': _.get(opts, 'defaultActivitySid'),\n    'EventCallbackUrl': _.get(opts, 'eventCallbackUrl'),\n    'EventsFilter': _.get(opts, 'eventsFilter'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'MultiTaskEnabled': serialize.bool(_.get(opts, 'multiTaskEnabled')),\n    'TimeoutActivitySid': _.get(opts, 'timeoutActivitySid'),\n    'PrioritizeQueueOrder': _.get(opts, 'prioritizeQueueOrder')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkspaceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkspaceInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkspaceInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkspaceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkspaceContext.prototype, 'activities', {\n  get: function get() {\n    if (!this._activities) {\n      this._activities = new ActivityList(this._version, this._solution.sid);\n    }\n\n    return this._activities;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'events', {\n  get: function get() {\n    if (!this._events) {\n      this._events = new EventList(this._version, this._solution.sid);\n    }\n\n    return this._events;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'tasks', {\n  get: function get() {\n    if (!this._tasks) {\n      this._tasks = new TaskList(this._version, this._solution.sid);\n    }\n\n    return this._tasks;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'taskQueues', {\n  get: function get() {\n    if (!this._taskQueues) {\n      this._taskQueues = new TaskQueueList(this._version, this._solution.sid);\n    }\n\n    return this._taskQueues;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'workers', {\n  get: function get() {\n    if (!this._workers) {\n      this._workers = new WorkerList(this._version, this._solution.sid);\n    }\n\n    return this._workers;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'workflows', {\n  get: function get() {\n    if (!this._workflows) {\n      this._workflows = new WorkflowList(this._version, this._solution.sid);\n    }\n\n    return this._workflows;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'statistics', {\n  get: function get() {\n    if (!this._statistics) {\n      this._statistics = new WorkspaceStatisticsList(this._version, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'realTimeStatistics', {\n  get: function get() {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkspaceRealTimeStatisticsList(this._version, this._solution.sid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'cumulativeStatistics', {\n  get: function get() {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkspaceCumulativeStatisticsList(this._version, this._solution.sid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\nObject.defineProperty(WorkspaceContext.prototype, 'taskChannels', {\n  get: function get() {\n    if (!this._taskChannels) {\n      this._taskChannels = new TaskChannelList(this._version, this._solution.sid);\n    }\n\n    return this._taskChannels;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nWorkspaceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkspaceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkspaceList: WorkspaceList,\n  WorkspacePage: WorkspacePage,\n  WorkspaceInstance: WorkspaceInstance,\n  WorkspaceContext: WorkspaceContext\n};","map":null,"metadata":{},"sourceType":"script"}