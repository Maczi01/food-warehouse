{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DefaultsList = require('./assistant/defaults').DefaultsList;\n\nvar DialogueList = require('./assistant/dialogue').DialogueList;\n\nvar ExportAssistantList = require('./assistant/exportAssistant').ExportAssistantList;\n\nvar FieldTypeList = require('./assistant/fieldType').FieldTypeList;\n\nvar ModelBuildList = require('./assistant/modelBuild').ModelBuildList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar QueryList = require('./assistant/query').QueryList;\n\nvar StyleSheetList = require('./assistant/styleSheet').StyleSheetList;\n\nvar TaskList = require('./assistant/task').TaskList;\n\nvar WebhookList = require('./assistant/webhook').WebhookList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar AssistantList;\nvar AssistantPage;\nvar AssistantInstance;\nvar AssistantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nAssistantList = function AssistantList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function assistants\n   * @memberof Twilio.Autopilot.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n\n  /* jshint ignore:end */\n  function AssistantListInstance(sid) {\n    return AssistantListInstance.get(sid);\n  }\n\n  AssistantListInstance._version = version; // Path Solution\n\n  AssistantListInstance._solution = {};\n  AssistantListInstance._uri = \"/Assistants\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams AssistantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AssistantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AssistantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a AssistantInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.logQueries] -\n   *          Whether queries should be logged and kept after training\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the new resource\n   * @param {string} [opts.callbackUrl] - Reserved\n   * @param {string} [opts.callbackEvents] - Reserved\n   * @param {object} [opts.styleSheet] -\n   *          A JSON string that defines the Assistant's style sheet\n   * @param {object} [opts.defaults] -\n   *          A JSON object that defines the Assistant's default tasks for various scenarios\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AssistantInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackEvents': _.get(opts, 'callbackEvents'),\n      'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n      'Defaults': serialize.object(_.get(opts, 'defaults'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a assistant\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.get = function get(sid) {\n    return new AssistantContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AssistantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AssistantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AssistantSolution} solution - Path solution\n *\n * @returns AssistantPage\n */\n\n/* jshint ignore:end */\n\n\nAssistantPage = function AssistantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AssistantPage.prototype, Page.prototype);\n\nAssistantPage.prototype.constructor = AssistantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AssistantInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @param {AssistantPayload} payload - Payload response from the API\n *\n * @returns AssistantInstance\n */\n\n/* jshint ignore:end */\n\nAssistantPage.prototype.getInstance = function getInstance(payload) {\n  return new AssistantInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAssistantPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAssistantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} latestModelBuildSid - Reserved\n * @property {string} links -\n *          A list of the URLs of the Assistant's related resources\n * @property {boolean} logQueries -\n *          Whether queries should be logged and kept after training\n * @property {string} developmentStage -\n *          A string describing the state of the assistant.\n * @property {boolean} needsModelBuild - Whether model needs to be rebuilt\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} url - The absolute URL of the Assistant resource\n * @property {string} callbackUrl - Reserved\n * @property {string} callbackEvents - Reserved\n *\n * @param {V1} version - Version of the resource\n * @param {AssistantPayload} payload - The instance payload\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance = function AssistantInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.latestModelBuildSid = payload.latest_model_build_sid; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.logQueries = payload.log_queries; // jshint ignore:line\n\n  this.developmentStage = payload.development_stage; // jshint ignore:line\n\n  this.needsModelBuild = payload.needs_model_build; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n\n  this.callbackEvents = payload.callback_events; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AssistantInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new AssistantContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\nAssistantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {boolean} [opts.logQueries] -\n *          Whether queries should be logged and kept after training\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackUrl] - Reserved\n * @param {string} [opts.callbackEvents] - Reserved\n * @param {object} [opts.styleSheet] -\n *          A JSON string that defines the Assistant's style sheet\n * @param {object} [opts.defaults] -\n *          A JSON object that defines the Assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n * @param {string} [opts.developmentStage] -\n *          A string describing the state of the assistant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the fieldTypes\n *\n * @function fieldTypes\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.fieldTypes = function fieldTypes() {\n  return this._proxy.fieldTypes;\n};\n/* jshint ignore:start */\n\n/**\n * Access the tasks\n *\n * @function tasks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.tasks = function tasks() {\n  return this._proxy.tasks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the modelBuilds\n *\n * @function modelBuilds\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.ModelBuildList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.modelBuilds = function modelBuilds() {\n  return this._proxy.modelBuilds;\n};\n/* jshint ignore:start */\n\n/**\n * Access the queries\n *\n * @function queries\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.QueryList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.queries = function queries() {\n  return this._proxy.queries;\n};\n/* jshint ignore:start */\n\n/**\n * Access the styleSheet\n *\n * @function styleSheet\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.StyleSheetList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.styleSheet = function styleSheet() {\n  return this._proxy.styleSheet;\n};\n/* jshint ignore:start */\n\n/**\n * Access the defaults\n *\n * @function defaults\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DefaultsList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.defaults = function defaults() {\n  return this._proxy.defaults;\n};\n/* jshint ignore:start */\n\n/**\n * Access the dialogues\n *\n * @function dialogues\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DialogueList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.dialogues = function dialogues() {\n  return this._proxy.dialogues;\n};\n/* jshint ignore:start */\n\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.WebhookList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the exportAssistant\n *\n * @function exportAssistant\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.ExportAssistantList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.exportAssistant = function exportAssistant() {\n  return this._proxy.exportAssistant;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAssistantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.FieldTypeList} fieldTypes -\n *          fieldTypes resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskList} tasks - tasks resource\n * @property {Twilio.Autopilot.V1.AssistantContext.ModelBuildList} modelBuilds -\n *          modelBuilds resource\n * @property {Twilio.Autopilot.V1.AssistantContext.QueryList} queries -\n *          queries resource\n * @property {Twilio.Autopilot.V1.AssistantContext.StyleSheetList} styleSheet -\n *          styleSheet resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DefaultsList} defaults -\n *          defaults resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DialogueList} dialogues -\n *          dialogues resource\n * @property {Twilio.Autopilot.V1.AssistantContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Autopilot.V1.AssistantContext.ExportAssistantList} exportAssistant -\n *          exportAssistant resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext = function AssistantContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Assistants/\".concat(sid); // Dependents\n\n  this._fieldTypes = undefined;\n  this._tasks = undefined;\n  this._modelBuilds = undefined;\n  this._queries = undefined;\n  this._styleSheet = undefined;\n  this._defaults = undefined;\n  this._dialogues = undefined;\n  this._webhooks = undefined;\n  this._exportAssistant = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {boolean} [opts.logQueries] -\n *          Whether queries should be logged and kept after training\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackUrl] - Reserved\n * @param {string} [opts.callbackEvents] - Reserved\n * @param {object} [opts.styleSheet] -\n *          A JSON string that defines the Assistant's style sheet\n * @param {object} [opts.defaults] -\n *          A JSON object that defines the Assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n * @param {string} [opts.developmentStage] -\n *          A string describing the state of the assistant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'CallbackEvents': _.get(opts, 'callbackEvents'),\n    'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n    'Defaults': serialize.object(_.get(opts, 'defaults')),\n    'DevelopmentStage': _.get(opts, 'developmentStage')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AssistantContext.prototype, 'fieldTypes', {\n  get: function get() {\n    if (!this._fieldTypes) {\n      this._fieldTypes = new FieldTypeList(this._version, this._solution.sid);\n    }\n\n    return this._fieldTypes;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'tasks', {\n  get: function get() {\n    if (!this._tasks) {\n      this._tasks = new TaskList(this._version, this._solution.sid);\n    }\n\n    return this._tasks;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'modelBuilds', {\n  get: function get() {\n    if (!this._modelBuilds) {\n      this._modelBuilds = new ModelBuildList(this._version, this._solution.sid);\n    }\n\n    return this._modelBuilds;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'queries', {\n  get: function get() {\n    if (!this._queries) {\n      this._queries = new QueryList(this._version, this._solution.sid);\n    }\n\n    return this._queries;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'styleSheet', {\n  get: function get() {\n    if (!this._styleSheet) {\n      this._styleSheet = new StyleSheetList(this._version, this._solution.sid);\n    }\n\n    return this._styleSheet;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'defaults', {\n  get: function get() {\n    if (!this._defaults) {\n      this._defaults = new DefaultsList(this._version, this._solution.sid);\n    }\n\n    return this._defaults;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'dialogues', {\n  get: function get() {\n    if (!this._dialogues) {\n      this._dialogues = new DialogueList(this._version, this._solution.sid);\n    }\n\n    return this._dialogues;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'webhooks', {\n  get: function get() {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n\n    return this._webhooks;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'exportAssistant', {\n  get: function get() {\n    if (!this._exportAssistant) {\n      this._exportAssistant = new ExportAssistantList(this._version, this._solution.sid);\n    }\n\n    return this._exportAssistant;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAssistantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAssistantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AssistantList: AssistantList,\n  AssistantPage: AssistantPage,\n  AssistantInstance: AssistantInstance,\n  AssistantContext: AssistantContext\n};","map":null,"metadata":{},"sourceType":"script"}