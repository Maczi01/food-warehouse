{"ast":null,"code":"// In our case, there's only one dependency\nvar toRgb = require('hsl-to-rgb-for-reals'); // Typically all dependencies should be declared at the top of the file.\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\n\n\nfunction max(val, n) {\n  return val > n ? n : val;\n}\n\nfunction min(val, n) {\n  return val < n ? n : val;\n}\n\nfunction cycle(val) {\n  // for safety:\n  val = max(val, 1e7);\n  val = min(val, -1e7); // cycle value:\n\n  while (val < 0) {\n    val += 360;\n  }\n\n  while (val > 359) {\n    val -= 360;\n  }\n\n  return val;\n} // Now for the main piece, the `hsl` function:\n\n\nfunction hsl(hue, saturation, luminosity) {\n  // resolve degrees to 0 - 359 range\n  hue = cycle(hue); // enforce constraints\n\n  saturation = min(max(saturation, 100), 0);\n  luminosity = min(max(luminosity, 100), 0); // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n\n  saturation /= 100;\n  luminosity /= 100; // let hsl-to-rgb-for-reals do the hard work\n\n  var rgb = toRgb(hue, saturation, luminosity); // convert each value in the returned RGB array\n  // to a 2 character hex value, join the array into\n  // a string, prefixed with a hash\n\n  return '#' + rgb.map(function (n) {\n    return (256 + n).toString(16).substr(-2);\n  }).join('');\n} // In order to make our code into a bona fide module we have to export it:\n\n\nmodule.exports = hsl;","map":null,"metadata":{},"sourceType":"script"}