{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar ChallengeList = require('./factor/challenge').ChallengeList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FactorList;\nvar FactorPage;\nvar FactorInstance;\nvar FactorContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FactorList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Authy.V1.ServiceContext.EntityContext.FactorList\n *\n * @param {Twilio.Authy.V1} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique identity of the Entity\n */\n\n/* jshint ignore:end */\n\nFactorList = function FactorList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n\n  /**\n   * @function factors\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext}\n   */\n\n  /* jshint ignore:end */\n  function FactorListInstance(sid) {\n    return FactorListInstance.get(sid);\n  }\n\n  FactorListInstance._version = version; // Path Solution\n\n  FactorListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n  FactorListInstance._uri = \"/Services/\".concat(serviceSid, \"/Entities/\").concat(identity, \"/Factors\");\n  /* jshint ignore:start */\n\n  /**\n   * create a FactorInstance\n   *\n   * @function create\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.binding - A unique binding for this Factor as a json string\n   * @param {string} opts.friendlyName - The friendly name of this Factor\n   * @param {factor.factor_types} opts.factorType - The Type of this Factor\n   * @param {string} opts.config - The config for this Factor as a json string\n   * @param {string} [opts.twilioAuthySandboxMode] -\n   *          The Twilio-Authy-Sandbox-Mode HTTP request header\n   * @param {string} [opts.authorization] - The Authorization HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FactorInstance\n   */\n\n  /* jshint ignore:end */\n\n  FactorListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.binding)) {\n      throw new Error('Required parameter \"opts.binding\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    if (_.isUndefined(opts.factorType)) {\n      throw new Error('Required parameter \"opts.factorType\" missing.');\n    }\n\n    if (_.isUndefined(opts.config)) {\n      throw new Error('Required parameter \"opts.config\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Binding': _.get(opts, 'binding'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'FactorType': _.get(opts, 'factorType'),\n      'Config': _.get(opts, 'config')\n    });\n    var headers = values.of({\n      'Twilio-Authy-Sandbox-Mode': _.get(opts, 'twilioAuthySandboxMode'),\n      'Authorization': _.get(opts, 'authorization')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams FactorInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.twilioAuthySandboxMode] -\n   *          The Twilio-Authy-Sandbox-Mode HTTP request header\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  FactorListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FactorInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.twilioAuthySandboxMode] -\n   *          The Twilio-Authy-Sandbox-Mode HTTP request header\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FactorListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FactorInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.twilioAuthySandboxMode] -\n   *          The Twilio-Authy-Sandbox-Mode HTTP request header\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FactorListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var headers = values.of({\n      'Twilio-Authy-Sandbox-Mode': _.get(opts, 'twilioAuthySandboxMode')\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data,\n      headers: headers\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FactorPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FactorInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FactorListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FactorPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a factor\n   *\n   * @function get\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Factor.\n   *\n   * @returns {Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FactorListInstance.get = function get(sid) {\n    return new FactorContext(this._version, this._solution.serviceSid, this._solution.identity, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FactorListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FactorListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FactorListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FactorPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Authy.V1.ServiceContext.EntityContext.FactorPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FactorSolution} solution - Path solution\n *\n * @returns FactorPage\n */\n\n/* jshint ignore:end */\n\n\nFactorPage = function FactorPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FactorPage.prototype, Page.prototype);\n\nFactorPage.prototype.constructor = FactorPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FactorInstance\n *\n * @function getInstance\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorPage#\n *\n * @param {FactorPayload} payload - Payload response from the API\n *\n * @returns FactorInstance\n */\n\n/* jshint ignore:end */\n\nFactorPage.prototype.getInstance = function getInstance(payload) {\n  return new FactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFactorPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFactorPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FactorContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Authy.V1.ServiceContext.EntityContext.FactorInstance\n *\n * @property {string} sid - A string that uniquely identifies this Factor.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique identity of the Entity\n * @property {Date} dateCreated - The date this Factor was created\n * @property {Date} dateUpdated - The date this Factor was updated\n * @property {string} friendlyName - A human readable description of this resource.\n * @property {factor.factor_statuses} status - The Status of this Factor\n * @property {factor.factor_types} factorType - The Type of this Factor\n * @property {object} config - The config\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {FactorPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique identity of the Entity\n * @param {sid} sid - A string that uniquely identifies this Factor.\n */\n\n/* jshint ignore:end */\n\n\nFactorInstance = function FactorInstance(version, payload, serviceSid, identity, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.factorType = payload.factor_type; // jshint ignore:line\n\n  this.config = payload.config; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FactorInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FactorContext(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a FactorInstance\n *\n * @function remove\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.twilioAuthySandboxMode] -\n *          The Twilio-Authy-Sandbox-Mode HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FactorInstance\n */\n\n/* jshint ignore:end */\n\nFactorInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FactorInstance\n *\n * @function fetch\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.twilioAuthySandboxMode] -\n *          The Twilio-Authy-Sandbox-Mode HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FactorInstance\n */\n\n/* jshint ignore:end */\n\n\nFactorInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a FactorInstance\n *\n * @function update\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] -\n *          Optional payload to verify the Factor for the first time\n * @param {string} [opts.friendlyName] - The friendly name of this Factor\n * @param {string} [opts.config] - The config for this Factor as a json string\n * @param {string} [opts.twilioAuthySandboxMode] -\n *          The Twilio-Authy-Sandbox-Mode HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FactorInstance\n */\n\n/* jshint ignore:end */\n\n\nFactorInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the challenges\n *\n * @function challenges\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorInstance#\n *\n * @returns {Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext.ChallengeList}\n */\n\n/* jshint ignore:end */\n\n\nFactorInstance.prototype.challenges = function challenges() {\n  return this._proxy.challenges;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFactorInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFactorInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FactorContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext\n *\n * @property {Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext.ChallengeList} challenges -\n *          challenges resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique identity of the Entity\n * @param {sid} sid - A string that uniquely identifies this Factor.\n */\n\n/* jshint ignore:end */\n\n\nFactorContext = function FactorContext(version, serviceSid, identity, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Entities/\").concat(identity, \"/Factors/\").concat(sid); // Dependents\n\n  this._challenges = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FactorInstance\n *\n * @function remove\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.twilioAuthySandboxMode] -\n *          The Twilio-Authy-Sandbox-Mode HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FactorInstance\n */\n\n/* jshint ignore:end */\n\n\nFactorContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'Twilio-Authy-Sandbox-Mode': _.get(opts, 'twilioAuthySandboxMode')\n  });\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FactorInstance\n *\n * @function fetch\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.twilioAuthySandboxMode] -\n *          The Twilio-Authy-Sandbox-Mode HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FactorInstance\n */\n\n/* jshint ignore:end */\n\n\nFactorContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'Twilio-Authy-Sandbox-Mode': _.get(opts, 'twilioAuthySandboxMode')\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a FactorInstance\n *\n * @function update\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] -\n *          Optional payload to verify the Factor for the first time\n * @param {string} [opts.friendlyName] - The friendly name of this Factor\n * @param {string} [opts.config] - The config for this Factor as a json string\n * @param {string} [opts.twilioAuthySandboxMode] -\n *          The Twilio-Authy-Sandbox-Mode HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FactorInstance\n */\n\n/* jshint ignore:end */\n\n\nFactorContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'AuthPayload': _.get(opts, 'authPayload'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Config': _.get(opts, 'config')\n  });\n  var headers = values.of({\n    'Twilio-Authy-Sandbox-Mode': _.get(opts, 'twilioAuthySandboxMode')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FactorContext.prototype, 'challenges', {\n  get: function get() {\n    if (!this._challenges) {\n      this._challenges = new ChallengeList(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);\n    }\n\n    return this._challenges;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Authy.V1.ServiceContext.EntityContext.FactorContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFactorContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFactorContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FactorList: FactorList,\n  FactorPage: FactorPage,\n  FactorInstance: FactorInstance,\n  FactorContext: FactorContext\n};","map":null,"metadata":{},"sourceType":"script"}