{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar Policy = require('./TaskRouterCapability').Policy;\n\nvar EVENT_URL_BASE = 'https://event-bridge.twilio.com/v1/wschannels';\nvar TASKROUTER_BASE_URL = 'https://taskrouter.twilio.com';\nvar TASKROUTER_VERSION = 'v1';\n/**\n * Build the default Policies for a worker\n *\n * @param {string} version TaskRouter version\n * @param {string} workspaceSid workspace sid\n * @param {string} workerSid worker sid\n * @returns {Array<Policy>} list of Policies\n */\n\nfunction defaultWorkerPolicies(version, workspaceSid, workerSid) {\n  var activities = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Activities'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var tasks = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Tasks', '**'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var reservations = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Workers', workerSid, 'Reservations', '**'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var workerFetch = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Workers', workerSid], '/'),\n    method: 'GET',\n    allow: true\n  });\n  return [activities, tasks, reservations, workerFetch];\n}\n/**\n * Build the default Event Bridge Policies\n *\n * @param {string} accountSid account sid\n * @param {string} channelId channel id\n * @returns {Array<Policy>} list of Policies\n */\n\n\nfunction defaultEventBridgePolicies(accountSid, channelId) {\n  var url = _.join([EVENT_URL_BASE, accountSid, channelId], '/');\n\n  return [new Policy({\n    url: url,\n    method: 'GET',\n    allow: true\n  }), new Policy({\n    url: url,\n    method: 'POST',\n    allow: true\n  })];\n}\n/**\n * Generate TaskRouter workspace url\n *\n * @param {string} [workspaceSid] workspace sid or '**' for all workspaces\n * @return {string} generated url\n */\n\n\nfunction workspacesUrl(workspaceSid) {\n  return _.join(_.filter([TASKROUTER_BASE_URL, TASKROUTER_VERSION, 'Workspaces', workspaceSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter task queue url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [taskQueueSid] task queue sid or '**' for all task queues\n * @return {string} generated url\n */\n\n\nfunction taskQueuesUrl(workspaceSid, taskQueueSid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'TaskQueues', taskQueueSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter task url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [taskSid] task sid or '**' for all tasks\n * @returns {string} generated url\n */\n\n\nfunction tasksUrl(workspaceSid, taskSid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'Tasks', taskSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter activity url\n * \n * @param {string} workspaceSid workspace sid\n * @param {string} [activitySid] activity sid or '**' for all activities\n * @returns {string} generated url\n */\n\n\nfunction activitiesUrl(workspaceSid, activitySid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'Activities', activitySid], _.isString), '/');\n}\n/**\n * Generate TaskRouter worker url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [workerSid] worker sid or '**' for all workers\n * @returns {string} generated url\n */\n\n\nfunction workersUrl(workspaceSid, workerSid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'Workers', workerSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter worker reservation url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} workerSid worker sid\n * @param {string} [reservationSid] reservation sid or '**' for all reservations\n * @returns {string} generated url\n */\n\n\nfunction reservationsUrl(workspaceSid, workerSid, reservationSid) {\n  return _.join(_.filter([workersUrl(workspaceSid, workerSid), 'Reservations', reservationSid], _.isString), '/');\n}\n\nmodule.exports = {\n  defaultWorkerPolicies: defaultWorkerPolicies,\n  defaultEventBridgePolicies: defaultEventBridgePolicies,\n  workspacesUrl: workspacesUrl,\n  taskQueuesUrl: taskQueuesUrl,\n  tasksUrl: tasksUrl,\n  activitiesUrl: activitiesUrl,\n  workersUrl: workersUrl,\n  reservationsUrl: reservationsUrl\n};","map":null,"metadata":{},"sourceType":"script"}