{"ast":null,"code":"var Query = require('./queries');\n\nvar Operator = require('./operators');\n\nvar NUMBERS = /[0-9]/;\nvar LETTERS = /[a-z|\\-]/i;\nvar WHITESPACE = /\\s/;\nvar COLON = /:/;\nvar COMMA = /,/;\nvar AND = /and$/;\nvar AT = /@/;\n\nfunction tokenizer(input) {\n  var current = 0;\n  var tokens = [];\n\n  while (current < input.length) {\n    var char = input[current];\n\n    if (AT.test(char)) {\n      char = input[++current];\n\n      while (LETTERS.test(char) && char !== undefined) {\n        char = input[++current];\n      }\n    }\n\n    if (WHITESPACE.test(char) || char === ')' || char === '(') {\n      current++;\n      continue;\n    }\n\n    if (COLON.test(char) || COMMA.test(char)) {\n      current++;\n      tokens.push({\n        type: 'operator',\n        value: char\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char)) {\n      var value = '';\n\n      while (NUMBERS.test(char)) {\n        value += char;\n        char = input[++current];\n      }\n\n      tokens.push({\n        type: 'number',\n        value: value\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var value = '';\n\n      while (LETTERS.test(char) && char !== undefined) {\n        value += char;\n        char = input[++current];\n      }\n\n      if (AND.test(value)) {\n        tokens.push({\n          type: 'operator',\n          value: value\n        });\n      } else {\n        tokens.push({\n          type: 'literal',\n          value: value\n        });\n      }\n\n      continue;\n    }\n\n    throw new TypeError('Tokenizer: I dont know what this character is: ' + char);\n  }\n\n  return tokens;\n}\n\nfunction parser(tokens) {\n  var output = [];\n  var stack = [];\n\n  while (tokens.length > 0) {\n    var token = tokens.shift();\n\n    if (token.type === 'number' || token.type === 'literal') {\n      output.push(token);\n      continue;\n    }\n\n    if (token.type === 'operator') {\n      if (COLON.test(token.value)) {\n        token = {\n          type: 'query',\n          key: output.pop(),\n          value: tokens.shift()\n        };\n        output.push(token);\n        continue;\n      }\n\n      while (stack.length > 0) {\n        output.unshift(stack.pop());\n      }\n\n      stack.push(token);\n    }\n  }\n\n  while (stack.length > 0) {\n    output.unshift(stack.pop());\n  }\n\n  function walk() {\n    var head = output.shift();\n\n    if (head.type === 'number') {\n      return parseInt(head.value);\n    }\n\n    if (head.type === 'literal') {\n      return head.value;\n    }\n\n    if (head.type === 'operator') {\n      var l = walk();\n      var r = walk();\n      return Operator(head.value, l, r);\n    }\n\n    if (head.type === 'query') {\n      var l = head.key.value;\n      var r = head.value.value;\n      return Query(l, r);\n    }\n  }\n\n  return walk();\n}\n\nmodule.exports = {\n  parse: function parse(query) {\n    var tokens = tokenizer(query);\n    var ast = parser(tokens);\n    return ast;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}