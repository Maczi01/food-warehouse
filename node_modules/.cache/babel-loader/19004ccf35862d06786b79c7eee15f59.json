{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ExecutionContextList;\nvar ExecutionContextPage;\nvar ExecutionContextInstance;\nvar ExecutionContextContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionContextList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n * @param {string} executionSid - The SID of the Execution\n */\n\n/* jshint ignore:end */\n\nExecutionContextList = function ExecutionContextList(version, flowSid, executionSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function executionContext\n   * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextContext}\n   */\n\n  /* jshint ignore:end */\n  function ExecutionContextListInstance(sid) {\n    return ExecutionContextListInstance.get(sid);\n  }\n\n  ExecutionContextListInstance._version = version; // Path Solution\n\n  ExecutionContextListInstance._solution = {\n    flowSid: flowSid,\n    executionSid: executionSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a execution_context\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextList#\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextContext}\n   */\n\n  /* jshint ignore:end */\n\n  ExecutionContextListInstance.get = function get() {\n    return new ExecutionContextContext(this._version, this._solution.flowSid, this._solution.executionSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionContextListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ExecutionContextListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ExecutionContextListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionContextPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ExecutionContextSolution} solution - Path solution\n *\n * @returns ExecutionContextPage\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextPage = function ExecutionContextPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ExecutionContextPage.prototype, Page.prototype);\n\nExecutionContextPage.prototype.constructor = ExecutionContextPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ExecutionContextInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextPage#\n *\n * @param {ExecutionContextPayload} payload - Payload response from the API\n *\n * @returns ExecutionContextInstance\n */\n\n/* jshint ignore:end */\n\nExecutionContextPage.prototype.getInstance = function getInstance(payload) {\n  return new ExecutionContextInstance(this._version, payload, this._solution.flowSid, this._solution.executionSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExecutionContextPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionContextContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {object} context - The current state of the flow\n * @property {string} flowSid - The SID of the Flow\n * @property {string} executionSid - The SID of the Execution\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V2} version - Version of the resource\n * @param {ExecutionContextPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} executionSid - The SID of the Execution\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextInstance = function ExecutionContextInstance(version, payload, flowSid, executionSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.context = payload.context; // jshint ignore:line\n\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n\n  this.executionSid = payload.execution_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    executionSid: executionSid\n  };\n};\n\nObject.defineProperty(ExecutionContextInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ExecutionContextContext(this._version, this._solution.flowSid, this._solution.executionSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ExecutionContextInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionContextInstance\n */\n\n/* jshint ignore:end */\n\nExecutionContextInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExecutionContextInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionContextContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} executionSid - The SID of the Execution\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextContext = function ExecutionContextContext(version, flowSid, executionSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    flowSid: flowSid,\n    executionSid: executionSid\n  };\n  this._uri = \"/Flows/\".concat(flowSid, \"/Executions/\").concat(executionSid, \"/Context\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ExecutionContextInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionContextInstance\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ExecutionContextInstance(this._version, payload, this._solution.flowSid, this._solution.executionSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.ExecutionContext.ExecutionContextContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExecutionContextContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nExecutionContextContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ExecutionContextList: ExecutionContextList,\n  ExecutionContextPage: ExecutionContextPage,\n  ExecutionContextInstance: ExecutionContextInstance,\n  ExecutionContextContext: ExecutionContextContext\n};","map":null,"metadata":{},"sourceType":"script"}