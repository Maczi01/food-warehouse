{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar patternParts = {\n  value: '[-+]?(?:Infinity|[[0-9]*\\\\.?\\\\d*(?:[eE][-+]?\\\\d+)?)',\n  leftBrace: '[\\\\(\\\\]\\\\[]',\n  delimeter: ',',\n  rightBrace: '[\\\\)\\\\]\\\\[]'\n};\nvar PATTERN = new RegExp(\"(\" + patternParts.leftBrace + \")\" + (\"(\" + patternParts.value + \")?\") + (\"(\" + patternParts.delimeter + \")?\") + (\"(\" + patternParts.value + \")?\") + (\"(\" + patternParts.rightBrace + \")\"));\n\nfunction execPattern(str) {\n  var match = PATTERN.exec(str);\n\n  if (!match) {\n    return null;\n  }\n\n  var _ = match[0],\n      leftBrace = match[1],\n      fromValue = match[2],\n      delimeter = match[3],\n      toValue = match[4],\n      rightBrace = match[5];\n  return {\n    leftBrace: leftBrace,\n    fromValue: fromValue,\n    delimeter: delimeter,\n    toValue: toValue,\n    rightBrace: rightBrace\n  };\n}\n\nfunction parse(str) {\n  var match = execPattern(str);\n\n  if (!match) {\n    return null;\n  }\n\n  return {\n    from: {\n      value: match.fromValue !== undefined ? +match.fromValue : -Infinity,\n      included: match.leftBrace === '['\n    },\n    to: {\n      value: match.toValue !== undefined ? +match.toValue : match.delimeter ? +Infinity : match.fromValue !== undefined ? +match.fromValue : NaN,\n      included: match.rightBrace === ']'\n    }\n  };\n}\n\nfunction check(interval) {\n  if (interval.from.value === interval.to.value) {\n    return interval.from.included && interval.to.included;\n  }\n\n  return Math.min(interval.from.value, interval.to.value) === interval.from.value;\n}\n\nfunction entry(str) {\n  var interval = parse(str);\n\n  if (!interval || !check(interval)) {\n    return null;\n  }\n\n  return interval;\n}\n\nexports.default = entry;","map":null,"metadata":{},"sourceType":"script"}