{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar VerificationList;\nvar VerificationPage;\nvar VerificationInstance;\nvar VerificationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n\n/* jshint ignore:end */\n\nVerificationList = function VerificationList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function verifications\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n\n  /* jshint ignore:end */\n  function VerificationListInstance(sid) {\n    return VerificationListInstance.get(sid);\n  }\n\n  VerificationListInstance._version = version; // Path Solution\n\n  VerificationListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  VerificationListInstance._uri = \"/Services/\".concat(serviceSid, \"/Verifications\");\n  /* jshint ignore:start */\n\n  /**\n   * create a VerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number or email to verify\n   * @param {string} opts.channel - The verification method to use\n   * @param {string} [opts.customMessage] -\n   *          The text of a custom message to use for the verification\n   * @param {string} [opts.sendDigits] -\n   *          The digits to send after a phone call is answered\n   * @param {string} [opts.locale] -\n   *          The locale to use for the verification SMS or call\n   * @param {string} [opts.customCode] - A pre-generated code\n   * @param {string} [opts.amount] -\n   *          The amount of the associated PSD2 compliant transaction.\n   * @param {string} [opts.payee] -\n   *          The payee of the associated PSD2 compliant transaction\n   * @param {object} [opts.rateLimits] -\n   *          The custom key-value pairs of Programmable Rate Limits.\n   * @param {object} [opts.channelConfiguration] -\n   *          Channel specific configuration in json format.\n   * @param {string} [opts.appHash] -\n   *          Your App Hash to be appended at the end of an SMS.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed VerificationInstance\n   */\n\n  /* jshint ignore:end */\n\n  VerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.channel)) {\n      throw new Error('Required parameter \"opts.channel\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'Channel': _.get(opts, 'channel'),\n      'CustomMessage': _.get(opts, 'customMessage'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Locale': _.get(opts, 'locale'),\n      'CustomCode': _.get(opts, 'customCode'),\n      'Amount': _.get(opts, 'amount'),\n      'Payee': _.get(opts, 'payee'),\n      'RateLimits': serialize.object(_.get(opts, 'rateLimits')),\n      'ChannelConfiguration': serialize.object(_.get(opts, 'channelConfiguration')),\n      'AppHash': _.get(opts, 'appHash')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a verification\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationListInstance.get = function get(sid) {\n    return new VerificationContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationSolution} solution - Path solution\n *\n * @returns VerificationPage\n */\n\n/* jshint ignore:end */\n\n\nVerificationPage = function VerificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationPage.prototype, Page.prototype);\n\nVerificationPage.prototype.constructor = VerificationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of VerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @param {VerificationPayload} payload - Payload response from the API\n *\n * @returns VerificationInstance\n */\n\n/* jshint ignore:end */\n\nVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} to - The phone number or email being verified\n * @property {verification.channel} channel - The verification method used.\n * @property {string} status - The status of the verification resource\n * @property {boolean} valid - Whether the verification was successful\n * @property {object} lookup - Information about the phone number being verified\n * @property {string} amount -\n *          The amount of the associated PSD2 compliant transaction.\n * @property {string} payee -\n *          The payee of the associated PSD2 compliant transaction\n * @property {object} sendCodeAttempts - An array of verification attempt objects.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Verification resource\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nVerificationInstance = function VerificationInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.channel = payload.channel; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.valid = payload.valid; // jshint ignore:line\n\n  this.lookup = payload.lookup; // jshint ignore:line\n\n  this.amount = payload.amount; // jshint ignore:line\n\n  this.payee = payload.payee; // jshint ignore:line\n\n  this.sendCodeAttempts = payload.send_code_attempts; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(VerificationInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new VerificationContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\nVerificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the verification Service to fetch the resource from\n * @param {string} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext = function VerificationContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Verifications/\").concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationList: VerificationList,\n  VerificationPage: VerificationPage,\n  VerificationInstance: VerificationInstance,\n  VerificationContext: VerificationContext\n};","map":null,"metadata":{},"sourceType":"script"}