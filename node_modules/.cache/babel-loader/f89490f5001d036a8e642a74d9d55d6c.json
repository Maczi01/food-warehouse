{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      XMLAttribute,\n      XMLElement,\n      XMLNamedNodeMap,\n      XMLNode,\n      getValue,\n      isFunction,\n      isObject,\n      hasProp = {}.hasOwnProperty;\n\n  var _require = require('./Utility');\n\n  isObject = _require.isObject;\n  isFunction = _require.isFunction;\n  getValue = _require.getValue;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLAttribute = require('./XMLAttribute');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents an element of the XML document\n\n  module.exports = XMLElement = function () {\n    var XMLElement = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLElement, _XMLNode);\n\n      // Initializes a new instance of `XMLElement`\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      function XMLElement(parent, name, attributes) {\n        var _this;\n\n        _classCallCheck(this, XMLElement);\n\n        var child, j, len, ref;\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLElement).call(this, parent));\n\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + _this.debugInfo());\n        }\n\n        _this.name = _this.stringify.name(name);\n        _this.type = NodeType.Element;\n        _this.attribs = {};\n        _this.schemaTypeInfo = null;\n\n        if (attributes != null) {\n          _this.attribute(attributes);\n        } // set properties if this is the root node\n\n\n        if (parent.type === NodeType.Document) {\n          _this.isRoot = true;\n          _this.documentObject = parent;\n          parent.rootObject = _assertThisInitialized(_assertThisInitialized(_this)); // set dtd name\n\n          if (parent.children) {\n            ref = parent.children;\n\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n\n              if (child.type === NodeType.DocType) {\n                child.name = _this.name;\n                break;\n              }\n            }\n          }\n        }\n\n        return _this;\n      } // Creates and returns a deep clone of `this`\n\n\n      _createClass(XMLElement, [{\n        key: \"clone\",\n        value: function clone() {\n          var att, attName, clonedSelf, ref;\n          clonedSelf = Object.create(this); // remove document element\n\n          if (clonedSelf.isRoot) {\n            clonedSelf.documentObject = null;\n          } // clone attributes\n\n\n          clonedSelf.attribs = {};\n          ref = this.attribs;\n\n          for (attName in ref) {\n            if (!hasProp.call(ref, attName)) continue;\n            att = ref[attName];\n            clonedSelf.attribs[attName] = att.clone();\n          } // clone child nodes\n\n\n          clonedSelf.children = [];\n          this.children.forEach(function (child) {\n            var clonedChild;\n            clonedChild = child.clone();\n            clonedChild.parent = clonedSelf;\n            return clonedSelf.children.push(clonedChild);\n          });\n          return clonedSelf;\n        } // Adds or modifies an attribute\n        // `name` attribute name\n        // `value` attribute value\n\n      }, {\n        key: \"attribute\",\n        value: function attribute(name, value) {\n          var attName, attValue;\n\n          if (name != null) {\n            name = getValue(name);\n          }\n\n          if (isObject(name)) {\n            // expand if object\n            for (attName in name) {\n              if (!hasProp.call(name, attName)) continue;\n              attValue = name[attName];\n              this.attribute(attName, attValue);\n            }\n          } else {\n            if (isFunction(value)) {\n              value = value.apply();\n            }\n\n            if (this.options.keepNullAttributes && value == null) {\n              this.attribs[name] = new XMLAttribute(this, name, \"\");\n            } else if (value != null) {\n              this.attribs[name] = new XMLAttribute(this, name, value);\n            }\n          }\n\n          return this;\n        } // Removes an attribute\n        // `name` attribute name\n\n      }, {\n        key: \"removeAttribute\",\n        value: function removeAttribute(name) {\n          var attName, j, len; // Also defined in DOM level 1\n          // removeAttribute(name) removes an attribute by name.\n\n          if (name == null) {\n            throw new Error(\"Missing attribute name. \" + this.debugInfo());\n          }\n\n          name = getValue(name);\n\n          if (Array.isArray(name)) {\n            // expand if array\n            for (j = 0, len = name.length; j < len; j++) {\n              attName = name[j];\n              delete this.attribs[attName];\n            }\n          } else {\n            delete this.attribs[name];\n          }\n\n          return this;\n        } // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        // `options.allowEmpty` do not self close empty element tags\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.element(this, this.options.writer.filterOptions(options));\n        } // Aliases\n\n      }, {\n        key: \"att\",\n        value: function att(name, value) {\n          return this.attribute(name, value);\n        }\n      }, {\n        key: \"a\",\n        value: function a(name, value) {\n          return this.attribute(name, value);\n        } // DOM Level 1\n\n      }, {\n        key: \"getAttribute\",\n        value: function getAttribute(name) {\n          if (this.attribs.hasOwnProperty(name)) {\n            return this.attribs[name].value;\n          } else {\n            return null;\n          }\n        }\n      }, {\n        key: \"setAttribute\",\n        value: function setAttribute(name, value) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getAttributeNode\",\n        value: function getAttributeNode(name) {\n          if (this.attribs.hasOwnProperty(name)) {\n            return this.attribs[name];\n          } else {\n            return null;\n          }\n        }\n      }, {\n        key: \"setAttributeNode\",\n        value: function setAttributeNode(newAttr) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"removeAttributeNode\",\n        value: function removeAttributeNode(oldAttr) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagName\",\n        value: function getElementsByTagName(name) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM Level 2\n\n      }, {\n        key: \"getAttributeNS\",\n        value: function getAttributeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"setAttributeNS\",\n        value: function setAttributeNS(namespaceURI, qualifiedName, value) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"removeAttributeNS\",\n        value: function removeAttributeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getAttributeNodeNS\",\n        value: function getAttributeNodeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"setAttributeNodeNS\",\n        value: function setAttributeNodeNS(newAttr) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagNameNS\",\n        value: function getElementsByTagNameNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"hasAttribute\",\n        value: function hasAttribute(name) {\n          return this.attribs.hasOwnProperty(name);\n        }\n      }, {\n        key: \"hasAttributeNS\",\n        value: function hasAttributeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM Level 3\n\n      }, {\n        key: \"setIdAttribute\",\n        value: function setIdAttribute(name, isId) {\n          if (this.attribs.hasOwnProperty(name)) {\n            return this.attribs[name].isId;\n          } else {\n            return isId;\n          }\n        }\n      }, {\n        key: \"setIdAttributeNS\",\n        value: function setIdAttributeNS(namespaceURI, localName, isId) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"setIdAttributeNode\",\n        value: function setIdAttributeNode(idAttr, isId) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM Level 4\n\n      }, {\n        key: \"getElementsByTagName\",\n        value: function getElementsByTagName(tagname) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagNameNS\",\n        value: function getElementsByTagNameNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByClassName\",\n        value: function getElementsByClassName(classNames) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"isEqualNode\",\n        value: function isEqualNode(node) {\n          var i, j, ref;\n\n          if (!_get(_getPrototypeOf(XMLElement.prototype), \"isEqualNode\", this).call(this, node)) {\n            return false;\n          }\n\n          if (node.namespaceURI !== this.namespaceURI) {\n            return false;\n          }\n\n          if (node.prefix !== this.prefix) {\n            return false;\n          }\n\n          if (node.localName !== this.localName) {\n            return false;\n          }\n\n          if (node.attribs.length !== this.attribs.length) {\n            return false;\n          }\n\n          for (i = j = 0, ref = this.attribs.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n            if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      }]);\n\n      return XMLElement;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function get() {\n        return this.name;\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function get() {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function get() {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function get() {\n        return this.name;\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function get() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n\n        return this.attributeMap;\n      }\n    });\n    return XMLElement;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}