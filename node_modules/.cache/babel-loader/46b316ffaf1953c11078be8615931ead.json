{"ast":null,"code":"import { filterProps } from '../utils';\nimport { FormatError } from 'intl-messageformat';\nimport { ReactIntlError } from '../error';\nvar LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nvar now = Date.now();\n\nfunction generateToken(i) {\n  return now + \"_\" + i + \"_\" + now;\n}\n\nexport function formatList(_a, getListFormat, values, options) {\n  var locale = _a.locale,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var ListFormat = Intl.ListFormat;\n\n  if (!ListFormat) {\n    onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", \"MISSING_INTL_API\"\n    /* MISSING_INTL_API */\n    ));\n  }\n\n  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n\n  try {\n    var richValues_1 = {};\n    var serializedValues = values.map(function (v, i) {\n      if (typeof v === 'object') {\n        var id = generateToken(i);\n        richValues_1[id] = v;\n        return id;\n      }\n\n      return String(v);\n    });\n\n    if (!Object.keys(richValues_1).length) {\n      return getListFormat(locale, filteredOptions).format(serializedValues);\n    }\n\n    var parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n    return parts.reduce(function (all, el) {\n      var val = el.value;\n\n      if (richValues_1[val]) {\n        all.push(richValues_1[val]);\n      } else if (typeof all[all.length - 1] === 'string') {\n        all[all.length - 1] += val;\n      } else {\n        all.push(val);\n      }\n\n      return all;\n    }, []);\n  } catch (e) {\n    onError(new ReactIntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting list.', e));\n  }\n\n  return values;\n}","map":null,"metadata":{},"sourceType":"module"}