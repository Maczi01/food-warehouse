{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\n\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/intl-utils';\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\n\nfunction selectUnit(seconds) {\n  var absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n\n  if (absValue < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n}\n\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    default:\n      return DAY;\n  }\n}\n\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n\n  switch (unit) {\n    case 'second':\n      return value;\n\n    case 'minute':\n      return value * MINUTE;\n\n    default:\n      return value * HOUR;\n  }\n}\n\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\n\nfunction canIncrement(unit) {\n  if (unit === void 0) {\n    unit = 'second';\n  }\n\n  return INCREMENTABLE_UNITS.includes(unit);\n}\n\nvar FormattedRelativeTime =\n/** @class */\nfunction (_super) {\n  __extends(FormattedRelativeTime, _super);\n\n  function FormattedRelativeTime(props) {\n    var _this = _super.call(this, props) || this; // Public for testing\n\n\n    _this._updateTimer = null;\n    _this.state = {\n      prevUnit: _this.props.unit,\n      prevValue: _this.props.value,\n      currentValueInSeconds: canIncrement(_this.props.unit) ? valueToSeconds(_this.props.value, _this.props.unit) : 0\n    };\n    invariant(!props.updateIntervalInSeconds || !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n    return _this;\n  }\n\n  FormattedRelativeTime.prototype.scheduleNextUpdate = function (_a, _b) {\n    var _this = this;\n\n    var updateIntervalInSeconds = _a.updateIntervalInSeconds,\n        unit = _a.unit;\n    var currentValueInSeconds = _b.currentValueInSeconds;\n    clearTimeout(this._updateTimer);\n    this._updateTimer = null; // If there's no interval and we cannot increment this unit, do nothing\n\n    if (!updateIntervalInSeconds || !canIncrement(unit)) {\n      return;\n    } // Figure out the next interesting time\n\n\n    var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n    var nextUnit = selectUnit(nextValueInSeconds); // We've reached the max auto incrementable unit, don't schedule another update\n\n    if (nextUnit === 'day') {\n      return;\n    }\n\n    var unitDuration = getDurationInSeconds(nextUnit);\n    var remainder = nextValueInSeconds % unitDuration;\n    var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n    var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n    var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n    this._updateTimer = setTimeout(function () {\n      return _this.setState({\n        currentValueInSeconds: nextInterestingValueInSeconds\n      });\n    }, delayInSeconds * 1e3);\n  };\n\n  FormattedRelativeTime.prototype.componentDidMount = function () {\n    this.scheduleNextUpdate(this.props, this.state);\n  };\n\n  FormattedRelativeTime.prototype.componentDidUpdate = function () {\n    this.scheduleNextUpdate(this.props, this.state);\n  };\n\n  FormattedRelativeTime.prototype.componentWillUnmount = function () {\n    clearTimeout(this._updateTimer);\n    this._updateTimer = null;\n  };\n\n  FormattedRelativeTime.getDerivedStateFromProps = function (props, state) {\n    if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n      return {\n        prevValue: props.value,\n        prevUnit: props.unit,\n        currentValueInSeconds: canIncrement(props.unit) ? valueToSeconds(props.value, props.unit) : 0\n      };\n    }\n\n    return null;\n  };\n\n  FormattedRelativeTime.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(Context.Consumer, null, function (intl) {\n      invariantIntlContext(intl);\n      var formatRelativeTime = intl.formatRelativeTime,\n          Text = intl.textComponent;\n      var _a = _this.props,\n          children = _a.children,\n          value = _a.value,\n          unit = _a.unit,\n          updateIntervalInSeconds = _a.updateIntervalInSeconds;\n      var currentValueInSeconds = _this.state.currentValueInSeconds;\n      var currentValue = value || 0;\n      var currentUnit = unit;\n\n      if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n        currentUnit = selectUnit(currentValueInSeconds);\n        var unitDuration = getDurationInSeconds(currentUnit);\n        currentValue = Math.round(currentValueInSeconds / unitDuration);\n      }\n\n      var formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, __assign({}, _this.props));\n\n      if (typeof children === 'function') {\n        return children(formattedRelativeTime);\n      }\n\n      if (Text) {\n        return React.createElement(Text, null, formattedRelativeTime);\n      }\n\n      return formattedRelativeTime;\n    });\n  };\n\n  FormattedRelativeTime.displayName = 'FormattedRelativeTime';\n  FormattedRelativeTime.defaultProps = {\n    value: 0,\n    unit: 'second'\n  };\n  return FormattedRelativeTime;\n}(React.PureComponent);\n\nexport { FormattedRelativeTime };\nexport default FormattedRelativeTime;","map":null,"metadata":{},"sourceType":"module"}