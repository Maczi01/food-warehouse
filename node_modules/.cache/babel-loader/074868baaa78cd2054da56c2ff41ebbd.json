{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport IntlMessageFormat from 'intl-messageformat';\nimport { ReactIntlError } from '../error';\n\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = __assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\n\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = __assign(__assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\n\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n\n  var mfFormats = IntlMessageFormat.formats;\n  return __assign(__assign(__assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\n\nfunction prepareIntlMessageFormatHtmlOutput(chunks) {\n  return React.createElement.apply(React, __spreadArrays([React.Fragment, null], chunks));\n}\n\nexport function formatMessage(_a, state, messageDescriptor, values) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      messages = _a.messages,\n      defaultLocale = _a.defaultLocale,\n      defaultFormats = _a.defaultFormats,\n      onError = _a.onError,\n      timeZone = _a.timeZone,\n      wrapRichTextChunksInFragment = _a.wrapRichTextChunksInFragment;\n\n  if (messageDescriptor === void 0) {\n    messageDescriptor = {\n      id: ''\n    };\n  }\n\n  if (values === void 0) {\n    values = {};\n  }\n\n  var id = messageDescriptor.id,\n      defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n  var message = messages && messages[String(id)];\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n  var formattedMessageParts = '';\n\n  if (message) {\n    try {\n      var formatter = state.getMessageFormat(message, locale, formats, {\n        formatters: state\n      });\n      formattedMessageParts = formatter.format(values);\n    } catch (e) {\n      onError(new ReactIntlError(\"FORMAT_ERROR\"\n      /* FORMAT_ERROR */\n      , \"Error formatting message: \\\"\" + id + \"\\\" for locale: \\\"\" + locale + \"\\\"\" + (defaultMessage ? ', using default message as fallback.' : ''), messageDescriptor, e));\n    }\n  } else if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n    // This prevents warnings from littering the console in development\n    // when no `messages` are passed into the <IntlProvider> for the\n    // default locale.\n    onError(new ReactIntlError(\"MISSING_TRANSLATION\"\n    /* MISSING_TRANSLATION */\n    , \"Missing message: \\\"\" + id + \"\\\" for locale: \\\"\" + locale + \"\\\"\" + (defaultMessage ? ', using default message as fallback.' : ''), messageDescriptor));\n  }\n\n  if (!formattedMessageParts && defaultMessage) {\n    try {\n      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      formattedMessageParts = formatter.format(values);\n    } catch (e) {\n      onError(new ReactIntlError(\"FORMAT_ERROR\"\n      /* FORMAT_ERROR */\n      , \"Error formatting the default message for: \\\"\" + id + \"\\\"\", messageDescriptor, e));\n    }\n  }\n\n  if (!formattedMessageParts) {\n    onError(new ReactIntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , \"Cannot format message: \\\"\" + id + \"\\\", \" + (\"using message \" + (message || defaultMessage ? 'source' : 'id') + \" as fallback.\"), messageDescriptor));\n\n    if (typeof message === 'string') {\n      return message || defaultMessage || String(id);\n    }\n\n    return defaultMessage || String(id);\n  }\n\n  if (Array.isArray(formattedMessageParts)) {\n    if (wrapRichTextChunksInFragment) {\n      return prepareIntlMessageFormatHtmlOutput(formattedMessageParts);\n    }\n\n    return formattedMessageParts;\n  }\n\n  return formattedMessageParts;\n}","map":null,"metadata":{},"sourceType":"module"}