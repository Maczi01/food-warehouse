{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport { Router, useHref, useNavigate, useLocation, useResolvedLocation, useMatch, useBlocker } from 'react-router';\nexport { MemoryRouter, Navigate, Outlet, Redirect, Route, Router, Routes, createRoutesFromChildren, generatePath, matchRoutes, resolveLocation, useBlocker, useHref, useLocation, useMatch, useNavigate, useOutlet, useParams, useResolvedLocation, useRoutes } from 'react-router';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> for use in web browsers. Provides the cleanest URLs.\n */\n\n\nfunction BrowserRouter(_ref) {\n  var children = _ref.children,\n      timeout = _ref.timeout,\n      window = _ref.window;\n  var historyRef = React.useRef(null);\n\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window: window\n    });\n  }\n\n  return React.createElement(Router, {\n    children: children,\n    history: historyRef.current,\n    timeout: timeout\n  });\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  BrowserRouter.displayName = 'BrowserRouter';\n  BrowserRouter.propTypes = {\n    children: PropTypes.node,\n    timeout: PropTypes.number,\n    window: PropTypes.object\n  };\n}\n/**\n * A <Router> for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\n\n\nfunction HashRouter(_ref2) {\n  var children = _ref2.children,\n      timeout = _ref2.timeout,\n      window = _ref2.window;\n  var historyRef = React.useRef(null);\n\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window: window\n    });\n  }\n\n  return React.createElement(Router, {\n    children: children,\n    history: historyRef.current,\n    timeout: timeout\n  });\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  HashRouter.displayName = 'HashRouter';\n  HashRouter.propTypes = {\n    children: PropTypes.node,\n    timeout: PropTypes.number,\n    window: PropTypes.object\n  };\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = React.forwardRef(function LinkWithRef(_ref3, ref) {\n  var _ref3$as = _ref3.as,\n      Component = _ref3$as === void 0 ? 'a' : _ref3$as,\n      onClick = _ref3.onClick,\n      _ref3$replace = _ref3.replace,\n      replaceProp = _ref3$replace === void 0 ? false : _ref3$replace,\n      state = _ref3.state,\n      target = _ref3.target,\n      to = _ref3.to,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"as\", \"onClick\", \"replace\", \"state\", \"target\", \"to\"]);\n\n  var href = useHref(to);\n  var navigate = useNavigate();\n  var location = useLocation();\n  var toLocation = useResolvedLocation(to);\n\n  function handleClick(event) {\n    if (onClick) onClick(event);\n\n    if (!event.defaultPrevented && // onClick prevented default\n    event.button === 0 && ( // Ignore everything but left clicks\n    !target || target === '_self') && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n    ) {\n        event.preventDefault();\n        var isSameLocation = toLocation.pathname === location.pathname && toLocation.search === location.search && toLocation.hash === location.hash; // If the pathname, search, and hash haven't changed, a\n        // regular <a> will do a REPLACE instead of a PUSH.\n\n        var replace = !!replaceProp || isSameLocation;\n        navigate(to, {\n          replace: replace,\n          state: state\n        });\n      }\n  }\n\n  return React.createElement(Component, _extends({}, rest, {\n    href: href,\n    onClick: handleClick,\n    ref: ref,\n    target: target\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = 'Link';\n  Link.propTypes = {\n    as: PropTypes.elementType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    state: PropTypes.object,\n    target: PropTypes.string,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n      hash: PropTypes.string\n    })]).isRequired\n  };\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nvar NavLink = React.forwardRef(function NavLinkWithRef(_ref4, ref) {\n  var _ref4$ariaCurrent = _ref4['aria-current'],\n      ariaCurrentProp = _ref4$ariaCurrent === void 0 ? 'page' : _ref4$ariaCurrent,\n      _ref4$activeClassName = _ref4.activeClassName,\n      activeClassName = _ref4$activeClassName === void 0 ? 'active' : _ref4$activeClassName,\n      _ref4$activeStyle = _ref4.activeStyle,\n      activeStyle = _ref4$activeStyle === void 0 ? null : _ref4$activeStyle,\n      _ref4$className = _ref4.className,\n      classNameProp = _ref4$className === void 0 ? '' : _ref4$className,\n      _ref4$style = _ref4.style,\n      styleProp = _ref4$style === void 0 ? null : _ref4$style,\n      to = _ref4.to,\n      rest = _objectWithoutPropertiesLoose(_ref4, [\"aria-current\", \"activeClassName\", \"activeStyle\", \"className\", \"style\", \"to\"]);\n\n  var match = useMatch(to);\n  var ariaCurrent = match ? ariaCurrentProp : undefined;\n  var className = [classNameProp, match ? activeClassName : null].filter(Boolean).join(' ');\n\n  var style = _extends({}, styleProp, {}, match ? activeStyle : null);\n\n  return React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = 'NavLink';\n  NavLink.propTypes = _extends({}, Link.propTypes, {\n    'aria-current': PropTypes.oneOf(['page', 'step', 'location', 'date', 'time', 'true']),\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n      hash: PropTypes.string\n    })]).isRequired\n  });\n}\n/**\n * A declarative interface for showing a window.confirm dialog with the given\n * message when the user tries to navigate away from the current page.\n *\n * This also serves as a reference implementation for anyone who wants to\n * create their own custom prompt component.\n */\n\n\nfunction Prompt(_ref5) {\n  var message = _ref5.message,\n      when = _ref5.when;\n  usePrompt(message, when);\n  return null;\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  Prompt.displayName = 'Prompt';\n  Prompt.propTypes = {\n    message: PropTypes.string,\n    when: PropTypes.bool\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Prevents navigation away from the current page using a window.confirm prompt\n * with the given message.\n */\n\n\nfunction usePrompt(message, when) {\n  var blocker = React.useCallback(function (tx) {\n    if (window.confirm(message)) tx.retry();\n  }, [message]);\n  useBlocker(blocker, when);\n}\n\nexport { BrowserRouter, HashRouter, Link, NavLink, Prompt, usePrompt };","map":null,"metadata":{},"sourceType":"module"}