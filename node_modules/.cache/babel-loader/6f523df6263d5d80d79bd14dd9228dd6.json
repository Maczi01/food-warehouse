{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar UnicodeTrie = require('unicode-trie');\n\nvar data = require('./data.json');\n\nvar trieBuffer = require('./trie.json'); // Trie is serialized as a Buffer in node, but here\n// we may be running in a browser so we make an Uint8Array\n\n\nvar trieData = new Uint8Array(trieBuffer.data);\nvar trie = new UnicodeTrie(trieData);\n\nvar log2 = Math.log2 || function (n) {\n  return Math.log(n) / Math.LN2;\n};\n\nvar bits = function bits(n) {\n  return log2(n) + 1 | 0;\n}; // compute the number of bits stored for each field\n\n\nvar CATEGORY_BITS = bits(data.categories.length - 1);\nvar COMBINING_BITS = bits(data.combiningClasses.length - 1);\nvar SCRIPT_BITS = bits(data.scripts.length - 1);\nvar EAW_BITS = bits(data.eaw.length - 1);\nvar NUMBER_BITS = 10; // compute shift and mask values for each field\n\nvar CATEGORY_SHIFT = COMBINING_BITS + SCRIPT_BITS + EAW_BITS + NUMBER_BITS;\nvar COMBINING_SHIFT = SCRIPT_BITS + EAW_BITS + NUMBER_BITS;\nvar SCRIPT_SHIFT = EAW_BITS + NUMBER_BITS;\nvar EAW_SHIFT = NUMBER_BITS;\nvar CATEGORY_MASK = (1 << CATEGORY_BITS) - 1;\nvar COMBINING_MASK = (1 << COMBINING_BITS) - 1;\nvar SCRIPT_MASK = (1 << SCRIPT_BITS) - 1;\nvar EAW_MASK = (1 << EAW_BITS) - 1;\nvar NUMBER_MASK = (1 << NUMBER_BITS) - 1;\n\nvar getCategory = function getCategory(codePoint) {\n  var val = trie.get(codePoint);\n  return data.categories[val >> CATEGORY_SHIFT & CATEGORY_MASK];\n};\n\nvar getCombiningClass = function getCombiningClass(codePoint) {\n  var val = trie.get(codePoint);\n  return data.combiningClasses[val >> COMBINING_SHIFT & COMBINING_MASK];\n};\n\nvar getScript = function getScript(codePoint) {\n  var val = trie.get(codePoint);\n  return data.scripts[val >> SCRIPT_SHIFT & SCRIPT_MASK];\n};\n\nvar getEastAsianWidth = function getEastAsianWidth(codePoint) {\n  var val = trie.get(codePoint);\n  return data.eaw[val >> EAW_SHIFT & EAW_MASK];\n};\n\nvar getNumericValue = function getNumericValue(codePoint) {\n  var val = trie.get(codePoint);\n  var num = val & NUMBER_MASK;\n\n  if (num === 0) {\n    return null;\n  } else if (num <= 50) {\n    return num - 1;\n  } else if (num < 0x1e0) {\n    var numerator = (num >> 4) - 12;\n    var denominator = (num & 0xf) + 1;\n    return numerator / denominator;\n  } else if (num < 0x300) {\n    val = (num >> 5) - 14;\n    var exp = (num & 0x1f) + 2;\n\n    while (exp > 0) {\n      val *= 10;\n      exp--;\n    }\n\n    return val;\n  } else {\n    val = (num >> 2) - 0xbf;\n\n    var _exp = (num & 3) + 1;\n\n    while (_exp > 0) {\n      val *= 60;\n      _exp--;\n    }\n\n    return val;\n  }\n};\n\nvar isAlphabetic = function isAlphabetic(codePoint) {\n  var category = getCategory(codePoint);\n  return category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Nl';\n};\n\nvar isDigit = function isDigit(codePoint) {\n  return getCategory(codePoint) === 'Nd';\n};\n\nvar isPunctuation = function isPunctuation(codePoint) {\n  var category = getCategory(codePoint);\n  return category === 'Pc' || category === 'Pd' || category === 'Pe' || category === 'Pf' || category === 'Pi' || category === 'Po' || category === 'Ps';\n};\n\nvar isLowerCase = function isLowerCase(codePoint) {\n  return getCategory(codePoint) === 'Ll';\n};\n\nvar isUpperCase = function isUpperCase(codePoint) {\n  return getCategory(codePoint) === 'Lu';\n};\n\nvar isTitleCase = function isTitleCase(codePoint) {\n  return getCategory(codePoint) === 'Lt';\n};\n\nvar isWhiteSpace = function isWhiteSpace(codePoint) {\n  var category = getCategory(codePoint);\n  return category === 'Zs' || category === 'Zl' || category === 'Zp';\n};\n\nvar isBaseForm = function isBaseForm(codePoint) {\n  var category = getCategory(codePoint);\n  return category === 'Nd' || category === 'No' || category === 'Nl' || category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Me' || category === 'Mc';\n};\n\nvar isMark = function isMark(codePoint) {\n  var category = getCategory(codePoint);\n  return category === 'Mn' || category === 'Me' || category === 'Mc';\n};\n\nvar index = {\n  getCategory: getCategory,\n  getCombiningClass: getCombiningClass,\n  getScript: getScript,\n  getEastAsianWidth: getEastAsianWidth,\n  getNumericValue: getNumericValue,\n  isAlphabetic: isAlphabetic,\n  isDigit: isDigit,\n  isPunctuation: isPunctuation,\n  isLowerCase: isLowerCase,\n  isUpperCase: isUpperCase,\n  isTitleCase: isTitleCase,\n  isWhiteSpace: isWhiteSpace,\n  isBaseForm: isBaseForm,\n  isMark: isMark\n};\nexports.getCategory = getCategory;\nexports.getCombiningClass = getCombiningClass;\nexports.getScript = getScript;\nexports.getEastAsianWidth = getEastAsianWidth;\nexports.getNumericValue = getNumericValue;\nexports.isAlphabetic = isAlphabetic;\nexports.isDigit = isDigit;\nexports.isPunctuation = isPunctuation;\nexports.isLowerCase = isLowerCase;\nexports.isUpperCase = isUpperCase;\nexports.isTitleCase = isTitleCase;\nexports.isWhiteSpace = isWhiteSpace;\nexports.isBaseForm = isBaseForm;\nexports.isMark = isMark;\nexports['default'] = index;","map":null,"metadata":{},"sourceType":"script"}