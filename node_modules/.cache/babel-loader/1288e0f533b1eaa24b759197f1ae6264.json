{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DataSessionList = require('./sim/dataSession').DataSessionList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar UsageRecordList = require('./sim/usageRecord').UsageRecordList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar SimList;\nvar SimPage;\nvar SimInstance;\nvar SimContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SimList\n *\n * @constructor Twilio.Wireless.V1.SimList\n *\n * @param {Twilio.Wireless.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nSimList = function SimList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sims\n   * @memberof Twilio.Wireless.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Wireless.V1.SimContext}\n   */\n\n  /* jshint ignore:end */\n  function SimListInstance(sid) {\n    return SimListInstance.get(sid);\n  }\n\n  SimListInstance._version = version; // Path Solution\n\n  SimListInstance._solution = {};\n  SimListInstance._uri = \"/Sims\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams SimInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Wireless.V1.SimList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {sim.status} [opts.status] - Only return Sim resources with this status\n   * @param {string} [opts.iccid] - Only return Sim resources with this ICCID\n   * @param {string} [opts.ratePlan] -\n   *          Only return Sim resources assigned to this RatePlan resource\n   * @param {string} [opts.eId] - Deprecated\n   * @param {string} [opts.simRegistrationCode] -\n   *          Only return Sim resources with this registration code\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  SimListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SimInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Wireless.V1.SimList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {sim.status} [opts.status] - Only return Sim resources with this status\n   * @param {string} [opts.iccid] - Only return Sim resources with this ICCID\n   * @param {string} [opts.ratePlan] -\n   *          Only return Sim resources assigned to this RatePlan resource\n   * @param {string} [opts.eId] - Deprecated\n   * @param {string} [opts.simRegistrationCode] -\n   *          Only return Sim resources with this registration code\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SimListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SimInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Wireless.V1.SimList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {sim.status} [opts.status] - Only return Sim resources with this status\n   * @param {string} [opts.iccid] - Only return Sim resources with this ICCID\n   * @param {string} [opts.ratePlan] -\n   *          Only return Sim resources assigned to this RatePlan resource\n   * @param {string} [opts.eId] - Deprecated\n   * @param {string} [opts.simRegistrationCode] -\n   *          Only return Sim resources with this registration code\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SimListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'Iccid': _.get(opts, 'iccid'),\n      'RatePlan': _.get(opts, 'ratePlan'),\n      'EId': _.get(opts, 'eId'),\n      'SimRegistrationCode': _.get(opts, 'simRegistrationCode'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SimPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SimInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Wireless.V1.SimList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SimListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SimPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a sim\n   *\n   * @function get\n   * @memberof Twilio.Wireless.V1.SimList#\n   *\n   * @param {string} sid - The SID of the Sim resource to fetch\n   *\n   * @returns {Twilio.Wireless.V1.SimContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SimListInstance.get = function get(sid) {\n    return new SimContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Wireless.V1.SimList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SimListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SimListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SimListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SimPage\n *\n * @constructor Twilio.Wireless.V1.SimPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SimSolution} solution - Path solution\n *\n * @returns SimPage\n */\n\n/* jshint ignore:end */\n\n\nSimPage = function SimPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SimPage.prototype, Page.prototype);\n\nSimPage.prototype.constructor = SimPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SimInstance\n *\n * @function getInstance\n * @memberof Twilio.Wireless.V1.SimPage#\n *\n * @param {SimPayload} payload - Payload response from the API\n *\n * @returns SimInstance\n */\n\n/* jshint ignore:end */\n\nSimPage.prototype.getInstance = function getInstance(payload) {\n  return new SimInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSimPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSimPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SimContext\n *\n * @constructor Twilio.Wireless.V1.SimInstance\n *\n * @property {string} sid - The unique string that identifies the Sim resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid -\n *          The SID of the Account to which the Sim resource belongs\n * @property {string} ratePlanSid -\n *          The SID of the RatePlan resource to which the Sim resource is assigned.\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Sim resource\n * @property {string} iccid - The ICCID associated with the SIM\n * @property {string} eId - Deprecated\n * @property {sim.status} status - The status of the Sim resource\n * @property {sim.reset_status} resetStatus -\n *          The connectivity reset status of the SIM\n * @property {string} commandsCallbackUrl -\n *          The URL we call when the SIM originates a machine-to-machine Command\n * @property {string} commandsCallbackMethod -\n *          The HTTP method we use to call commands_callback_url\n * @property {string} smsFallbackMethod -\n *          The HTTP method we use to call sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL we call when an error occurs while retrieving or executing the TwiML requested from the sms_url\n * @property {string} smsMethod - The HTTP method we use to call sms_url\n * @property {string} smsUrl -\n *          The URL we call when the SIM-connected device sends an SMS message that is not a Command\n * @property {string} voiceFallbackMethod -\n *          The HTTP method we use to call voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs while retrieving or executing the TwiML requested from voice_url\n * @property {string} voiceMethod - The HTTP method we use to call voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the SIM-connected device makes a voice call\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Sim resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related subresources\n * @property {string} ipAddress - Deprecated\n *\n * @param {V1} version - Version of the resource\n * @param {SimPayload} payload - The instance payload\n * @param {sid_like} sid - The SID of the Sim resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nSimInstance = function SimInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.ratePlanSid = payload.rate_plan_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.iccid = payload.iccid; // jshint ignore:line\n\n  this.eId = payload.e_id; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.resetStatus = payload.reset_status; // jshint ignore:line\n\n  this.commandsCallbackUrl = payload.commands_callback_url; // jshint ignore:line\n\n  this.commandsCallbackMethod = payload.commands_callback_method; // jshint ignore:line\n\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.ipAddress = payload.ip_address; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SimInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new SimContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SimInstance\n *\n * @function fetch\n * @memberof Twilio.Wireless.V1.SimInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SimInstance\n */\n\n/* jshint ignore:end */\n\nSimInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SimInstance\n *\n * @function update\n * @memberof Twilio.Wireless.V1.SimInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method we should use to call callback_url\n * @param {string} [opts.callbackUrl] -\n *          The URL we should call when the Sim resource has finished updating\n * @param {string} [opts.friendlyName] - A string to describe the Sim resource\n * @param {string} [opts.ratePlan] -\n *          The SID or unique name of the RatePlan resource to which the Sim resource should be assigned\n * @param {sim.status} [opts.status] - The new status of the Sim resource\n * @param {string} [opts.commandsCallbackMethod] -\n *          The HTTP method we should use to call commands_callback_url\n * @param {string} [opts.commandsCallbackUrl] -\n *          The URL we should call when the SIM sends a Command\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method we should use to call sms_fallback_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL we should call when an error occurs while retrieving or executing the TwiML requested from sms_url\n * @param {string} [opts.smsMethod] - The HTTP method we should use to call sms_url\n * @param {string} [opts.smsUrl] -\n *          The URL we should call when the SIM-connected device sends an SMS message that is not a Command\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method we should use to call voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs while retrieving or executing the TwiML requested from voice_url\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use when we call voice_url\n * @param {string} [opts.voiceUrl] -\n *          The URL we should call when the SIM-connected device makes a voice call\n * @param {sim.reset_status} [opts.resetStatus] -\n *          Initiate a connectivity reset on a SIM\n * @param {string} [opts.accountSid] -\n *          The SID of the Account to which the Sim resource should belong\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SimInstance\n */\n\n/* jshint ignore:end */\n\n\nSimInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SimInstance\n *\n * @function remove\n * @memberof Twilio.Wireless.V1.SimInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SimInstance\n */\n\n/* jshint ignore:end */\n\n\nSimInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the usageRecords\n *\n * @function usageRecords\n * @memberof Twilio.Wireless.V1.SimInstance#\n *\n * @returns {Twilio.Wireless.V1.SimContext.UsageRecordList}\n */\n\n/* jshint ignore:end */\n\n\nSimInstance.prototype.usageRecords = function usageRecords() {\n  return this._proxy.usageRecords;\n};\n/* jshint ignore:start */\n\n/**\n * Access the dataSessions\n *\n * @function dataSessions\n * @memberof Twilio.Wireless.V1.SimInstance#\n *\n * @returns {Twilio.Wireless.V1.SimContext.DataSessionList}\n */\n\n/* jshint ignore:end */\n\n\nSimInstance.prototype.dataSessions = function dataSessions() {\n  return this._proxy.dataSessions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSimInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSimInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SimContext\n *\n * @constructor Twilio.Wireless.V1.SimContext\n *\n * @property {Twilio.Wireless.V1.SimContext.UsageRecordList} usageRecords -\n *          usageRecords resource\n * @property {Twilio.Wireless.V1.SimContext.DataSessionList} dataSessions -\n *          dataSessions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID of the Sim resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nSimContext = function SimContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Sims/\".concat(sid); // Dependents\n\n  this._usageRecords = undefined;\n  this._dataSessions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SimInstance\n *\n * @function fetch\n * @memberof Twilio.Wireless.V1.SimContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SimInstance\n */\n\n/* jshint ignore:end */\n\n\nSimContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SimInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SimInstance\n *\n * @function update\n * @memberof Twilio.Wireless.V1.SimContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method we should use to call callback_url\n * @param {string} [opts.callbackUrl] -\n *          The URL we should call when the Sim resource has finished updating\n * @param {string} [opts.friendlyName] - A string to describe the Sim resource\n * @param {string} [opts.ratePlan] -\n *          The SID or unique name of the RatePlan resource to which the Sim resource should be assigned\n * @param {sim.status} [opts.status] - The new status of the Sim resource\n * @param {string} [opts.commandsCallbackMethod] -\n *          The HTTP method we should use to call commands_callback_url\n * @param {string} [opts.commandsCallbackUrl] -\n *          The URL we should call when the SIM sends a Command\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method we should use to call sms_fallback_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL we should call when an error occurs while retrieving or executing the TwiML requested from sms_url\n * @param {string} [opts.smsMethod] - The HTTP method we should use to call sms_url\n * @param {string} [opts.smsUrl] -\n *          The URL we should call when the SIM-connected device sends an SMS message that is not a Command\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method we should use to call voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs while retrieving or executing the TwiML requested from voice_url\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use when we call voice_url\n * @param {string} [opts.voiceUrl] -\n *          The URL we should call when the SIM-connected device makes a voice call\n * @param {sim.reset_status} [opts.resetStatus] -\n *          Initiate a connectivity reset on a SIM\n * @param {string} [opts.accountSid] -\n *          The SID of the Account to which the Sim resource should belong\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SimInstance\n */\n\n/* jshint ignore:end */\n\n\nSimContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'RatePlan': _.get(opts, 'ratePlan'),\n    'Status': _.get(opts, 'status'),\n    'CommandsCallbackMethod': _.get(opts, 'commandsCallbackMethod'),\n    'CommandsCallbackUrl': _.get(opts, 'commandsCallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'ResetStatus': _.get(opts, 'resetStatus'),\n    'AccountSid': _.get(opts, 'accountSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SimInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SimInstance\n *\n * @function remove\n * @memberof Twilio.Wireless.V1.SimContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SimInstance\n */\n\n/* jshint ignore:end */\n\n\nSimContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SimContext.prototype, 'usageRecords', {\n  get: function get() {\n    if (!this._usageRecords) {\n      this._usageRecords = new UsageRecordList(this._version, this._solution.sid);\n    }\n\n    return this._usageRecords;\n  }\n});\nObject.defineProperty(SimContext.prototype, 'dataSessions', {\n  get: function get() {\n    if (!this._dataSessions) {\n      this._dataSessions = new DataSessionList(this._version, this._solution.sid);\n    }\n\n    return this._dataSessions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Wireless.V1.SimContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nSimContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSimContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SimList: SimList,\n  SimPage: SimPage,\n  SimInstance: SimInstance,\n  SimContext: SimContext\n};","map":null,"metadata":{},"sourceType":"script"}