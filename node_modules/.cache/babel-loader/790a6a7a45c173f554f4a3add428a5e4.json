{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AuthorizedConnectAppList;\nvar AuthorizedConnectAppPage;\nvar AuthorizedConnectAppInstance;\nvar AuthorizedConnectAppContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizedConnectAppList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nAuthorizedConnectAppList = function AuthorizedConnectAppList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function authorizedConnectApps\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AuthorizedConnectAppContext}\n   */\n\n  /* jshint ignore:end */\n  function AuthorizedConnectAppListInstance(sid) {\n    return AuthorizedConnectAppListInstance.get(sid);\n  }\n\n  AuthorizedConnectAppListInstance._version = version; // Path Solution\n\n  AuthorizedConnectAppListInstance._solution = {\n    accountSid: accountSid\n  };\n  AuthorizedConnectAppListInstance._uri = \"/Accounts/\".concat(accountSid, \"/AuthorizedConnectApps.json\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams AuthorizedConnectAppInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AuthorizedConnectAppListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AuthorizedConnectAppInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizedConnectAppListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AuthorizedConnectAppInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizedConnectAppListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthorizedConnectAppPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AuthorizedConnectAppInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizedConnectAppListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthorizedConnectAppPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a authorized_connect_app\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList#\n   *\n   * @param {string} connectAppSid - The SID of the Connect App to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AuthorizedConnectAppContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizedConnectAppListInstance.get = function get(connectAppSid) {\n    return new AuthorizedConnectAppContext(this._version, this._solution.accountSid, connectAppSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthorizedConnectAppListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthorizedConnectAppListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthorizedConnectAppListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizedConnectAppPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AuthorizedConnectAppPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthorizedConnectAppSolution} solution - Path solution\n *\n * @returns AuthorizedConnectAppPage\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppPage = function AuthorizedConnectAppPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthorizedConnectAppPage.prototype, Page.prototype);\n\nAuthorizedConnectAppPage.prototype.constructor = AuthorizedConnectAppPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AuthorizedConnectAppInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppPage#\n *\n * @param {AuthorizedConnectAppPayload} payload - Payload response from the API\n *\n * @returns AuthorizedConnectAppInstance\n */\n\n/* jshint ignore:end */\n\nAuthorizedConnectAppPage.prototype.getInstance = function getInstance(payload) {\n  return new AuthorizedConnectAppInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthorizedConnectAppPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizedConnectAppContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AuthorizedConnectAppInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} connectAppCompanyName -\n *          The company name set for the Connect App\n * @property {string} connectAppDescription - A detailed description of the app\n * @property {string} connectAppFriendlyName - The name of the Connect App\n * @property {string} connectAppHomepageUrl - The public URL for the Connect App\n * @property {string} connectAppSid - The SID that we assigned to the Connect App\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {authorized_connect_app.permission} permissions -\n *          Permissions authorized to the app\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthorizedConnectAppPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} connectAppSid - The SID of the Connect App to fetch\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppInstance = function AuthorizedConnectAppInstance(version, payload, accountSid, connectAppSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.connectAppCompanyName = payload.connect_app_company_name; // jshint ignore:line\n\n  this.connectAppDescription = payload.connect_app_description; // jshint ignore:line\n\n  this.connectAppFriendlyName = payload.connect_app_friendly_name; // jshint ignore:line\n\n  this.connectAppHomepageUrl = payload.connect_app_homepage_url; // jshint ignore:line\n\n  this.connectAppSid = payload.connect_app_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.permissions = payload.permissions; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    connectAppSid: connectAppSid || this.connectAppSid\n  };\n};\n\nObject.defineProperty(AuthorizedConnectAppInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new AuthorizedConnectAppContext(this._version, this._solution.accountSid, this._solution.connectAppSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AuthorizedConnectAppInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthorizedConnectAppInstance\n */\n\n/* jshint ignore:end */\n\nAuthorizedConnectAppInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthorizedConnectAppInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthorizedConnectAppContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AuthorizedConnectAppContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} connectAppSid - The SID of the Connect App to fetch\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppContext = function AuthorizedConnectAppContext(version, accountSid, connectAppSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    connectAppSid: connectAppSid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/AuthorizedConnectApps/\").concat(connectAppSid, \".json\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AuthorizedConnectAppInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthorizedConnectAppInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AuthorizedConnectAppInstance(this._version, payload, this._solution.accountSid, this._solution.connectAppSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AuthorizedConnectAppContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthorizedConnectAppContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAuthorizedConnectAppContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthorizedConnectAppList: AuthorizedConnectAppList,\n  AuthorizedConnectAppPage: AuthorizedConnectAppPage,\n  AuthorizedConnectAppInstance: AuthorizedConnectAppInstance,\n  AuthorizedConnectAppContext: AuthorizedConnectAppContext\n};","map":null,"metadata":{},"sourceType":"script"}