{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ExportConfigurationList;\nvar ExportConfigurationPage;\nvar ExportConfigurationInstance;\nvar ExportConfigurationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportConfigurationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Bulkexports.V1.ExportConfigurationList\n *\n * @param {Twilio.Bulkexports.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nExportConfigurationList = function ExportConfigurationList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function exportConfiguration\n   * @memberof Twilio.Bulkexports.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Bulkexports.V1.ExportConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n  function ExportConfigurationListInstance(sid) {\n    return ExportConfigurationListInstance.get(sid);\n  }\n\n  ExportConfigurationListInstance._version = version; // Path Solution\n\n  ExportConfigurationListInstance._solution = {};\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a export_configuration\n   *\n   * @function get\n   * @memberof Twilio.Bulkexports.V1.ExportConfigurationList#\n   *\n   * @param {string} resourceType - The type of communication – Messages, Calls\n   *\n   * @returns {Twilio.Bulkexports.V1.ExportConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n\n  ExportConfigurationListInstance.get = function get(resourceType) {\n    return new ExportConfigurationContext(this._version, resourceType);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Bulkexports.V1.ExportConfigurationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ExportConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ExportConfigurationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ExportConfigurationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportConfigurationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Bulkexports.V1.ExportConfigurationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ExportConfigurationSolution} solution - Path solution\n *\n * @returns ExportConfigurationPage\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationPage = function ExportConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ExportConfigurationPage.prototype, Page.prototype);\n\nExportConfigurationPage.prototype.constructor = ExportConfigurationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ExportConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationPage#\n *\n * @param {ExportConfigurationPayload} payload - Payload response from the API\n *\n * @returns ExportConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nExportConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new ExportConfigurationInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExportConfigurationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportConfigurationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Bulkexports.V1.ExportConfigurationInstance\n *\n * @property {boolean} enabled - Whether files are automatically generated\n * @property {string} webhookUrl - URL targeted at export\n * @property {string} webhookMethod - Whether to GET or POST to the webhook url\n * @property {string} resourceType - The type of communication – Messages, Calls\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {ExportConfigurationPayload} payload - The instance payload\n * @param {string} resourceType - The type of communication – Messages, Calls\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationInstance = function ExportConfigurationInstance(version, payload, resourceType) {\n  this._version = version; // Marshaled Properties\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n\n  this.webhookMethod = payload.webhook_method; // jshint ignore:line\n\n  this.resourceType = payload.resource_type; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    resourceType: resourceType || this.resourceType\n  };\n};\n\nObject.defineProperty(ExportConfigurationInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ExportConfigurationContext(this._version, this._solution.resourceType);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ExportConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExportConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nExportConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ExportConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.enabled] - Whether files are automatically generated\n * @param {string} [opts.webhookUrl] - URL targeted at export\n * @param {string} [opts.webhookMethod] - Whether to GET or POST to the webhook url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExportConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExportConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportConfigurationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Bulkexports.V1.ExportConfigurationContext\n *\n * @param {V1} version - Version of the resource\n * @param {string} resourceType - The type of communication – Messages, Calls\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationContext = function ExportConfigurationContext(version, resourceType) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    resourceType: resourceType\n  };\n  this._uri = \"/Exports/\".concat(resourceType, \"/Configuration\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ExportConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExportConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ExportConfigurationInstance(this._version, payload, this._solution.resourceType));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ExportConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.enabled] - Whether files are automatically generated\n * @param {string} [opts.webhookUrl] - URL targeted at export\n * @param {string} [opts.webhookMethod] - Whether to GET or POST to the webhook url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExportConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'WebhookUrl': _.get(opts, 'webhookUrl'),\n    'WebhookMethod': _.get(opts, 'webhookMethod')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ExportConfigurationInstance(this._version, payload, this._solution.resourceType));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportConfigurationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExportConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nExportConfigurationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ExportConfigurationList: ExportConfigurationList,\n  ExportConfigurationPage: ExportConfigurationPage,\n  ExportConfigurationInstance: ExportConfigurationInstance,\n  ExportConfigurationContext: ExportConfigurationContext\n};","map":null,"metadata":{},"sourceType":"script"}