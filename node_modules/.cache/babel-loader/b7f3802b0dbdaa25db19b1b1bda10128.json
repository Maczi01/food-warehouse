{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FaxMediaList = require('./fax/faxMedia').FaxMediaList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar FaxList;\nvar FaxPage;\nvar FaxInstance;\nvar FaxContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nFaxList = function FaxList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function faxes\n   * @memberof Twilio.Fax.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n\n  /* jshint ignore:end */\n  function FaxListInstance(sid) {\n    return FaxListInstance.get(sid);\n  }\n\n  FaxListInstance._version = version; // Path Solution\n\n  FaxListInstance._solution = {};\n  FaxListInstance._uri = \"/Faxes\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams FaxInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FaxListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FaxInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'DateCreatedOnOrBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedOnOrBefore')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a FaxInstance\n   *\n   * @function create\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number to receive the fax\n   * @param {string} opts.mediaUrl - The URL of the PDF that contains the fax\n   * @param {fax.quality} [opts.quality] - The quality of this fax\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.from] - The number the fax was sent from\n   * @param {string} [opts.sipAuthUsername] - The username for SIP authentication\n   * @param {string} [opts.sipAuthPassword] - The password for SIP authentication\n   * @param {boolean} [opts.storeMedia] - Whether to store a copy of the sent media\n   * @param {number} [opts.ttl] - How long in minutes to try to send the fax\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FaxInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.mediaUrl)) {\n      throw new Error('Required parameter \"opts.mediaUrl\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'MediaUrl': _.get(opts, 'mediaUrl'),\n      'Quality': _.get(opts, 'quality'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'From': _.get(opts, 'from'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'StoreMedia': serialize.bool(_.get(opts, 'storeMedia')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a fax\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.get = function get(sid) {\n    return new FaxContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FaxListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FaxListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxSolution} solution - Path solution\n *\n * @returns FaxPage\n */\n\n/* jshint ignore:end */\n\n\nFaxPage = function FaxPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FaxPage.prototype, Page.prototype);\n\nFaxPage.prototype.constructor = FaxPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FaxInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @param {FaxPayload} payload - Payload response from the API\n *\n * @returns FaxInstance\n */\n\n/* jshint ignore:end */\n\nFaxPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFaxPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} from - The number the fax was sent from\n * @property {string} to - The phone number that received the fax\n * @property {fax.quality} quality - The quality of the fax\n * @property {string} mediaSid -\n *          The SID of the FaxMedia resource that is associated with the Fax\n * @property {string} mediaUrl -\n *          The Twilio-hosted URL that can be used to download fax media\n * @property {number} numPages - The number of pages contained in the fax document\n * @property {number} duration - The time it took to transmit the fax\n * @property {fax.status} status - The status of the fax\n * @property {fax.direction} direction - The direction of the fax\n * @property {string} apiVersion - The API version used to transmit the fax\n * @property {number} price - The fax transmission price\n * @property {string} priceUnit - The ISO 4217 currency used for billing\n * @property {Date} dateCreated -\n *          The ISO 8601 formatted date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 formatted date and time in GMT when the resource was last updated\n * @property {string} links - The URLs of the fax's related resources\n * @property {string} url - The absolute URL of the fax resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance = function FaxInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.quality = payload.quality; // jshint ignore:line\n\n  this.mediaSid = payload.media_sid; // jshint ignore:line\n\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n\n  this.numPages = deserialize.integer(payload.num_pages); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FaxInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FaxContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\nFaxInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns {Twilio.Fax.V1.FaxContext.FaxMediaList}\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFaxInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext\n *\n * @property {Twilio.Fax.V1.FaxContext.FaxMediaList} media - media resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nFaxContext = function FaxContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Faxes/\".concat(sid); // Dependents\n\n  this._media = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FaxContext.prototype, 'media', {\n  get: function get() {\n    if (!this._media) {\n      this._media = new FaxMediaList(this._version, this._solution.sid);\n    }\n\n    return this._media;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFaxContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFaxContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FaxList: FaxList,\n  FaxPage: FaxPage,\n  FaxInstance: FaxInstance,\n  FaxContext: FaxContext\n};","map":null,"metadata":{},"sourceType":"script"}