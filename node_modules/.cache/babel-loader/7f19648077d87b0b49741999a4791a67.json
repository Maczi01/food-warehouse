{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar UserBindingList;\nvar UserBindingPage;\nvar UserBindingInstance;\nvar UserBindingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User with the binding\n */\n\n/* jshint ignore:end */\n\nUserBindingList = function UserBindingList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function userBindings\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingContext}\n   */\n\n  /* jshint ignore:end */\n  function UserBindingListInstance(sid) {\n    return UserBindingListInstance.get(sid);\n  }\n\n  UserBindingListInstance._version = version; // Path Solution\n\n  UserBindingListInstance._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid\n  };\n  UserBindingListInstance._uri = \"/Services/\".concat(serviceSid, \"/Users/\").concat(userSid, \"/Bindings\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams UserBindingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  UserBindingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists UserBindingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of UserBindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'BindingType': serialize.map(_.get(opts, 'bindingType'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserBindingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of UserBindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserBindingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a user_binding\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {string} sid - The SID of the User Binding resource to fetch\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.get = function get(sid) {\n    return new UserBindingContext(this._version, this._solution.serviceSid, this._solution.userSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserBindingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserBindingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingPage\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserBindingSolution} solution - Path solution\n *\n * @returns UserBindingPage\n */\n\n/* jshint ignore:end */\n\n\nUserBindingPage = function UserBindingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserBindingPage.prototype, Page.prototype);\n\nUserBindingPage.prototype.constructor = UserBindingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of UserBindingInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingPage#\n *\n * @param {UserBindingPayload} payload - Payload response from the API\n *\n * @returns UserBindingInstance\n */\n\n/* jshint ignore:end */\n\nUserBindingPage.prototype.getInstance = function getInstance(payload) {\n  return new UserBindingInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserBindingPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserBindingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} endpoint -\n *          The unique endpoint identifier for the User Binding\n * @property {string} identity - The string that identifies the resource's User\n * @property {string} userSid - The SID of the User with the binding\n * @property {string} credentialSid - The SID of the Credential for the binding\n * @property {user_binding.binding_type} bindingType -\n *          The push technology to use for the binding\n * @property {string} messageTypes -\n *          The Programmable Chat message types the binding is subscribed to\n * @property {string} url - The absolute URL of the User Binding resource\n *\n * @param {V2} version - Version of the resource\n * @param {UserBindingPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User with the binding\n * @param {sid} sid - The SID of the User Binding resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nUserBindingInstance = function UserBindingInstance(version, payload, serviceSid, userSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.endpoint = payload.endpoint; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.userSid = payload.user_sid; // jshint ignore:line\n\n  this.credentialSid = payload.credential_sid; // jshint ignore:line\n\n  this.bindingType = payload.binding_type; // jshint ignore:line\n\n  this.messageTypes = payload.message_types; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(UserBindingInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new UserBindingContext(this._version, this._solution.serviceSid, this._solution.userSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a UserBindingInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\nUserBindingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserBindingInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\n\nUserBindingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserBindingInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserBindingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} userSid - The SID of the User with the binding\n * @param {sid} sid - The SID of the User Binding resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext = function UserBindingContext(version, serviceSid, userSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Users/\").concat(userSid, \"/Bindings/\").concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a UserBindingInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserBindingInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserBindingInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserBindingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserBindingList: UserBindingList,\n  UserBindingPage: UserBindingPage,\n  UserBindingInstance: UserBindingInstance,\n  UserBindingContext: UserBindingContext\n};","map":null,"metadata":{},"sourceType":"script"}