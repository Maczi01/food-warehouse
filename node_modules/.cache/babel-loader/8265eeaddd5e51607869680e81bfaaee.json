{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject;\n\n  var _require = require('./Utility');\n\n  isPlainObject = _require.isPlainObject;\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLStringifier = require('./XMLStringifier');\n  XMLStringWriter = require('./XMLStringWriter'); // Represents an XML builder\n\n  module.exports = XMLDocument = function () {\n    var XMLDocument = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLDocument, _XMLNode);\n\n      // Initializes a new instance of `XMLDocument`\n      // `options.keepNullNodes` whether nodes with null values will be kept\n      //     or ignored: true or false\n      // `options.keepNullAttributes` whether attributes with null values will be\n      //     kept or ignored: true or false\n      // `options.ignoreDecorators` whether decorator strings will be ignored when\n      //     converting JS objects: true or false\n      // `options.separateArrayItems` whether array items are created as separate\n      //     nodes when passed as an object value: true or false\n      // `options.noDoubleEncoding` whether existing html entities are encoded:\n      //     true or false\n      // `options.stringify` a set of functions to use for converting values to\n      //     strings\n      // `options.writer` the default XML writer to use for converting nodes to\n      //     string. If the default writer is not set, the built-in XMLStringWriter\n      //     will be used instead.\n      function XMLDocument(options) {\n        var _this;\n\n        _classCallCheck(this, XMLDocument);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLDocument).call(this, null));\n        _this.name = \"#document\";\n        _this.type = NodeType.Document;\n        _this.documentURI = null;\n        _this.domConfig = new XMLDOMConfiguration();\n        options || (options = {});\n\n        if (!options.writer) {\n          options.writer = new XMLStringWriter();\n        }\n\n        _this.options = options;\n        _this.stringify = new XMLStringifier(options);\n        return _this;\n      } // Ends the document and passes it to the given XML writer\n      // `writer` is either an XML writer or a plain object to pass to the\n      // constructor of the default XML writer. The default writer is assigned when\n      // creating the XML document. Following flags are recognized by the\n      // built-in XMLStringWriter:\n      //   `writer.pretty` pretty prints the result\n      //   `writer.indent` indentation for pretty print\n      //   `writer.offset` how many indentations to add to every line for pretty print\n      //   `writer.newline` newline sequence for pretty print\n\n\n      _createClass(XMLDocument, [{\n        key: \"end\",\n        value: function end(writer) {\n          var writerOptions;\n          writerOptions = {};\n\n          if (!writer) {\n            writer = this.options.writer;\n          } else if (isPlainObject(writer)) {\n            writerOptions = writer;\n            writer = this.options.writer;\n          }\n\n          return writer.document(this, writer.filterOptions(writerOptions));\n        } // Converts the XML document to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.document(this, this.options.writer.filterOptions(options));\n        } // DOM level 1 functions to be implemented later\n\n      }, {\n        key: \"createElement\",\n        value: function createElement(tagName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createDocumentFragment\",\n        value: function createDocumentFragment() {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createTextNode\",\n        value: function createTextNode(data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createComment\",\n        value: function createComment(data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createCDATASection\",\n        value: function createCDATASection(data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createProcessingInstruction\",\n        value: function createProcessingInstruction(target, data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createAttribute\",\n        value: function createAttribute(name) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createEntityReference\",\n        value: function createEntityReference(name) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagName\",\n        value: function getElementsByTagName(tagname) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 2 functions to be implemented later\n\n      }, {\n        key: \"importNode\",\n        value: function importNode(importedNode, deep) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createElementNS\",\n        value: function createElementNS(namespaceURI, qualifiedName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createAttributeNS\",\n        value: function createAttributeNS(namespaceURI, qualifiedName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagNameNS\",\n        value: function getElementsByTagNameNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementById\",\n        value: function getElementById(elementId) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 3 functions to be implemented later\n\n      }, {\n        key: \"adoptNode\",\n        value: function adoptNode(source) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"normalizeDocument\",\n        value: function normalizeDocument() {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"renameNode\",\n        value: function renameNode(node, namespaceURI, qualifiedName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 4 functions to be implemented later\n\n      }, {\n        key: \"getElementsByClassName\",\n        value: function getElementsByClassName(classNames) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createEvent\",\n        value: function createEvent(eventInterface) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createRange\",\n        value: function createRange() {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createNodeIterator\",\n        value: function createNodeIterator(root, whatToShow, filter) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createTreeWalker\",\n        value: function createTreeWalker(root, whatToShow, filter) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }]);\n\n      return XMLDocument;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function get() {\n        var child, i, len, ref;\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function get() {\n        return this.rootObject || null;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function get() {\n        return false;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function get() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function get() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function get() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function get() {\n        return this.documentURI;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function get() {\n        return null;\n      }\n    });\n    return XMLDocument;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}