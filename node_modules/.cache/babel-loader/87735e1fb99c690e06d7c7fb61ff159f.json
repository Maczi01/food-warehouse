{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkersStatisticsList;\nvar WorkersStatisticsPage;\nvar WorkersStatisticsInstance;\nvar WorkersStatisticsContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkersStatisticsList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Worker\n */\n\n/* jshint ignore:end */\n\nWorkersStatisticsList = function WorkersStatisticsList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function statistics\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkersStatisticsListInstance(sid) {\n    return WorkersStatisticsListInstance.get(sid);\n  }\n\n  WorkersStatisticsListInstance._version = version; // Path Solution\n\n  WorkersStatisticsListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a workers_statistics\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsList#\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsContext}\n   */\n\n  /* jshint ignore:end */\n\n  WorkersStatisticsListInstance.get = function get() {\n    return new WorkersStatisticsContext(this._version, this._solution.workspaceSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkersStatisticsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkersStatisticsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkersStatisticsListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkersStatisticsPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkersStatisticsSolution} solution - Path solution\n *\n * @returns WorkersStatisticsPage\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsPage = function WorkersStatisticsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkersStatisticsPage.prototype, Page.prototype);\n\nWorkersStatisticsPage.prototype.constructor = WorkersStatisticsPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkersStatisticsInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsPage#\n *\n * @param {WorkersStatisticsPayload} payload - Payload response from the API\n *\n * @returns WorkersStatisticsInstance\n */\n\n/* jshint ignore:end */\n\nWorkersStatisticsPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkersStatisticsInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkersStatisticsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkersStatisticsContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsInstance\n *\n * @property {object} realtime -\n *          An object that contains the real-time statistics for the Worker\n * @property {object} cumulative -\n *          An object that contains the cumulative statistics for the Worker\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Worker\n * @property {string} url - The absolute URL of the Worker statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {WorkersStatisticsPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Worker\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsInstance = function WorkersStatisticsInstance(version, payload, workspaceSid) {\n  this._version = version; // Marshaled Properties\n\n  this.realtime = payload.realtime; // jshint ignore:line\n\n  this.cumulative = payload.cumulative; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid\n  };\n};\n\nObject.defineProperty(WorkersStatisticsInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WorkersStatisticsContext(this._version, this._solution.workspaceSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkersStatisticsInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.minutes] -\n *          Only calculate statistics since this many minutes in the past\n * @param {Date} [opts.startDate] -\n *          Only calculate statistics from on or after this date\n * @param {Date} [opts.endDate] -\n *          Only calculate statistics from this date and time and earlier\n * @param {string} [opts.taskQueueSid] -\n *          The SID of the TaskQueue for which to fetch Worker statistics\n * @param {string} [opts.taskQueueName] -\n *          The friendly_name of the TaskQueue for which to fetch Worker statistics\n * @param {string} [opts.friendlyName] -\n *          Only include Workers with `friendly_name` values that match this parameter\n * @param {string} [opts.taskChannel] -\n *          Only calculate statistics on this TaskChannel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkersStatisticsInstance\n */\n\n/* jshint ignore:end */\n\nWorkersStatisticsInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkersStatisticsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkersStatisticsContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Worker to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsContext = function WorkersStatisticsContext(version, workspaceSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workers/Statistics\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkersStatisticsInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.minutes] -\n *          Only calculate statistics since this many minutes in the past\n * @param {Date} [opts.startDate] -\n *          Only calculate statistics from on or after this date\n * @param {Date} [opts.endDate] -\n *          Only calculate statistics from this date and time and earlier\n * @param {string} [opts.taskQueueSid] -\n *          The SID of the TaskQueue for which to fetch Worker statistics\n * @param {string} [opts.taskQueueName] -\n *          The friendly_name of the TaskQueue for which to fetch Worker statistics\n * @param {string} [opts.friendlyName] -\n *          Only include Workers with `friendly_name` values that match this parameter\n * @param {string} [opts.taskChannel] -\n *          Only calculate statistics on this TaskChannel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkersStatisticsInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Minutes': _.get(opts, 'minutes'),\n    'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n    'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n    'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n    'TaskQueueName': _.get(opts, 'taskQueueName'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TaskChannel': _.get(opts, 'taskChannel')\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    params: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkersStatisticsInstance(this._version, payload, this._solution.workspaceSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersStatisticsContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkersStatisticsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkersStatisticsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkersStatisticsList: WorkersStatisticsList,\n  WorkersStatisticsPage: WorkersStatisticsPage,\n  WorkersStatisticsInstance: WorkersStatisticsInstance,\n  WorkersStatisticsContext: WorkersStatisticsContext\n};","map":null,"metadata":{},"sourceType":"script"}