{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ReservationList = require('./worker/reservation').ReservationList;\n\nvar WorkerChannelList = require('./worker/workerChannel').WorkerChannelList;\n\nvar WorkerStatisticsList = require('./worker/workerStatistics').WorkerStatisticsList;\n\nvar WorkersCumulativeStatisticsList = require('./worker/workersCumulativeStatistics').WorkersCumulativeStatisticsList;\n\nvar WorkersRealTimeStatisticsList = require('./worker/workersRealTimeStatistics').WorkersRealTimeStatisticsList;\n\nvar WorkersStatisticsList = require('./worker/workersStatistics').WorkersStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkerList;\nvar WorkerPage;\nvar WorkerInstance;\nvar WorkerContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Worker\n */\n\n/* jshint ignore:end */\n\nWorkerList = function WorkerList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function workers\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkerListInstance(sid) {\n    return WorkerListInstance.get(sid);\n  }\n\n  WorkerListInstance._version = version; // Path Solution\n\n  WorkerListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  WorkerListInstance._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workers\"); // Components\n\n  WorkerListInstance._statistics = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * Streams WorkerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  WorkerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists WorkerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActivityName': _.get(opts, 'activityName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Available': _.get(opts, 'available'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkersExpression': _.get(opts, 'targetWorkersExpression'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a WorkerInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.activitySid] -\n   *          The SID of a valid Activity that describes the new Worker's initial state\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that describes the new Worker\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkerInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a worker\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.get = function get(sid) {\n    return new WorkerContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(WorkerListInstance, 'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new WorkersStatisticsList(this._version, this._solution.workspaceSid);\n      }\n\n      return this._statistics;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  WorkerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkerListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerSolution} solution - Path solution\n *\n * @returns WorkerPage\n */\n\n/* jshint ignore:end */\n\n\nWorkerPage = function WorkerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkerPage.prototype, Page.prototype);\n\nWorkerPage.prototype.constructor = WorkerPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkerInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @param {WorkerPayload} payload - Payload response from the API\n *\n * @returns WorkerInstance\n */\n\n/* jshint ignore:end */\n\nWorkerPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkerPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} activityName -\n *          The friendly_name of the Worker's current Activity\n * @property {string} activitySid - The SID of the Worker's current Activity\n * @property {string} attributes - The JSON string that describes the Worker\n * @property {boolean} available - Whether the Worker is available to perform tasks\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateStatusChanged -\n *          The date and time in GMT of the last change to the Worker's activity\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Worker\n * @property {string} url - The absolute URL of the Worker resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Worker\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance = function WorkerInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.activityName = payload.activity_name; // jshint ignore:line\n\n  this.activitySid = payload.activity_sid; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.available = payload.available; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateStatusChanged = deserialize.iso8601DateTime(payload.date_status_changed); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(WorkerInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WorkerContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\nWorkerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] -\n *          The SID of the Activity that describes the Worker's initial state\n * @param {string} [opts.attributes] - The JSON string that describes the Worker\n * @param {string} [opts.friendlyName] - A string to describe the Worker\n * @param {boolean} [opts.rejectPendingReservations] -\n *          Whether to reject pending reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n/* jshint ignore:start */\n\n/**\n * Access the workerChannels\n *\n * @function workerChannels\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.workerChannels = function workerChannels() {\n  return this._proxy.workerChannels;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList} reservations -\n *          reservations resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList} workerChannels -\n *          workerChannels resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Worker to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext = function WorkerContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workers/\").concat(sid); // Dependents\n\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n  this._statistics = undefined;\n  this._reservations = undefined;\n  this._workerChannels = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] -\n *          The SID of the Activity that describes the Worker's initial state\n * @param {string} [opts.attributes] - The JSON string that describes the Worker\n * @param {string} [opts.friendlyName] - A string to describe the Worker\n * @param {boolean} [opts.rejectPendingReservations] -\n *          Whether to reject pending reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ActivitySid': _.get(opts, 'activitySid'),\n    'Attributes': _.get(opts, 'attributes'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'RejectPendingReservations': serialize.bool(_.get(opts, 'rejectPendingReservations'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkerContext.prototype, 'realTimeStatistics', {\n  get: function get() {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkersRealTimeStatisticsList(this._version, this._solution.workspaceSid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'cumulativeStatistics', {\n  get: function get() {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkersCumulativeStatisticsList(this._version, this._solution.workspaceSid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'statistics', {\n  get: function get() {\n    if (!this._statistics) {\n      this._statistics = new WorkerStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'reservations', {\n  get: function get() {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._reservations;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'workerChannels', {\n  get: function get() {\n    if (!this._workerChannels) {\n      this._workerChannels = new WorkerChannelList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._workerChannels;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nWorkerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkerList: WorkerList,\n  WorkerPage: WorkerPage,\n  WorkerInstance: WorkerInstance,\n  WorkerContext: WorkerContext\n};","map":null,"metadata":{},"sourceType":"script"}