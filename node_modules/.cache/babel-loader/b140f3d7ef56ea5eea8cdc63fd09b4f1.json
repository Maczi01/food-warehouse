{"ast":null,"code":"// Generated by CoffeeScript 1.7.1\n(function () {\n  var Pointer, VoidPointer, utils;\n  utils = require('./utils');\n\n  Pointer = function () {\n    function Pointer(offsetType, type, options) {\n      var _base, _base1, _base2, _base3;\n\n      this.offsetType = offsetType;\n      this.type = type;\n      this.options = options != null ? options : {};\n\n      if (this.type === 'void') {\n        this.type = null;\n      }\n\n      if ((_base = this.options).type == null) {\n        _base.type = 'local';\n      }\n\n      if ((_base1 = this.options).allowNull == null) {\n        _base1.allowNull = true;\n      }\n\n      if ((_base2 = this.options).nullValue == null) {\n        _base2.nullValue = 0;\n      }\n\n      if ((_base3 = this.options).lazy == null) {\n        _base3.lazy = false;\n      }\n\n      if (this.options.relativeTo) {\n        this.relativeToGetter = new Function('ctx', \"return ctx.\" + this.options.relativeTo);\n      }\n    }\n\n    Pointer.prototype.decode = function (stream, ctx) {\n      var c, decodeValue, offset, ptr, relative, val;\n      offset = this.offsetType.decode(stream, ctx);\n\n      if (offset === this.options.nullValue && this.options.allowNull) {\n        return null;\n      }\n\n      relative = function () {\n        switch (this.options.type) {\n          case 'local':\n            return ctx._startOffset;\n\n          case 'immediate':\n            return stream.pos - this.offsetType.size();\n\n          case 'parent':\n            return ctx.parent._startOffset;\n\n          default:\n            c = ctx;\n\n            while (c.parent) {\n              c = c.parent;\n            }\n\n            return c._startOffset || 0;\n        }\n      }.call(this);\n\n      if (this.options.relativeTo) {\n        relative += this.relativeToGetter(ctx);\n      }\n\n      ptr = offset + relative;\n\n      if (this.type != null) {\n        val = null;\n\n        decodeValue = function (_this) {\n          return function () {\n            var pos;\n\n            if (val != null) {\n              return val;\n            }\n\n            pos = stream.pos;\n            stream.pos = ptr;\n            val = _this.type.decode(stream, ctx);\n            stream.pos = pos;\n            return val;\n          };\n        }(this);\n\n        if (this.options.lazy) {\n          return new utils.PropertyDescriptor({\n            get: decodeValue\n          });\n        }\n\n        return decodeValue();\n      } else {\n        return ptr;\n      }\n    };\n\n    Pointer.prototype.size = function (val, ctx) {\n      var parent, type;\n      parent = ctx;\n\n      switch (this.options.type) {\n        case 'local':\n        case 'immediate':\n          break;\n\n        case 'parent':\n          ctx = ctx.parent;\n          break;\n\n        default:\n          while (ctx.parent) {\n            ctx = ctx.parent;\n          }\n\n      }\n\n      type = this.type;\n\n      if (type == null) {\n        if (!(val instanceof VoidPointer)) {\n          throw new Error(\"Must be a VoidPointer\");\n        }\n\n        type = val.type;\n        val = val.value;\n      }\n\n      if (val && ctx) {\n        ctx.pointerSize += type.size(val, parent);\n      }\n\n      return this.offsetType.size();\n    };\n\n    Pointer.prototype.encode = function (stream, val, ctx) {\n      var parent, relative, type;\n      parent = ctx;\n\n      if (val == null) {\n        this.offsetType.encode(stream, this.options.nullValue);\n        return;\n      }\n\n      switch (this.options.type) {\n        case 'local':\n          relative = ctx.startOffset;\n          break;\n\n        case 'immediate':\n          relative = stream.pos + this.offsetType.size(val, parent);\n          break;\n\n        case 'parent':\n          ctx = ctx.parent;\n          relative = ctx.startOffset;\n          break;\n\n        default:\n          relative = 0;\n\n          while (ctx.parent) {\n            ctx = ctx.parent;\n          }\n\n      }\n\n      if (this.options.relativeTo) {\n        relative += this.relativeToGetter(parent.val);\n      }\n\n      this.offsetType.encode(stream, ctx.pointerOffset - relative);\n      type = this.type;\n\n      if (type == null) {\n        if (!(val instanceof VoidPointer)) {\n          throw new Error(\"Must be a VoidPointer\");\n        }\n\n        type = val.type;\n        val = val.value;\n      }\n\n      ctx.pointers.push({\n        type: type,\n        val: val,\n        parent: parent\n      });\n      return ctx.pointerOffset += type.size(val, parent);\n    };\n\n    return Pointer;\n  }();\n\n  VoidPointer = function () {\n    function VoidPointer(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    return VoidPointer;\n  }();\n\n  exports.Pointer = Pointer;\n  exports.VoidPointer = VoidPointer;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}