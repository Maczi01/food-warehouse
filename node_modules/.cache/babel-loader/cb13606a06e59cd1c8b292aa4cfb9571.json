{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar jwt = require('jsonwebtoken');\n\nvar qs = require('querystring');\n/**\n * @constructor\n * @param filters\n */\n\n\nfunction EventStreamScope(filters) {\n  this.filters = filters || {};\n}\n\n_.extend(EventStreamScope.prototype, {\n  scope: 'scope:stream:subscribe',\n  payload: function payload() {\n    var queryArgs = ['path=/2010-04-01/Events'];\n\n    if (!_.isEmpty(this.filters)) {\n      var queryParams = _.map(this.filters, function (value, key) {\n        return _.join([qs.escape(key), qs.escape(value)], '=');\n      });\n\n      var filterParams = _.join(queryParams, '&');\n\n      queryArgs.push(_.join(['appParams', qs.escape(filterParams)], '='));\n    }\n\n    var queryString = _.join(queryArgs, '&');\n\n    return _.join([this.scope, queryString], '?');\n  }\n});\n/**\n * @constructor\n * @param clientName\n */\n\n\nfunction IncomingClientScope(clientName) {\n  this.clientName = clientName;\n}\n\n_.extend(IncomingClientScope.prototype, {\n  scope: 'scope:client:incoming',\n  payload: function payload() {\n    var query = _.join(['clientName', qs.escape(this.clientName)], '=');\n\n    return _.join([this.scope, query], '?');\n  }\n});\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.applicationSid - the application sid\n * @param {string} [options.clientName] - the client name\n * @param {object} [options.params] - parameters\n */\n\n\nfunction OutgoingClientScope(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n\n  if (_.isUndefined(options.applicationSid)) {\n    throw new Error('Required parameter \"options.applicationSid\" missing.');\n  }\n\n  options = options || {};\n  this.applicationSid = options.applicationSid;\n  this.clientName = options.clientName;\n  this.params = options.params;\n}\n\n_.extend(OutgoingClientScope.prototype, {\n  scope: 'scope:client:outgoing',\n  payload: function payload() {\n    var queryArgs = [_.join(['appSid', qs.escape(this.applicationSid)], '=')];\n\n    if (_.isString(this.clientName)) {\n      queryArgs.push(_.join(['clientName', qs.escape(this.clientName)], '='));\n    }\n\n    if (_.isObject(this.params)) {\n      var queryParams = _.map(this.params, function (value, key) {\n        return _.join([qs.escape(key), qs.escape(value)], '=');\n      });\n\n      var filterParams = _.join(queryParams, '&');\n\n      queryArgs.push(_.join(['appParams', qs.escape(filterParams)], '='));\n    }\n\n    var queryString = _.join(queryArgs, '&');\n\n    return _.join([this.scope, queryString], '?');\n  }\n});\n/**\n * @constructor\n * @param options\n */\n\n\nfunction ClientCapability(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n\n  if (_.isUndefined(options.accountSid)) {\n    throw new Error('Required parameter \"options.accountSid\" missing.');\n  }\n\n  if (_.isUndefined(options.authToken)) {\n    throw new Error('Required parameter \"options.authToken\" missing.');\n  }\n\n  options = options || {};\n  this.accountSid = options.accountSid;\n  this.authToken = options.authToken;\n  this.ttl = options.ttl || 3600;\n  this.scopes = [];\n}\n\nClientCapability.EventStreamScope = EventStreamScope;\nClientCapability.IncomingClientScope = IncomingClientScope;\nClientCapability.OutgoingClientScope = OutgoingClientScope;\n\n_.extend(ClientCapability.prototype, {\n  addScope: function addScope(scope) {\n    this.scopes.push(scope);\n  },\n  toJwt: function toJwt() {\n    var payload = {\n      scope: _.join(_.map(this.scopes, function (scope) {\n        return scope.payload();\n      }), ' '),\n      iss: this.accountSid,\n      exp: Math.floor(new Date() / 1000) + this.ttl\n    };\n    return jwt.sign(payload, this.authToken);\n  }\n});\n\nmodule.exports = ClientCapability;","map":null,"metadata":{},"sourceType":"script"}