{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLAttribute, XMLNode;\n  NodeType = require('./NodeType');\n  XMLNode = require('./XMLNode'); // Represents an attribute\n\n  module.exports = XMLAttribute = function () {\n    var XMLAttribute = /*#__PURE__*/function () {\n      \"use strict\";\n\n      // Initializes a new instance of `XMLAttribute`\n      // `parent` the parent node\n      // `name` attribute target\n      // `value` attribute value\n      function XMLAttribute(parent, name, value) {\n        _classCallCheck(this, XMLAttribute);\n\n        this.parent = parent;\n\n        if (this.parent) {\n          this.options = this.parent.options;\n          this.stringify = this.parent.stringify;\n        }\n\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n        }\n\n        this.name = this.stringify.name(name);\n        this.value = this.stringify.attValue(value);\n        this.type = NodeType.Attribute; // DOM level 3\n\n        this.isId = false;\n        this.schemaTypeInfo = null;\n      } // Creates and returns a deep clone of `this`\n\n\n      _createClass(XMLAttribute, [{\n        key: \"clone\",\n        value: function clone() {\n          return Object.create(this);\n        } // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n        } // Returns debug string for this node\n\n      }, {\n        key: \"debugInfo\",\n        value: function debugInfo(name) {\n          name = name || this.name;\n\n          if (name == null) {\n            return \"parent: <\" + this.parent.name + \">\";\n          } else {\n            return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n          }\n        }\n      }, {\n        key: \"isEqualNode\",\n        value: function isEqualNode(node) {\n          if (node.namespaceURI !== this.namespaceURI) {\n            return false;\n          }\n\n          if (node.prefix !== this.prefix) {\n            return false;\n          }\n\n          if (node.localName !== this.localName) {\n            return false;\n          }\n\n          if (node.value !== this.value) {\n            return false;\n          }\n\n          return true;\n        }\n      }]);\n\n      return XMLAttribute;\n    }();\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\n      get: function get() {\n        return this.type;\n      }\n    });\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\n      get: function get() {\n        return this.parent;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        return this.value = value || '';\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\n      get: function get() {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\n      get: function get() {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\n      get: function get() {\n        return this.name;\n      }\n    });\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\n      get: function get() {\n        return true;\n      }\n    });\n    return XMLAttribute;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}