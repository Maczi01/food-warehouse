{"ast":null,"code":"// SVG Path transformations library\n//\n// Usage:\n//\n//    SvgPath('...')\n//      .translate(-150, -100)\n//      .scale(0.5)\n//      .translate(-150, -100)\n//      .toFixed(1)\n//      .toString()\n//\n'use strict';\n\nvar pathParse = require('./path_parse');\n\nvar transformParse = require('./transform_parse');\n\nvar matrix = require('./matrix');\n\nvar a2c = require('./a2c');\n\nvar ellipse = require('./ellipse'); // Class constructor\n//\n\n\nfunction SvgPath(path) {\n  if (!(this instanceof SvgPath)) {\n    return new SvgPath(path);\n  }\n\n  var pstate = pathParse(path); // Array of path segments.\n  // Each segment is array [command, param1, param2, ...]\n\n  this.segments = pstate.segments; // Error message on parse error.\n\n  this.err = pstate.err; // Transforms stack for lazy evaluation\n\n  this.__stack = [];\n}\n\nSvgPath.from = function (src) {\n  if (typeof src === 'string') return new SvgPath(src);\n\n  if (src instanceof SvgPath) {\n    // Create empty object\n    var s = new SvgPath(''); // Clone properies\n\n    s.err = src.err;\n    s.segments = src.segments.map(function (sgm) {\n      return sgm.slice();\n    });\n    s.__stack = src.__stack.map(function (m) {\n      return matrix().matrix(m.toArray());\n    });\n    return s;\n  }\n\n  throw new Error('SvgPath.from: invalid param type ' + src);\n};\n\nSvgPath.prototype.__matrix = function (m) {\n  var self = this,\n      i; // Quick leave for empty matrix\n\n  if (!m.queue.length) {\n    return;\n  }\n\n  this.iterate(function (s, index, x, y) {\n    var p, result, name, isRelative;\n\n    switch (s[0]) {\n      // Process 'assymetric' commands separately\n      case 'v':\n        p = m.calc(0, s[1], true);\n        result = p[0] === 0 ? ['v', p[1]] : ['l', p[0], p[1]];\n        break;\n\n      case 'V':\n        p = m.calc(x, s[1], false);\n        result = p[0] === m.calc(x, y, false)[0] ? ['V', p[1]] : ['L', p[0], p[1]];\n        break;\n\n      case 'h':\n        p = m.calc(s[1], 0, true);\n        result = p[1] === 0 ? ['h', p[0]] : ['l', p[0], p[1]];\n        break;\n\n      case 'H':\n        p = m.calc(s[1], y, false);\n        result = p[1] === m.calc(x, y, false)[1] ? ['H', p[0]] : ['L', p[0], p[1]];\n        break;\n\n      case 'a':\n      case 'A':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // Drop segment if arc is empty (end point === start point)\n\n        /*if ((s[0] === 'A' && s[6] === x && s[7] === y) ||\n            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {\n          return [];\n        }*/\n        // Transform rx, ry and the x-axis-rotation\n        var ma = m.toArray();\n        var e = ellipse(s[1], s[2], s[3]).transform(ma); // flip sweep-flag if matrix is not orientation-preserving\n\n        if (ma[0] * ma[3] - ma[1] * ma[2] < 0) {\n          s[5] = s[5] ? '0' : '1';\n        } // Transform end point as usual (without translation for relative notation)\n\n\n        p = m.calc(s[6], s[7], s[0] === 'a'); // Empty arcs can be ignored by renderer, but should not be dropped\n        // to avoid collisions with `S A S` and so on. Replace with empty line.\n\n        if (s[0] === 'A' && s[6] === x && s[7] === y || s[0] === 'a' && s[6] === 0 && s[7] === 0) {\n          result = [s[0] === 'a' ? 'l' : 'L', p[0], p[1]];\n          break;\n        } // if the resulting ellipse is (almost) a segment ...\n\n\n        if (e.isDegenerate()) {\n          // replace the arc by a line\n          result = [s[0] === 'a' ? 'l' : 'L', p[0], p[1]];\n        } else {\n          // if it is a real ellipse\n          // s[0], s[4] and s[5] are not modified\n          result = [s[0], e.rx, e.ry, e.ax, s[4], s[5], p[0], p[1]];\n        }\n\n        break;\n\n      case 'm':\n        // Edge case. The very first `m` should be processed as absolute, if happens.\n        // Make sense for coord shift transforms.\n        isRelative = index > 0;\n        p = m.calc(s[1], s[2], isRelative);\n        result = ['m', p[0], p[1]];\n        break;\n\n      default:\n        name = s[0];\n        result = [name];\n        isRelative = name.toLowerCase() === name; // Apply transformations to the segment\n\n        for (i = 1; i < s.length; i += 2) {\n          p = m.calc(s[i], s[i + 1], isRelative);\n          result.push(p[0], p[1]);\n        }\n\n    }\n\n    self.segments[index] = result;\n  }, true);\n}; // Apply stacked commands\n//\n\n\nSvgPath.prototype.__evaluateStack = function () {\n  var m, i;\n\n  if (!this.__stack.length) {\n    return;\n  }\n\n  if (this.__stack.length === 1) {\n    this.__matrix(this.__stack[0]);\n\n    this.__stack = [];\n    return;\n  }\n\n  m = matrix();\n  i = this.__stack.length;\n\n  while (--i >= 0) {\n    m.matrix(this.__stack[i].toArray());\n  }\n\n  this.__matrix(m);\n\n  this.__stack = [];\n}; // Convert processed SVG Path back to string\n//\n\n\nSvgPath.prototype.toString = function () {\n  var elements = [],\n      skipCmd,\n      cmd;\n\n  this.__evaluateStack();\n\n  for (var i = 0; i < this.segments.length; i++) {\n    // remove repeating commands names\n    cmd = this.segments[i][0];\n    skipCmd = i > 0 && cmd !== 'm' && cmd !== 'M' && cmd === this.segments[i - 1][0];\n    elements = elements.concat(skipCmd ? this.segments[i].slice(1) : this.segments[i]);\n  }\n\n  return elements.join(' ') // Optimizations: remove spaces around commands & before `-`\n  //\n  // We could also remove leading zeros for `0.5`-like values,\n  // but their count is too small to spend time for.\n  .replace(/ ?([achlmqrstvz]) ?/gi, '$1').replace(/ \\-/g, '-') // workaround for FontForge SVG importing bug\n  .replace(/zm/g, 'z m');\n}; // Translate path to (x [, y])\n//\n\n\nSvgPath.prototype.translate = function (x, y) {\n  this.__stack.push(matrix().translate(x, y || 0));\n\n  return this;\n}; // Scale path to (sx [, sy])\n// sy = sx if not defined\n//\n\n\nSvgPath.prototype.scale = function (sx, sy) {\n  this.__stack.push(matrix().scale(sx, !sy && sy !== 0 ? sx : sy));\n\n  return this;\n}; // Rotate path around point (sx [, sy])\n// sy = sx if not defined\n//\n\n\nSvgPath.prototype.rotate = function (angle, rx, ry) {\n  this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));\n\n  return this;\n}; // Skew path along the X axis by `degrees` angle\n//\n\n\nSvgPath.prototype.skewX = function (degrees) {\n  this.__stack.push(matrix().skewX(degrees));\n\n  return this;\n}; // Skew path along the Y axis by `degrees` angle\n//\n\n\nSvgPath.prototype.skewY = function (degrees) {\n  this.__stack.push(matrix().skewY(degrees));\n\n  return this;\n}; // Apply matrix transform (array of 6 elements)\n//\n\n\nSvgPath.prototype.matrix = function (m) {\n  this.__stack.push(matrix().matrix(m));\n\n  return this;\n}; // Transform path according to \"transform\" attr of SVG spec\n//\n\n\nSvgPath.prototype.transform = function (transformString) {\n  if (!transformString.trim()) {\n    return this;\n  }\n\n  this.__stack.push(transformParse(transformString));\n\n  return this;\n}; // Round coords with given decimal precition.\n// 0 by default (to integers)\n//\n\n\nSvgPath.prototype.round = function (d) {\n  var contourStartDeltaX = 0,\n      contourStartDeltaY = 0,\n      deltaX = 0,\n      deltaY = 0,\n      l;\n  d = d || 0;\n\n  this.__evaluateStack();\n\n  this.segments.forEach(function (s) {\n    var isRelative = s[0].toLowerCase() === s[0];\n\n    switch (s[0]) {\n      case 'H':\n      case 'h':\n        if (isRelative) {\n          s[1] += deltaX;\n        }\n\n        deltaX = s[1] - s[1].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        return;\n\n      case 'V':\n      case 'v':\n        if (isRelative) {\n          s[1] += deltaY;\n        }\n\n        deltaY = s[1] - s[1].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        return;\n\n      case 'Z':\n      case 'z':\n        deltaX = contourStartDeltaX;\n        deltaY = contourStartDeltaY;\n        return;\n\n      case 'M':\n      case 'm':\n        if (isRelative) {\n          s[1] += deltaX;\n          s[2] += deltaY;\n        }\n\n        deltaX = s[1] - s[1].toFixed(d);\n        deltaY = s[2] - s[2].toFixed(d);\n        contourStartDeltaX = deltaX;\n        contourStartDeltaY = deltaY;\n        s[1] = +s[1].toFixed(d);\n        s[2] = +s[2].toFixed(d);\n        return;\n\n      case 'A':\n      case 'a':\n        // [cmd, rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        if (isRelative) {\n          s[6] += deltaX;\n          s[7] += deltaY;\n        }\n\n        deltaX = s[6] - s[6].toFixed(d);\n        deltaY = s[7] - s[7].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        s[2] = +s[2].toFixed(d);\n        s[3] = +s[3].toFixed(d + 2); // better precision for rotation\n\n        s[6] = +s[6].toFixed(d);\n        s[7] = +s[7].toFixed(d);\n        return;\n\n      default:\n        // a c l q s t\n        l = s.length;\n\n        if (isRelative) {\n          s[l - 2] += deltaX;\n          s[l - 1] += deltaY;\n        }\n\n        deltaX = s[l - 2] - s[l - 2].toFixed(d);\n        deltaY = s[l - 1] - s[l - 1].toFixed(d);\n        s.forEach(function (val, i) {\n          if (!i) {\n            return;\n          }\n\n          s[i] = +s[i].toFixed(d);\n        });\n        return;\n    }\n  });\n  return this;\n}; // Apply iterator function to all segments. If function returns result,\n// current segment will be replaced to array of returned segments.\n// If empty array is returned, current regment will be deleted.\n//\n\n\nSvgPath.prototype.iterate = function (iterator, keepLazyStack) {\n  var segments = this.segments,\n      replacements = {},\n      needReplace = false,\n      lastX = 0,\n      lastY = 0,\n      countourStartX = 0,\n      countourStartY = 0;\n  var i, j, newSegments;\n\n  if (!keepLazyStack) {\n    this.__evaluateStack();\n  }\n\n  segments.forEach(function (s, index) {\n    var res = iterator(s, index, lastX, lastY);\n\n    if (Array.isArray(res)) {\n      replacements[index] = res;\n      needReplace = true;\n    }\n\n    var isRelative = s[0] === s[0].toLowerCase(); // calculate absolute X and Y\n\n    switch (s[0]) {\n      case 'm':\n      case 'M':\n        lastX = s[1] + (isRelative ? lastX : 0);\n        lastY = s[2] + (isRelative ? lastY : 0);\n        countourStartX = lastX;\n        countourStartY = lastY;\n        return;\n\n      case 'h':\n      case 'H':\n        lastX = s[1] + (isRelative ? lastX : 0);\n        return;\n\n      case 'v':\n      case 'V':\n        lastY = s[1] + (isRelative ? lastY : 0);\n        return;\n\n      case 'z':\n      case 'Z':\n        // That make sence for multiple contours\n        lastX = countourStartX;\n        lastY = countourStartY;\n        return;\n\n      default:\n        lastX = s[s.length - 2] + (isRelative ? lastX : 0);\n        lastY = s[s.length - 1] + (isRelative ? lastY : 0);\n    }\n  }); // Replace segments if iterator return results\n\n  if (!needReplace) {\n    return this;\n  }\n\n  newSegments = [];\n\n  for (i = 0; i < segments.length; i++) {\n    if (typeof replacements[i] !== 'undefined') {\n      for (j = 0; j < replacements[i].length; j++) {\n        newSegments.push(replacements[i][j]);\n      }\n    } else {\n      newSegments.push(segments[i]);\n    }\n  }\n\n  this.segments = newSegments;\n  return this;\n}; // Converts segments from relative to absolute\n//\n\n\nSvgPath.prototype.abs = function () {\n  this.iterate(function (s, index, x, y) {\n    var name = s[0],\n        nameUC = name.toUpperCase(),\n        i; // Skip absolute commands\n\n    if (name === nameUC) {\n      return;\n    }\n\n    s[0] = nameUC;\n\n    switch (name) {\n      case 'v':\n        // v has shifted coords parity\n        s[1] += y;\n        return;\n\n      case 'a':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // touch x, y only\n        s[6] += x;\n        s[7] += y;\n        return;\n\n      default:\n        for (i = 1; i < s.length; i++) {\n          s[i] += i % 2 ? x : y; // odd values are X, even - Y\n        }\n\n    }\n  }, true);\n  return this;\n}; // Converts segments from absolute to relative\n//\n\n\nSvgPath.prototype.rel = function () {\n  this.iterate(function (s, index, x, y) {\n    var name = s[0],\n        nameLC = name.toLowerCase(),\n        i; // Skip relative commands\n\n    if (name === nameLC) {\n      return;\n    } // Don't touch the first M to avoid potential confusions.\n\n\n    if (index === 0 && name === 'M') {\n      return;\n    }\n\n    s[0] = nameLC;\n\n    switch (name) {\n      case 'V':\n        // V has shifted coords parity\n        s[1] -= y;\n        return;\n\n      case 'A':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // touch x, y only\n        s[6] -= x;\n        s[7] -= y;\n        return;\n\n      default:\n        for (i = 1; i < s.length; i++) {\n          s[i] -= i % 2 ? x : y; // odd values are X, even - Y\n        }\n\n    }\n  }, true);\n  return this;\n}; // Converts arcs to cubic bézier curves\n//\n\n\nSvgPath.prototype.unarc = function () {\n  this.iterate(function (s, index, x, y) {\n    var new_segments,\n        nextX,\n        nextY,\n        result = [],\n        name = s[0]; // Skip anything except arcs\n\n    if (name !== 'A' && name !== 'a') {\n      return null;\n    }\n\n    if (name === 'a') {\n      // convert relative arc coordinates to absolute\n      nextX = x + s[6];\n      nextY = y + s[7];\n    } else {\n      nextX = s[6];\n      nextY = s[7];\n    }\n\n    new_segments = a2c(x, y, nextX, nextY, s[4], s[5], s[1], s[2], s[3]); // Degenerated arcs can be ignored by renderer, but should not be dropped\n    // to avoid collisions with `S A S` and so on. Replace with empty line.\n\n    if (new_segments.length === 0) {\n      return [[s[0] === 'a' ? 'l' : 'L', s[6], s[7]]];\n    }\n\n    new_segments.forEach(function (s) {\n      result.push(['C', s[2], s[3], s[4], s[5], s[6], s[7]]);\n    });\n    return result;\n  });\n  return this;\n}; // Converts smooth curves (with missed control point) to generic curves\n//\n\n\nSvgPath.prototype.unshort = function () {\n  var segments = this.segments;\n  var prevControlX, prevControlY, prevSegment;\n  var curControlX, curControlY; // TODO: add lazy evaluation flag when relative commands supported\n\n  this.iterate(function (s, idx, x, y) {\n    var name = s[0],\n        nameUC = name.toUpperCase(),\n        isRelative; // First command MUST be M|m, it's safe to skip.\n    // Protect from access to [-1] for sure.\n\n    if (!idx) {\n      return;\n    }\n\n    if (nameUC === 'T') {\n      // quadratic curve\n      isRelative = name === 't';\n      prevSegment = segments[idx - 1];\n\n      if (prevSegment[0] === 'Q') {\n        prevControlX = prevSegment[1] - x;\n        prevControlY = prevSegment[2] - y;\n      } else if (prevSegment[0] === 'q') {\n        prevControlX = prevSegment[1] - prevSegment[3];\n        prevControlY = prevSegment[2] - prevSegment[4];\n      } else {\n        prevControlX = 0;\n        prevControlY = 0;\n      }\n\n      curControlX = -prevControlX;\n      curControlY = -prevControlY;\n\n      if (!isRelative) {\n        curControlX += x;\n        curControlY += y;\n      }\n\n      segments[idx] = [isRelative ? 'q' : 'Q', curControlX, curControlY, s[1], s[2]];\n    } else if (nameUC === 'S') {\n      // cubic curve\n      isRelative = name === 's';\n      prevSegment = segments[idx - 1];\n\n      if (prevSegment[0] === 'C') {\n        prevControlX = prevSegment[3] - x;\n        prevControlY = prevSegment[4] - y;\n      } else if (prevSegment[0] === 'c') {\n        prevControlX = prevSegment[3] - prevSegment[5];\n        prevControlY = prevSegment[4] - prevSegment[6];\n      } else {\n        prevControlX = 0;\n        prevControlY = 0;\n      }\n\n      curControlX = -prevControlX;\n      curControlY = -prevControlY;\n\n      if (!isRelative) {\n        curControlX += x;\n        curControlY += y;\n      }\n\n      segments[idx] = [isRelative ? 'c' : 'C', curControlX, curControlY, s[1], s[2], s[3], s[4]];\n    }\n  });\n  return this;\n};\n\nmodule.exports = SvgPath;","map":null,"metadata":{},"sourceType":"script"}