{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar RestException = require('./RestException');\n/**\n * @constructor\n *\n * @description Base page object to maintain request state.\n *\n * @param {Version} version - A twilio version instance\n * @param {Object} response - The http response\n * @param {Object} solution - path solution\n */\n\n\nfunction Page(version, response, solution) {\n  var payload = this.processResponse(response);\n  this._version = version;\n  this._payload = payload;\n  this._solution = solution;\n  this.nextPageUrl = this.getNextPageUrl();\n  this.previousPageUrl = this.getPreviousPageUrl();\n  this.instances = this.loadInstances(this.loadPage(payload));\n}\n/**\n * @constant META_KEYS\n * @description meta keys returned in a list request\n */\n\n\nPage.prototype.META_KEYS = ['end', 'first_page_uri', 'last_page_uri', 'next_page_uri', 'num_pages', 'page', 'page_size', 'previous_page_uri', 'start', 'total', 'uri'];\n/**\n * Get the url of the previous page of records\n *\n * @return {string|undefined} url of the previous page\n */\n\nPage.prototype.getPreviousPageUrl = function () {\n  if ('meta' in this._payload && 'previous_page_url' in this._payload.meta && this._payload.meta.previous_page_url) {\n    // jshint ignore:line\n    return this._payload.meta.previous_page_url; // jshint ignore:line\n  }\n\n  if ('previous_page_uri' in this._payload && this._payload.previous_page_uri) {\n    // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n/**\n * Get the url of the next page of records\n *\n * @return {string|undefined} url of the next page\n */\n\n\nPage.prototype.getNextPageUrl = function () {\n  if ('meta' in this._payload && 'next_page_url' in this._payload.meta && this._payload.meta.next_page_url) {\n    // jshint ignore:line\n    return this._payload.meta.next_page_url; // jshint ignore:line\n  }\n\n  if ('next_page_uri' in this._payload && this._payload.next_page_uri) {\n    // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n/**\n * Build a new instance given a json payload\n * @abstract\n *\n * @param {object} payload - Payload response from the API\n * @return {object} instance of a resource\n */\n\n\nPage.prototype.getInstance = function (payload) {\n  throw new Error('Page.get_instance() must be implemented in the derived class');\n};\n/**\n * Load a list of records\n *\n * @param  {object} resources json payload of records\n * @return {Array} list of resources\n */\n\n\nPage.prototype.loadInstances = function (resources) {\n  return _.map(resources, function (resource) {\n    return this.getInstance(resource);\n  }.bind(this));\n};\n/**\n * Fetch the next page of records\n *\n * @return {promise} promise that resolves to next page of results\n */\n\n\nPage.prototype.nextPage = function () {\n  if (!this.nextPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.nextPageUrl\n  });\n\n  promise = promise.then(function (response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n  return promise;\n};\n/**\n * Fetch the previous page of records\n *\n * @return {promise} promise that resolves to previous page of results\n */\n\n\nPage.prototype.previousPage = function () {\n  if (!this.previousPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.previousPageUrl\n  });\n\n  promise = promise.then(function (response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n  return promise;\n};\n/**\n * Parse json response from API\n * @throws {Error} If non 200 status code is returned\n *\n * @param  {object} response API response\n * @return {object} json parsed response\n */\n\n\nPage.prototype.processResponse = function (response) {\n  if (response.statusCode !== 200) {\n    throw new RestException(response);\n  }\n\n  if (typeof response.body === 'string') {\n    return JSON.parse(response.body);\n  }\n\n  return response.body;\n};\n/**\n * Load a page of records\n * @throws {Error} If records cannot be deserialized\n *\n * @param  {object} payload json payload\n * @return {array} the page of records\n */\n\n\nPage.prototype.loadPage = function (payload) {\n  if ('meta' in payload && 'key' in payload.meta) {\n    return payload[payload.meta.key];\n  }\n\n  var keys = _.chain(payload).keys().difference(this.META_KEYS).value();\n\n  if (keys.length === 1) {\n    return payload[keys[0]];\n  }\n\n  throw new Error('Page Records cannot be deserialized');\n};\n\nmodule.exports = Page;","map":null,"metadata":{},"sourceType":"script"}