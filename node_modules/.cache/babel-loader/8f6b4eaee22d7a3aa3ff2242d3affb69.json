{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer; // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n// == UTF16-BE codec. ==========================================================\n\n\nexports.utf16be = Utf16BECodec;\n\nfunction Utf16BECodec() {}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true; // -- Encoding\n\nfunction Utf16BEEncoder() {}\n\nUtf16BEEncoder.prototype.write = function (str) {\n  var buf = Buffer.from(str, 'ucs2');\n\n  for (var i = 0; i < buf.length; i += 2) {\n    var tmp = buf[i];\n    buf[i] = buf[i + 1];\n    buf[i + 1] = tmp;\n  }\n\n  return buf;\n};\n\nUtf16BEEncoder.prototype.end = function () {}; // -- Decoding\n\n\nfunction Utf16BEDecoder() {\n  this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function (buf) {\n  if (buf.length == 0) return '';\n  var buf2 = Buffer.alloc(buf.length + 1),\n      i = 0,\n      j = 0;\n\n  if (this.overflowByte !== -1) {\n    buf2[0] = buf[0];\n    buf2[1] = this.overflowByte;\n    i = 1;\n    j = 2;\n  }\n\n  for (; i < buf.length - 1; i += 2, j += 2) {\n    buf2[j] = buf[i + 1];\n    buf2[j + 1] = buf[i];\n  }\n\n  this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;\n  return buf2.slice(0, j).toString('ucs2');\n};\n\nUtf16BEDecoder.prototype.end = function () {}; // == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\n\nexports.utf16 = Utf16Codec;\n\nfunction Utf16Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder; // -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) options.addBOM = true;\n  this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\n\nUtf16Encoder.prototype.end = function () {\n  return this.encoder.end();\n}; // -- Decoding\n\n\nfunction Utf16Decoder(options, codec) {\n  this.decoder = null;\n  this.initialBytes = [];\n  this.initialBytesLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBytes.push(buf);\n    this.initialBytesLen += buf.length;\n    if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n      return ''; // We have enough bytes -> detect endianness.\n\n    var buf = Buffer.concat(this.initialBytes),\n        encoding = detectEncoding(buf, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    this.initialBytes.length = this.initialBytesLen = 0;\n  }\n\n  return this.decoder.write(buf);\n};\n\nUtf16Decoder.prototype.end = function () {\n  if (!this.decoder) {\n    var buf = Buffer.concat(this.initialBytes),\n        encoding = detectEncoding(buf, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var res = this.decoder.write(buf),\n        trail = this.decoder.end();\n    return trail ? res + trail : res;\n  }\n\n  return this.decoder.end();\n};\n\nfunction detectEncoding(buf, defaultEncoding) {\n  var enc = defaultEncoding || 'utf-16le';\n\n  if (buf.length >= 2) {\n    // Check BOM.\n    if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n      enc = 'utf-16be';else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n      enc = 'utf-16le';else {\n      // No BOM found. Try to deduce encoding from initial content.\n      // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n      // So, we count ASCII as if it was LE or BE, and decide from that.\n      var asciiCharsLE = 0,\n          asciiCharsBE = 0,\n          // Counts of chars in both positions\n      _len = Math.min(buf.length - buf.length % 2, 64); // Len is always even.\n\n\n      for (var i = 0; i < _len; i += 2) {\n        if (buf[i] === 0 && buf[i + 1] !== 0) asciiCharsBE++;\n        if (buf[i] !== 0 && buf[i + 1] === 0) asciiCharsLE++;\n      }\n\n      if (asciiCharsBE > asciiCharsLE) enc = 'utf-16be';else if (asciiCharsBE < asciiCharsLE) enc = 'utf-16le';\n    }\n  }\n\n  return enc;\n}","map":null,"metadata":{},"sourceType":"script"}