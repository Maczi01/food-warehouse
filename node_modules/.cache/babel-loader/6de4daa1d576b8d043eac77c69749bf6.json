{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\n  XMLDOMStringList = require('./XMLDOMStringList'); // Implements the DOMConfiguration interface\n\n  module.exports = XMLDOMConfiguration = function () {\n    var XMLDOMConfiguration = /*#__PURE__*/function () {\n      \"use strict\";\n\n      function XMLDOMConfiguration() {\n        _classCallCheck(this, XMLDOMConfiguration);\n\n        var clonedSelf;\n        this.defaultParams = {\n          \"canonical-form\": false,\n          \"cdata-sections\": false,\n          \"comments\": false,\n          \"datatype-normalization\": false,\n          \"element-content-whitespace\": true,\n          \"entities\": true,\n          \"error-handler\": new XMLDOMErrorHandler(),\n          \"infoset\": true,\n          \"validate-if-schema\": false,\n          \"namespaces\": true,\n          \"namespace-declarations\": true,\n          \"normalize-characters\": false,\n          \"schema-location\": '',\n          \"schema-type\": '',\n          \"split-cdata-sections\": true,\n          \"validate\": false,\n          \"well-formed\": true\n        };\n        this.params = clonedSelf = Object.create(this.defaultParams);\n      } // Gets the value of a parameter.\n      // `name` name of the parameter\n\n\n      _createClass(XMLDOMConfiguration, [{\n        key: \"getParameter\",\n        value: function getParameter(name) {\n          if (this.params.hasOwnProperty(name)) {\n            return this.params[name];\n          } else {\n            return null;\n          }\n        } // Checks if setting a parameter to a specific value is supported.\n        // `name` name of the parameter\n        // `value` parameter value\n\n      }, {\n        key: \"canSetParameter\",\n        value: function canSetParameter(name, value) {\n          return true;\n        } // Sets the value of a parameter.\n        // `name` name of the parameter\n        // `value` new value or null if the user wishes to unset the parameter\n\n      }, {\n        key: \"setParameter\",\n        value: function setParameter(name, value) {\n          if (value != null) {\n            return this.params[name] = value;\n          } else {\n            return delete this.params[name];\n          }\n        }\n      }]);\n\n      return XMLDOMConfiguration;\n    }();\n\n    ; // Returns the list of parameter names\n\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\n      get: function get() {\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\n      }\n    });\n    return XMLDOMConfiguration;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}