{"ast":null,"code":"// Generated by CoffeeScript 1.7.1\n(function () {\n  var Struct,\n      VersionedStruct,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Struct = require('./Struct');\n\n  VersionedStruct = function (_super) {\n    __extends(VersionedStruct, _super);\n\n    function VersionedStruct(type, versions) {\n      this.type = type;\n      this.versions = versions != null ? versions : {};\n\n      if (typeof this.type === 'string') {\n        this.versionGetter = new Function('parent', \"return parent.\" + this.type);\n        this.versionSetter = new Function('parent', 'version', \"return parent.\" + this.type + \" = version\");\n      }\n    }\n\n    VersionedStruct.prototype.decode = function (stream, parent, length) {\n      var fields, res, _ref;\n\n      if (length == null) {\n        length = 0;\n      }\n\n      res = this._setup(stream, parent, length);\n\n      if (typeof this.type === 'string') {\n        res.version = this.versionGetter(parent);\n      } else {\n        res.version = this.type.decode(stream);\n      }\n\n      if (this.versions.header) {\n        this._parseFields(stream, res, this.versions.header);\n      }\n\n      fields = this.versions[res.version];\n\n      if (fields == null) {\n        throw new Error(\"Unknown version \" + res.version);\n      }\n\n      if (fields instanceof VersionedStruct) {\n        return fields.decode(stream, parent);\n      }\n\n      this._parseFields(stream, res, fields);\n\n      if ((_ref = this.process) != null) {\n        _ref.call(res, stream);\n      }\n\n      return res;\n    };\n\n    VersionedStruct.prototype.size = function (val, parent, includePointers) {\n      var ctx, fields, key, size, type, _ref;\n\n      if (includePointers == null) {\n        includePointers = true;\n      }\n\n      if (!val) {\n        throw new Error('Not a fixed size');\n      }\n\n      ctx = {\n        parent: parent,\n        val: val,\n        pointerSize: 0\n      };\n      size = 0;\n\n      if (typeof this.type !== 'string') {\n        size += this.type.size(val.version, ctx);\n      }\n\n      if (this.versions.header) {\n        _ref = this.versions.header;\n\n        for (key in _ref) {\n          type = _ref[key];\n\n          if (type.size != null) {\n            size += type.size(val[key], ctx);\n          }\n        }\n      }\n\n      fields = this.versions[val.version];\n\n      if (fields == null) {\n        throw new Error(\"Unknown version \" + val.version);\n      }\n\n      for (key in fields) {\n        type = fields[key];\n\n        if (type.size != null) {\n          size += type.size(val[key], ctx);\n        }\n      }\n\n      if (includePointers) {\n        size += ctx.pointerSize;\n      }\n\n      return size;\n    };\n\n    VersionedStruct.prototype.encode = function (stream, val, parent) {\n      var ctx, fields, i, key, ptr, type, _ref, _ref1;\n\n      if ((_ref = this.preEncode) != null) {\n        _ref.call(val, stream);\n      }\n\n      ctx = {\n        pointers: [],\n        startOffset: stream.pos,\n        parent: parent,\n        val: val,\n        pointerSize: 0\n      };\n      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n\n      if (typeof this.type !== 'string') {\n        this.type.encode(stream, val.version);\n      }\n\n      if (this.versions.header) {\n        _ref1 = this.versions.header;\n\n        for (key in _ref1) {\n          type = _ref1[key];\n\n          if (type.encode != null) {\n            type.encode(stream, val[key], ctx);\n          }\n        }\n      }\n\n      fields = this.versions[val.version];\n\n      for (key in fields) {\n        type = fields[key];\n\n        if (type.encode != null) {\n          type.encode(stream, val[key], ctx);\n        }\n      }\n\n      i = 0;\n\n      while (i < ctx.pointers.length) {\n        ptr = ctx.pointers[i++];\n        ptr.type.encode(stream, ptr.val, ptr.parent);\n      }\n    };\n\n    return VersionedStruct;\n  }(Struct);\n\n  module.exports = VersionedStruct;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}