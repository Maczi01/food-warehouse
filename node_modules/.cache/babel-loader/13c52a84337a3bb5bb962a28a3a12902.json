{"ast":null,"code":"!function (t, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define(i) : t.dayjs_plugin_utc = i();\n}(this, function () {\n  \"use strict\";\n\n  return function (t, i, e) {\n    var s = new Date().getTimezoneOffset(),\n        n = i.prototype;\n    e.utc = function (t, e) {\n      return new i({\n        date: t,\n        utc: !0,\n        format: e\n      });\n    }, n.utc = function () {\n      return e(this.toDate(), {\n        locale: this.$L,\n        utc: !0\n      });\n    }, n.local = function () {\n      return e(this.toDate(), {\n        locale: this.$L,\n        utc: !1\n      });\n    };\n    var u = n.parse;\n\n    n.parse = function (t) {\n      t.utc && (this.$u = !0), this.$utils().u(t.$offset) || (this.$offset = t.$offset), u.call(this, t);\n    };\n\n    var o = n.init;\n\n    n.init = function () {\n      if (this.$u) {\n        var t = this.$d;\n        this.$y = t.getUTCFullYear(), this.$M = t.getUTCMonth(), this.$D = t.getUTCDate(), this.$W = t.getUTCDay(), this.$H = t.getUTCHours(), this.$m = t.getUTCMinutes(), this.$s = t.getUTCSeconds(), this.$ms = t.getUTCMilliseconds();\n      } else o.call(this);\n    };\n\n    var f = n.utcOffset;\n\n    n.utcOffset = function (t) {\n      var i = this.$utils().u;\n      if (i(t)) return this.$u ? 0 : i(this.$offset) ? f.call(this) : this.$offset;\n      var e,\n          n = Math.abs(t) <= 16 ? 60 * t : t;\n      return 0 !== t ? (e = this.local().add(n + s, \"minute\")).$offset = n : e = this.utc(), e;\n    };\n\n    var r = n.format;\n    n.format = function (t) {\n      var i = t || (this.$u ? \"YYYY-MM-DDTHH:mm:ss[Z]\" : \"\");\n      return r.call(this, i);\n    }, n.valueOf = function () {\n      var t = this.$utils().u(this.$offset) ? 0 : this.$offset + s;\n      return this.$d.valueOf() - 6e4 * t;\n    }, n.isUTC = function () {\n      return !!this.$u;\n    }, n.toISOString = function () {\n      return this.toDate().toISOString();\n    }, n.toString = function () {\n      return this.toDate().toUTCString();\n    };\n    var a = n.toDate;\n\n    n.toDate = function (t) {\n      return \"s\" === t && this.$offset ? e(this.format(\"YYYY-MM-DD HH:mm:ss:SSS\")).toDate() : a.call(this);\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"script"}