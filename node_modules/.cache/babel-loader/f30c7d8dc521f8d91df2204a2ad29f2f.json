{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\n/**\n * Generate glyphs indices from string indices\n *\n * ex. resolve([[0, 1, 2, 4]]) => [0, 1, 2, 2, 3]\n *\n * @param  {String}  string\n * @param  {Array}  string indices\n * @return {Array} glyph indices\n */\n\n\nvar resolve = function resolve(string, stringIndices) {\n  if (stringIndices === void 0) {\n    stringIndices = [];\n  }\n\n  var counter = 0;\n  var glyphIndices = [];\n\n  for (var i = 0; i < stringIndices.length; i++) {\n    var current = stringIndices[i];\n    var prevValue = stringIndices[i - 1];\n    var stringIndex = (0, _isNumber[\"default\"])(current) ? current : prevValue + 1 || 0;\n    var nextValue = stringIndices[i + 1] || stringIndex + 1;\n    var diff = Math.abs(nextValue - stringIndex);\n    glyphIndices.push.apply(glyphIndices, R.repeat(counter, diff));\n    counter += 1;\n  } // Append ending ligature glyph indices\n\n\n  if (string.length !== glyphIndices.length) {\n    var _diff = Math.max(0, string.length - glyphIndices.length);\n\n    var lastValue = R.last(glyphIndices);\n    glyphIndices.push.apply(glyphIndices, R.repeat(lastValue, _diff));\n  }\n\n  return glyphIndices;\n};\n\nvar _default = resolve;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}