{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TaskQueueStatisticsList;\nvar TaskQueueStatisticsPage;\nvar TaskQueueStatisticsInstance;\nvar TaskQueueStatisticsContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueStatisticsList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @param {string} taskQueueSid -\n *          The SID of the TaskQueue from which these statistics were calculated\n */\n\n/* jshint ignore:end */\n\nTaskQueueStatisticsList = function TaskQueueStatisticsList(version, workspaceSid, taskQueueSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function statistics\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsContext}\n   */\n\n  /* jshint ignore:end */\n  function TaskQueueStatisticsListInstance(sid) {\n    return TaskQueueStatisticsListInstance.get(sid);\n  }\n\n  TaskQueueStatisticsListInstance._version = version; // Path Solution\n\n  TaskQueueStatisticsListInstance._solution = {\n    workspaceSid: workspaceSid,\n    taskQueueSid: taskQueueSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a task_queue_statistics\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList#\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsContext}\n   */\n\n  /* jshint ignore:end */\n\n  TaskQueueStatisticsListInstance.get = function get() {\n    return new TaskQueueStatisticsContext(this._version, this._solution.workspaceSid, this._solution.taskQueueSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueStatisticsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskQueueStatisticsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskQueueStatisticsListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueStatisticsPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueStatisticsSolution} solution - Path solution\n *\n * @returns TaskQueueStatisticsPage\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsPage = function TaskQueueStatisticsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskQueueStatisticsPage.prototype, Page.prototype);\n\nTaskQueueStatisticsPage.prototype.constructor = TaskQueueStatisticsPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TaskQueueStatisticsInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsPage#\n *\n * @param {TaskQueueStatisticsPayload} payload - Payload response from the API\n *\n * @returns TaskQueueStatisticsInstance\n */\n\n/* jshint ignore:end */\n\nTaskQueueStatisticsPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueStatisticsInstance(this._version, payload, this._solution.workspaceSid, this._solution.taskQueueSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskQueueStatisticsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueStatisticsContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {object} cumulative -\n *          An object that contains the cumulative statistics for the TaskQueue\n * @property {object} realtime -\n *          An object that contains the real-time statistics for the TaskQueue\n * @property {string} taskQueueSid -\n *          The SID of the TaskQueue from which these statistics were calculated\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} url - The absolute URL of the TaskQueue statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueueStatisticsPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} taskQueueSid -\n *          The SID of the TaskQueue from which these statistics were calculated\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsInstance = function TaskQueueStatisticsInstance(version, payload, workspaceSid, taskQueueSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.cumulative = payload.cumulative; // jshint ignore:line\n\n  this.realtime = payload.realtime; // jshint ignore:line\n\n  this.taskQueueSid = payload.task_queue_sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    taskQueueSid: taskQueueSid\n  };\n};\n\nObject.defineProperty(TaskQueueStatisticsInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new TaskQueueStatisticsContext(this._version, this._solution.workspaceSid, this._solution.taskQueueSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TaskQueueStatisticsInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.endDate] -\n *          Only calculate statistics from on or before this date\n * @param {number} [opts.minutes] -\n *          Only calculate statistics since this many minutes in the past\n * @param {Date} [opts.startDate] -\n *          Only calculate statistics from on or after this date\n * @param {string} [opts.taskChannel] -\n *          Only calculate real-time and cumulative statistics for the specified TaskChannel\n * @param {string} [opts.splitByWaitTime] -\n *          A comma separated list of values that describes the thresholds to calculate statistics on\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueStatisticsInstance\n */\n\n/* jshint ignore:end */\n\nTaskQueueStatisticsInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskQueueStatisticsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueStatisticsContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} taskQueueSid -\n *          The SID of the TaskQueue for which to fetch statistics\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsContext = function TaskQueueStatisticsContext(version, workspaceSid, taskQueueSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    taskQueueSid: taskQueueSid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/TaskQueues/\").concat(taskQueueSid, \"/Statistics\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TaskQueueStatisticsInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.endDate] -\n *          Only calculate statistics from on or before this date\n * @param {number} [opts.minutes] -\n *          Only calculate statistics since this many minutes in the past\n * @param {Date} [opts.startDate] -\n *          Only calculate statistics from on or after this date\n * @param {string} [opts.taskChannel] -\n *          Only calculate real-time and cumulative statistics for the specified TaskChannel\n * @param {string} [opts.splitByWaitTime] -\n *          A comma separated list of values that describes the thresholds to calculate statistics on\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueStatisticsInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n    'Minutes': _.get(opts, 'minutes'),\n    'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n    'TaskChannel': _.get(opts, 'taskChannel'),\n    'SplitByWaitTime': _.get(opts, 'splitByWaitTime')\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    params: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueStatisticsInstance(this._version, payload, this._solution.workspaceSid, this._solution.taskQueueSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueStatisticsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskQueueStatisticsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskQueueStatisticsList: TaskQueueStatisticsList,\n  TaskQueueStatisticsPage: TaskQueueStatisticsPage,\n  TaskQueueStatisticsInstance: TaskQueueStatisticsInstance,\n  TaskQueueStatisticsContext: TaskQueueStatisticsContext\n};","map":null,"metadata":{},"sourceType":"script"}