{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  // Converts values to strings\n  var XMLStringifier,\n      hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = function () {\n    var XMLStringifier = /*#__PURE__*/function () {\n      \"use strict\";\n\n      // Initializes a new instance of `XMLStringifier`\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      function XMLStringifier(options) {\n        _classCallCheck(this, XMLStringifier);\n\n        var key, ref, value; // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n        // `str` the string to check\n\n        this.assertLegalChar = this.assertLegalChar.bind(this); // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n        // `str` the string to check\n\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n\n        ref = options.stringify || {};\n\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      } // Defaults\n\n\n      _createClass(XMLStringifier, [{\n        key: \"name\",\n        value: function name(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalName('' + val || '');\n        }\n      }, {\n        key: \"text\",\n        value: function text(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar(this.textEscape('' + val || ''));\n        }\n      }, {\n        key: \"cdata\",\n        value: function cdata(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n          val = val.replace(']]>', ']]]]><![CDATA[>');\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"comment\",\n        value: function comment(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (val.match(/--/)) {\n            throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n          }\n\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"raw\",\n        value: function raw(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return '' + val || '';\n        }\n      }, {\n        key: \"attValue\",\n        value: function attValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n        }\n      }, {\n        key: \"insTarget\",\n        value: function insTarget(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"insValue\",\n        value: function insValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (val.match(/\\?>/)) {\n            throw new Error(\"Invalid processing instruction value: \" + val);\n          }\n\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"xmlVersion\",\n        value: function xmlVersion(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (!val.match(/1\\.[0-9]+/)) {\n            throw new Error(\"Invalid version number: \" + val);\n          }\n\n          return val;\n        }\n      }, {\n        key: \"xmlEncoding\",\n        value: function xmlEncoding(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n            throw new Error(\"Invalid encoding: \" + val);\n          }\n\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"xmlStandalone\",\n        value: function xmlStandalone(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          if (val) {\n            return \"yes\";\n          } else {\n            return \"no\";\n          }\n        }\n      }, {\n        key: \"dtdPubID\",\n        value: function dtdPubID(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdSysID\",\n        value: function dtdSysID(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdElementValue\",\n        value: function dtdElementValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdAttType\",\n        value: function dtdAttType(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdAttDefault\",\n        value: function dtdAttDefault(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdEntityValue\",\n        value: function dtdEntityValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdNData\",\n        value: function dtdNData(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"assertLegalChar\",\n        value: function assertLegalChar(str) {\n          var regex, res;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          regex = '';\n\n          if (this.options.version === '1.0') {\n            // Valid characters from https://www.w3.org/TR/xml/#charsets\n            // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n            // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n            // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n            //   let xml_10_InvalidChars = regenerate()\n            //     .addRange(0x0000, 0x0008)\n            //     .add(0x000B, 0x000C)\n            //     .addRange(0x000E, 0x001F)\n            //     .addRange(0xD800, 0xDFFF)\n            //     .addRange(0xFFFE, 0xFFFF)\n            regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n            if (res = str.match(regex)) {\n              throw new Error(\"Invalid character in string: \".concat(str, \" at index \").concat(res.index));\n            }\n          } else if (this.options.version === '1.1') {\n            // Valid characters from https://www.w3.org/TR/xml11/#charsets\n            // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n            // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n            // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n            //   let xml_11_InvalidChars = regenerate()\n            //     .add(0x0000)\n            //     .addRange(0xD800, 0xDFFF)\n            //     .addRange(0xFFFE, 0xFFFF)\n            regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n            if (res = str.match(regex)) {\n              throw new Error(\"Invalid character in string: \".concat(str, \" at index \").concat(res.index));\n            }\n          }\n\n          return str;\n        }\n      }, {\n        key: \"assertLegalName\",\n        value: function assertLegalName(str) {\n          var regex;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          this.assertLegalChar(str);\n          regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n\n          if (!str.match(regex)) {\n            throw new Error(\"Invalid character in name\");\n          }\n\n          return str;\n        } // Escapes special characters in text\n        // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n        // `str` the string to escape\n\n      }, {\n        key: \"textEscape\",\n        value: function textEscape(str) {\n          var ampregex;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n          return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n        } // Escapes special characters in attribute values\n        // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n        // `str` the string to escape\n\n      }, {\n        key: \"attEscape\",\n        value: function attEscape(str) {\n          var ampregex;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n          return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n        }\n      }]);\n\n      return XMLStringifier;\n    }();\n\n    ; // strings to match while converting from JS objects\n\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n    return XMLStringifier;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}