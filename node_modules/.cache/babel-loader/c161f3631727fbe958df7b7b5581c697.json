{"ast":null,"code":"// Generated by CoffeeScript 1.7.1\n(function () {\n  var ArrayT, NumberT, utils;\n  NumberT = require('./Number').Number;\n  utils = require('./utils');\n\n  ArrayT = function () {\n    function ArrayT(type, length, lengthType) {\n      this.type = type;\n      this.length = length;\n      this.lengthType = lengthType != null ? lengthType : 'count';\n    }\n\n    ArrayT.prototype.decode = function (stream, parent) {\n      var ctx, i, length, pos, res, target, _i;\n\n      pos = stream.pos;\n      res = [];\n      ctx = parent;\n\n      if (this.length != null) {\n        length = utils.resolveLength(this.length, stream, parent);\n      }\n\n      if (this.length instanceof NumberT) {\n        Object.defineProperties(res, {\n          parent: {\n            value: parent\n          },\n          _startOffset: {\n            value: pos\n          },\n          _currentOffset: {\n            value: 0,\n            writable: true\n          },\n          _length: {\n            value: length\n          }\n        });\n        ctx = res;\n      }\n\n      if (length == null || this.lengthType === 'bytes') {\n        target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;\n\n        while (stream.pos < target) {\n          res.push(this.type.decode(stream, ctx));\n        }\n      } else {\n        for (i = _i = 0; _i < length; i = _i += 1) {\n          res.push(this.type.decode(stream, ctx));\n        }\n      }\n\n      return res;\n    };\n\n    ArrayT.prototype.size = function (array, ctx) {\n      var item, size, _i, _len;\n\n      if (!array) {\n        return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);\n      }\n\n      size = 0;\n\n      if (this.length instanceof NumberT) {\n        size += this.length.size();\n        ctx = {\n          parent: ctx\n        };\n      }\n\n      for (_i = 0, _len = array.length; _i < _len; _i++) {\n        item = array[_i];\n        size += this.type.size(item, ctx);\n      }\n\n      return size;\n    };\n\n    ArrayT.prototype.encode = function (stream, array, parent) {\n      var ctx, i, item, ptr, _i, _len;\n\n      ctx = parent;\n\n      if (this.length instanceof NumberT) {\n        ctx = {\n          pointers: [],\n          startOffset: stream.pos,\n          parent: parent\n        };\n        ctx.pointerOffset = stream.pos + this.size(array, ctx);\n        this.length.encode(stream, array.length);\n      }\n\n      for (_i = 0, _len = array.length; _i < _len; _i++) {\n        item = array[_i];\n        this.type.encode(stream, item, ctx);\n      }\n\n      if (this.length instanceof NumberT) {\n        i = 0;\n\n        while (i < ctx.pointers.length) {\n          ptr = ctx.pointers[i++];\n          ptr.type.encode(stream, ptr.val);\n        }\n      }\n    };\n\n    return ArrayT;\n  }();\n\n  module.exports = ArrayT;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}