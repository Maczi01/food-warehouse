{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\react1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLText;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a text node\n\n  module.exports = XMLText = function () {\n    var XMLText = /*#__PURE__*/function (_XMLCharacterData) {\n      \"use strict\";\n\n      _inherits(XMLText, _XMLCharacterData);\n\n      // Initializes a new instance of `XMLText`\n      // `text` element text\n      function XMLText(parent, text) {\n        var _this;\n\n        _classCallCheck(this, XMLText);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLText).call(this, parent));\n\n        if (text == null) {\n          throw new Error(\"Missing element text. \" + _this.debugInfo());\n        }\n\n        _this.name = \"#text\";\n        _this.type = NodeType.Text;\n        _this.value = _this.stringify.text(text);\n        return _this;\n      } // Creates and returns a deep clone of `this`\n\n\n      _createClass(XMLText, [{\n        key: \"clone\",\n        value: function clone() {\n          return Object.create(this);\n        } // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.text(this, this.options.writer.filterOptions(options));\n        } // DOM level 1 functions to be implemented later\n\n      }, {\n        key: \"splitText\",\n        value: function splitText(offset) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 3 functions to be implemented later\n\n      }, {\n        key: \"replaceWholeText\",\n        value: function replaceWholeText(content) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }]);\n\n      return XMLText;\n    }(XMLCharacterData);\n\n    ; // DOM level 3\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function get() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n\n        str += this.data;\n        next = this.nextSibling;\n\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n\n        return str;\n      }\n    });\n    return XMLText;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}