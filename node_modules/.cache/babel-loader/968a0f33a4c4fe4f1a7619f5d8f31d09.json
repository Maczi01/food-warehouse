{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @param {string} workerSid - The SID of the reserved Worker resource\n */\n\n/* jshint ignore:end */\n\nReservationList = function ReservationList(version, workspaceSid, workerSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n\n  ReservationListInstance._version = version; // Path Solution\n\n  ReservationListInstance._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid\n  };\n  ReservationListInstance._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workers/\").concat(workerSid, \"/Reservations\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} sid - The SID of the WorkerReservation resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(this._version, this._solution.workspaceSid, this._solution.workerSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ReservationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n\n/* jshint ignore:end */\n\n\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ReservationPage.prototype, Page.prototype);\n\nReservationPage.prototype.constructor = ReservationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n\n/* jshint ignore:end */\n\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nReservationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {reservation.status} reservationStatus -\n *          The current status of the reservation\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskSid - The SID of the reserved Task resource\n * @property {string} workerName - The friendly_name of the Worker that is reserved\n * @property {string} workerSid - The SID of the reserved Worker resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @property {string} url - The absolute URL of the WorkerReservation resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @param {sid} workerSid - The SID of the reserved Worker resource\n * @param {sid} sid - The SID of the WorkerReservation resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance = function ReservationInstance(version, payload, workspaceSid, workerSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taskSid = payload.task_sid; // jshint ignore:line\n\n  this.workerName = payload.worker_name; // jshint ignore:line\n\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ReservationInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ReservationContext(this._version, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] -\n *          The assignment instruction for the reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          The timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          The timeout for a call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          The timeout for a call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          Whether to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the WorkerReservation resource to fetch\n * @param {sid} workerSid -\n *          The SID of the reserved Worker resource with the WorkerReservation resource to fetch\n * @param {sid} sid - The SID of the WorkerReservation resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nReservationContext = function ReservationContext(version, workspaceSid, workerSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Workers/\").concat(workerSid, \"/Reservations/\").concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] -\n *          The assignment instruction for the reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          The timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          The timeout for a call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          The timeout for a call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          Whether to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nReservationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};","map":null,"metadata":{},"sourceType":"script"}