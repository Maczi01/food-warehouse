{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar StepContextList;\nvar StepContextPage;\nvar StepContextInstance;\nvar StepContextContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the StepContextList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n * @param {string} engagementSid - The SID of the Engagement\n * @param {string} stepSid - Step SID\n */\n\n/* jshint ignore:end */\n\nStepContextList = function StepContextList(version, flowSid, engagementSid, stepSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function stepContext\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext}\n   */\n\n  /* jshint ignore:end */\n  function StepContextListInstance(sid) {\n    return StepContextListInstance.get(sid);\n  }\n\n  StepContextListInstance._version = version; // Path Solution\n\n  StepContextListInstance._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    stepSid: stepSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a step_context\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList#\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext}\n   */\n\n  /* jshint ignore:end */\n\n  StepContextListInstance.get = function get() {\n    return new StepContextContext(this._version, this._solution.flowSid, this._solution.engagementSid, this._solution.stepSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  StepContextListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  StepContextListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return StepContextListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StepContextPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {StepContextSolution} solution - Path solution\n *\n * @returns StepContextPage\n */\n\n/* jshint ignore:end */\n\n\nStepContextPage = function StepContextPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(StepContextPage.prototype, Page.prototype);\n\nStepContextPage.prototype.constructor = StepContextPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of StepContextInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextPage#\n *\n * @param {StepContextPayload} payload - Payload response from the API\n *\n * @returns StepContextInstance\n */\n\n/* jshint ignore:end */\n\nStepContextPage.prototype.getInstance = function getInstance(payload) {\n  return new StepContextInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid, this._solution.stepSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStepContextPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nStepContextPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StepContextContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {object} context - The current state of the flow\n * @property {string} engagementSid - The SID of the Engagement\n * @property {string} flowSid - The SID of the Flow\n * @property {string} stepSid - Step SID\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {StepContextPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} stepSid - Step SID\n */\n\n/* jshint ignore:end */\n\n\nStepContextInstance = function StepContextInstance(version, payload, flowSid, engagementSid, stepSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.context = payload.context; // jshint ignore:line\n\n  this.engagementSid = payload.engagement_sid; // jshint ignore:line\n\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n\n  this.stepSid = payload.step_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    stepSid: stepSid\n  };\n};\n\nObject.defineProperty(StepContextInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new StepContextContext(this._version, this._solution.flowSid, this._solution.engagementSid, this._solution.stepSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a StepContextInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepContextInstance\n */\n\n/* jshint ignore:end */\n\nStepContextInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStepContextInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nStepContextInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StepContextContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} stepSid - Step SID\n */\n\n/* jshint ignore:end */\n\n\nStepContextContext = function StepContextContext(version, flowSid, engagementSid, stepSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    stepSid: stepSid\n  };\n  this._uri = \"/Flows/\".concat(flowSid, \"/Engagements/\").concat(engagementSid, \"/Steps/\").concat(stepSid, \"/Context\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a StepContextInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepContextInstance\n */\n\n/* jshint ignore:end */\n\n\nStepContextContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new StepContextInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid, this._solution.stepSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStepContextContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nStepContextContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  StepContextList: StepContextList,\n  StepContextPage: StepContextPage,\n  StepContextInstance: StepContextInstance,\n  StepContextContext: StepContextContext\n};","map":null,"metadata":{},"sourceType":"script"}