{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConfigurationList;\nvar ConfigurationPage;\nvar ConfigurationInstance;\nvar ConfigurationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationList\n *\n * @constructor Twilio.FlexApi.V1.ConfigurationList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nConfigurationList = function ConfigurationList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function configuration\n   * @memberof Twilio.FlexApi.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.ConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n  function ConfigurationListInstance(sid) {\n    return ConfigurationListInstance.get(sid);\n  }\n\n  ConfigurationListInstance._version = version; // Path Solution\n\n  ConfigurationListInstance._solution = {};\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a configuration\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.ConfigurationList#\n   *\n   * @returns {Twilio.FlexApi.V1.ConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n\n  ConfigurationListInstance.get = function get() {\n    return new ConfigurationContext(this._version);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.ConfigurationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConfigurationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConfigurationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationPage\n *\n * @constructor Twilio.FlexApi.V1.ConfigurationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConfigurationSolution} solution - Path solution\n *\n * @returns ConfigurationPage\n */\n\n/* jshint ignore:end */\n\n\nConfigurationPage = function ConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConfigurationPage.prototype, Page.prototype);\n\nConfigurationPage.prototype.constructor = ConfigurationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.ConfigurationPage#\n *\n * @param {ConfigurationPayload} payload - Payload response from the API\n *\n * @returns ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConfigurationInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.ConfigurationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConfigurationPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConfigurationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationContext\n *\n * @constructor Twilio.FlexApi.V1.ConfigurationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Configuration resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Configuration resource was last updated\n * @property {object} attributes -\n *          An object that contains application-specific data\n * @property {configuration.status} status - The status of the Flex onboarding\n * @property {string} taskrouterWorkspaceSid - The SID of the TaskRouter Workspace\n * @property {string} taskrouterTargetWorkflowSid -\n *          The SID of the TaskRouter target Workflow\n * @property {string} taskrouterTargetTaskqueueSid -\n *          The SID of the TaskRouter Target TaskQueue\n * @property {object} taskrouterTaskqueues - The list of TaskRouter TaskQueues\n * @property {object} taskrouterSkills -\n *          The Skill description for TaskRouter workers\n * @property {object} taskrouterWorkerChannels -\n *          The TaskRouter default channel capacities and availability for workers\n * @property {object} taskrouterWorkerAttributes - The TaskRouter Worker attributes\n * @property {string} taskrouterOfflineActivitySid -\n *          The TaskRouter SID of the offline activity\n * @property {string} runtimeDomain - The URL where the Flex instance is hosted\n * @property {string} messagingServiceInstanceSid -\n *          The SID of the Messaging service instance\n * @property {string} chatServiceInstanceSid -\n *          The SID of the chat service this user belongs to\n * @property {string} uiLanguage - The primary language of the Flex UI\n * @property {object} uiAttributes -\n *          The object that describes Flex UI characteristics and settings\n * @property {object} uiDependencies -\n *          The object that defines the NPM packages and versions to be used in Hosted Flex\n * @property {string} uiVersion - The Pinned UI version\n * @property {string} serviceVersion - The Flex Service version\n * @property {boolean} callRecordingEnabled - Whether call recording is enabled\n * @property {string} callRecordingWebhookUrl - The call recording webhook URL\n * @property {boolean} crmEnabled - Whether CRM is present for Flex\n * @property {string} crmType - The CRM Type\n * @property {string} crmCallbackUrl - The CRM Callback URL\n * @property {string} crmFallbackUrl - The CRM Fallback URL\n * @property {object} crmAttributes - An object that contains the CRM attributes\n * @property {object} publicAttributes - The list of public attributes\n * @property {boolean} pluginServiceEnabled - Whether the plugin service enabled\n * @property {object} pluginServiceAttributes - The plugin service attributes\n * @property {object} integrations -\n *          A list of objects that contain the configurations for the Integrations supported in this configuration\n * @property {object} outboundCallFlows - The list of outbound call flows\n * @property {string} serverlessServiceSids - The list of serverless service SIDs\n * @property {object} wfmIntegrations -\n *          A list of objects that contain the configurations for the WFM Integrations supported in this configuration\n * @property {object} queueStatsConfiguration -\n *          Configurable parameters for Queues Statistics\n * @property {string} url - The absolute URL of the Configuration resource\n *\n * @param {V1} version - Version of the resource\n * @param {ConfigurationPayload} payload - The instance payload\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance = function ConfigurationInstance(version, payload) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.taskrouterWorkspaceSid = payload.taskrouter_workspace_sid; // jshint ignore:line\n\n  this.taskrouterTargetWorkflowSid = payload.taskrouter_target_workflow_sid; // jshint ignore:line\n\n  this.taskrouterTargetTaskqueueSid = payload.taskrouter_target_taskqueue_sid; // jshint ignore:line\n\n  this.taskrouterTaskqueues = payload.taskrouter_taskqueues; // jshint ignore:line\n\n  this.taskrouterSkills = payload.taskrouter_skills; // jshint ignore:line\n\n  this.taskrouterWorkerChannels = payload.taskrouter_worker_channels; // jshint ignore:line\n\n  this.taskrouterWorkerAttributes = payload.taskrouter_worker_attributes; // jshint ignore:line\n\n  this.taskrouterOfflineActivitySid = payload.taskrouter_offline_activity_sid; // jshint ignore:line\n\n  this.runtimeDomain = payload.runtime_domain; // jshint ignore:line\n\n  this.messagingServiceInstanceSid = payload.messaging_service_instance_sid; // jshint ignore:line\n\n  this.chatServiceInstanceSid = payload.chat_service_instance_sid; // jshint ignore:line\n\n  this.uiLanguage = payload.ui_language; // jshint ignore:line\n\n  this.uiAttributes = payload.ui_attributes; // jshint ignore:line\n\n  this.uiDependencies = payload.ui_dependencies; // jshint ignore:line\n\n  this.uiVersion = payload.ui_version; // jshint ignore:line\n\n  this.serviceVersion = payload.service_version; // jshint ignore:line\n\n  this.callRecordingEnabled = payload.call_recording_enabled; // jshint ignore:line\n\n  this.callRecordingWebhookUrl = payload.call_recording_webhook_url; // jshint ignore:line\n\n  this.crmEnabled = payload.crm_enabled; // jshint ignore:line\n\n  this.crmType = payload.crm_type; // jshint ignore:line\n\n  this.crmCallbackUrl = payload.crm_callback_url; // jshint ignore:line\n\n  this.crmFallbackUrl = payload.crm_fallback_url; // jshint ignore:line\n\n  this.crmAttributes = payload.crm_attributes; // jshint ignore:line\n\n  this.publicAttributes = payload.public_attributes; // jshint ignore:line\n\n  this.pluginServiceEnabled = payload.plugin_service_enabled; // jshint ignore:line\n\n  this.pluginServiceAttributes = payload.plugin_service_attributes; // jshint ignore:line\n\n  this.integrations = payload.integrations; // jshint ignore:line\n\n  this.outboundCallFlows = payload.outbound_call_flows; // jshint ignore:line\n\n  this.serverlessServiceSids = payload.serverless_service_sids; // jshint ignore:line\n\n  this.wfmIntegrations = payload.wfm_integrations; // jshint ignore:line\n\n  this.queueStatsConfiguration = payload.queue_stats_configuration; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(ConfigurationInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ConfigurationContext(this._version);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.ConfigurationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uiVersion] -\n *          The Pinned UI version of the Configuration resource to fetch\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nConfigurationInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * create a ConfigurationInstance\n *\n * @function create\n * @memberof Twilio.FlexApi.V1.ConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance.prototype.create = function create(callback) {\n  return this._proxy.create(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ConfigurationInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.ConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance.prototype.update = function update(callback) {\n  return this._proxy.update(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.ConfigurationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationContext\n *\n * @constructor Twilio.FlexApi.V1.ConfigurationContext\n *\n * @param {V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext = function ConfigurationContext(version) {\n  this._version = version; // Path Solution\n\n  this._solution = {};\n  this._uri = \"/Configuration\";\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.ConfigurationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uiVersion] -\n *          The Pinned UI version of the Configuration resource to fetch\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UiVersion': _.get(opts, 'uiVersion')\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    params: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * create a ConfigurationInstance\n *\n * @function create\n * @memberof Twilio.FlexApi.V1.ConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.create = function create(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.create({\n    uri: this._uri,\n    method: 'POST'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ConfigurationInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.ConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.update = function update(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.ConfigurationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConfigurationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConfigurationList: ConfigurationList,\n  ConfigurationPage: ConfigurationPage,\n  ConfigurationInstance: ConfigurationInstance,\n  ConfigurationContext: ConfigurationContext\n};","map":null,"metadata":{},"sourceType":"script"}