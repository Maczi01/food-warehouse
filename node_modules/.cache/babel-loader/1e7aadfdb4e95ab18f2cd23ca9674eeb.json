{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexport var ErrorCode;\n\n(function (ErrorCode) {\n  // When we have a placeholder but no value to format\n  ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\"; // When value supplied is invalid\n\n  ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\"; // When we need specific Intl API but it's not available\n\n  ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\n\nvar FormatError =\n/** @class */\nfunction (_super) {\n  __extends(FormatError, _super);\n\n  function FormatError(msg, code, originalMessage) {\n    var _this = _super.call(this, msg) || this;\n\n    _this.code = code;\n    _this.originalMessage = originalMessage;\n    return _this;\n  }\n\n  FormatError.prototype.toString = function () {\n    return \"[formatjs Error: \" + this.code + \"] \" + this.message;\n  };\n\n  return FormatError;\n}(Error);\n\nexport { FormatError };\n\nvar InvalidValueError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidValueError, _super);\n\n  function InvalidValueError(variableId, value, options, originalMessage) {\n    return _super.call(this, \"Invalid values for \\\"\" + variableId + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(options).join('\", \"') + \"\\\"\", \"INVALID_VALUE\"\n    /* INVALID_VALUE */\n    , originalMessage) || this;\n  }\n\n  return InvalidValueError;\n}(FormatError);\n\nexport { InvalidValueError };\n\nvar InvalidValueTypeError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidValueTypeError, _super);\n\n  function InvalidValueTypeError(value, type, originalMessage) {\n    return _super.call(this, \"Value for \\\"\" + value + \"\\\" must be of type \" + type, \"INVALID_VALUE\"\n    /* INVALID_VALUE */\n    , originalMessage) || this;\n  }\n\n  return InvalidValueTypeError;\n}(FormatError);\n\nexport { InvalidValueTypeError };\n\nvar MissingValueError =\n/** @class */\nfunction (_super) {\n  __extends(MissingValueError, _super);\n\n  function MissingValueError(variableId, originalMessage) {\n    return _super.call(this, \"The intl string context variable \\\"\" + variableId + \"\\\" was not provided to the string \\\"\" + originalMessage + \"\\\"\", \"MISSING_VALUE\"\n    /* MISSING_VALUE */\n    , originalMessage) || this;\n  }\n\n  return MissingValueError;\n}(FormatError);\n\nexport { MissingValueError };","map":null,"metadata":{},"sourceType":"module"}