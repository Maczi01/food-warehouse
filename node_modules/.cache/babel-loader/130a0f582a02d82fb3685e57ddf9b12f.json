{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InviteList = require('./channel/invite').InviteList;\n\nvar MemberList = require('./channel/member').MemberList;\n\nvar MessageList = require('./channel/message').MessageList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ChannelList;\nvar ChannelPage;\nvar ChannelInstance;\nvar ChannelContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelList\n *\n * @constructor Twilio.Chat.V1.ServiceContext.ChannelList\n *\n * @param {Twilio.Chat.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n\n/* jshint ignore:end */\n\nChannelList = function ChannelList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function channels\n   * @memberof Twilio.Chat.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V1.ServiceContext.ChannelContext}\n   */\n\n  /* jshint ignore:end */\n  function ChannelListInstance(sid) {\n    return ChannelListInstance.get(sid);\n  }\n\n  ChannelListInstance._version = version; // Path Solution\n\n  ChannelListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  ChannelListInstance._uri = \"/Services/\".concat(serviceSid, \"/Channels\");\n  /* jshint ignore:start */\n\n  /**\n   * create a ChannelInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that contains application-specific data\n   * @param {channel.channel_type} [opts.type] - The visibility of the channel\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChannelInstance\n   */\n\n  /* jshint ignore:end */\n\n  ChannelListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'Type': _.get(opts, 'type')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': serialize.map(_.get(opts, 'type'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a channel\n   *\n   * @function get\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Chat.V1.ServiceContext.ChannelContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.get = function get(sid) {\n    return new ChannelContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V1.ServiceContext.ChannelList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChannelListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelPage\n *\n * @constructor Twilio.Chat.V1.ServiceContext.ChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChannelSolution} solution - Path solution\n *\n * @returns ChannelPage\n */\n\n/* jshint ignore:end */\n\n\nChannelPage = function ChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChannelPage.prototype, Page.prototype);\n\nChannelPage.prototype.constructor = ChannelPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelPage#\n *\n * @param {ChannelPayload} payload - Payload response from the API\n *\n * @returns ChannelInstance\n */\n\n/* jshint ignore:end */\n\nChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new ChannelInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nChannelPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.Chat.V1.ServiceContext.ChannelInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          The JSON string that stores application-specific data\n * @property {channel.channel_type} type -\n *          The visibility of the channel. Can be: `public` or `private`\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} createdBy - The identity of the User that created the channel\n * @property {number} membersCount - The number of Members in the Channel\n * @property {number} messagesCount - The number of Messages in the Channel\n * @property {string} url - The absolute URL of the Channel resource\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n *\n * @param {V1} version - Version of the resource\n * @param {ChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance = function ChannelInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  this.membersCount = deserialize.integer(payload.members_count); // jshint ignore:line\n\n  this.messagesCount = deserialize.integer(payload.messages_count); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ChannelInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ChannelContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\nChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V1.ServiceContext.ChannelContext.MemberList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n/* jshint ignore:start */\n\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V1.ServiceContext.ChannelContext.MessageList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n/* jshint ignore:start */\n\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V1.ServiceContext.ChannelContext.InviteList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.Chat.V1.ServiceContext.ChannelContext\n *\n * @property {Twilio.Chat.V1.ServiceContext.ChannelContext.MemberList} members -\n *          members resource\n * @property {Twilio.Chat.V1.ServiceContext.ChannelContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Chat.V1.ServiceContext.ChannelContext.InviteList} invites -\n *          invites resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nChannelContext = function ChannelContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Channels/\").concat(sid); // Dependents\n\n  this._members = undefined;\n  this._messages = undefined;\n  this._invites = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Attributes': _.get(opts, 'attributes')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChannelContext.prototype, 'members', {\n  get: function get() {\n    if (!this._members) {\n      this._members = new MemberList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._members;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'messages', {\n  get: function get() {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._messages;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'invites', {\n  get: function get() {\n    if (!this._invites) {\n      this._invites = new InviteList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._invites;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V1.ServiceContext.ChannelContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChannelList: ChannelList,\n  ChannelPage: ChannelPage,\n  ChannelInstance: ChannelInstance,\n  ChannelContext: ChannelContext\n};","map":null,"metadata":{},"sourceType":"script"}