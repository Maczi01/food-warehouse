{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Event\n */\n\n/* jshint ignore:end */\n\nEventList = function EventList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function events\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventContext}\n   */\n\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n\n  EventListInstance._version = version; // Path Solution\n\n  EventListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  EventListInstance._uri = \"/Workspaces/\".concat(workspaceSid, \"/Events\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'EventType': _.get(opts, 'eventType'),\n      'Minutes': _.get(opts, 'minutes'),\n      'ReservationSid': _.get(opts, 'reservationSid'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskSid': _.get(opts, 'taskSid'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'Sid': _.get(opts, 'sid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, this._solution.workspaceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EventListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n\n/* jshint ignore:end */\n\n\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EventPage.prototype, Page.prototype);\n\nEventPage.prototype.constructor = EventPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n\n/* jshint ignore:end */\n\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} actorSid - The SID of the resource that triggered the event\n * @property {string} actorType - The type of resource that triggered the event\n * @property {string} actorUrl -\n *          The absolute URL of the resource that triggered the event\n * @property {string} description - A description of the event\n * @property {object} eventData - Data about the event\n * @property {Date} eventDate - The time the event was sent\n * @property {number} eventDateMs - The time the event was sent in milliseconds\n * @property {string} eventType - The identifier for the event\n * @property {string} resourceSid -\n *          The SID of the object the event is most relevant to\n * @property {string} resourceType -\n *          The type of object the event is most relevant to\n * @property {string} resourceUrl -\n *          The URL of the resource the event is most relevant to\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} source - Where the Event originated\n * @property {string} sourceIpAddress - The IP from which the Event originated\n * @property {string} url - The absolute URL of the Event resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Event\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Event\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEventInstance = function EventInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n\n  this.actorType = payload.actor_type; // jshint ignore:line\n\n  this.actorUrl = payload.actor_url; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.eventData = payload.event_data; // jshint ignore:line\n\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n\n  this.eventDateMs = deserialize.integer(payload.event_date_ms); // jshint ignore:line\n\n  this.eventType = payload.event_type; // jshint ignore:line\n\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n\n  this.resourceType = payload.resource_type; // jshint ignore:line\n\n  this.resourceUrl = payload.resource_url; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.source = payload.source; // jshint ignore:line\n\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(EventInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new EventContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n\n/* jshint ignore:end */\n\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Event to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEventContext = function EventContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Events/\").concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n\n/* jshint ignore:end */\n\n\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EventInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};","map":null,"metadata":{},"sourceType":"script"}