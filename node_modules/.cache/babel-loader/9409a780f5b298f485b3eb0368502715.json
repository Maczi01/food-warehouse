{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FunctionVersionContentList;\nvar FunctionVersionContentPage;\nvar FunctionVersionContentInstance;\nvar FunctionVersionContentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContentList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {string} functionSid -\n *          The SID of the Function that is the parent of the Function Version\n * @param {string} sid -\n *          The unique string that identifies the Function Version resource\n */\n\n/* jshint ignore:end */\n\nFunctionVersionContentList = function FunctionVersionContentList(version, serviceSid, functionSid, sid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function functionVersionContent\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentContext}\n   */\n\n  /* jshint ignore:end */\n  function FunctionVersionContentListInstance(sid) {\n    return FunctionVersionContentListInstance.get(sid);\n  }\n\n  FunctionVersionContentListInstance._version = version; // Path Solution\n\n  FunctionVersionContentListInstance._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a function_version_content\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList#\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentContext}\n   */\n\n  /* jshint ignore:end */\n\n  FunctionVersionContentListInstance.get = function get() {\n    return new FunctionVersionContentContext(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionContentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FunctionVersionContentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FunctionVersionContentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContentPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FunctionVersionContentSolution} solution - Path solution\n *\n * @returns FunctionVersionContentPage\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentPage = function FunctionVersionContentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FunctionVersionContentPage.prototype, Page.prototype);\n\nFunctionVersionContentPage.prototype.constructor = FunctionVersionContentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FunctionVersionContentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentPage#\n *\n * @param {FunctionVersionContentPayload} payload - Payload response from the API\n *\n * @returns FunctionVersionContentInstance\n */\n\n/* jshint ignore:end */\n\nFunctionVersionContentPage.prototype.getInstance = function getInstance(payload) {\n  return new FunctionVersionContentInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFunctionVersionContentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Function Version resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Function Version resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @property {string} functionSid -\n *          The SID of the Function that is the parent of the Function Version\n * @property {string} content - The content of the Function Version resource\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {FunctionVersionContentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {sid} functionSid -\n *          The SID of the Function that is the parent of the Function Version\n * @param {sid} sid -\n *          The unique string that identifies the Function Version resource\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentInstance = function FunctionVersionContentInstance(version, payload, serviceSid, functionSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.functionSid = payload.function_sid; // jshint ignore:line\n\n  this.content = payload.content; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid\n  };\n};\n\nObject.defineProperty(FunctionVersionContentInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FunctionVersionContentContext(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FunctionVersionContentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionContentInstance\n */\n\n/* jshint ignore:end */\n\nFunctionVersionContentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFunctionVersionContentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Function Version content from\n * @param {sid} functionSid -\n *          The SID of the function that is the parent of the Function Version content to fetch\n * @param {sid} sid - The SID that identifies the Function Version content to fetch\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentContext = function FunctionVersionContentContext(version, serviceSid, functionSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Functions/\").concat(functionSid, \"/Versions/\").concat(sid, \"/Content\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FunctionVersionContentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionContentInstance\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FunctionVersionContentInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFunctionVersionContentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FunctionVersionContentList: FunctionVersionContentList,\n  FunctionVersionContentPage: FunctionVersionContentPage,\n  FunctionVersionContentInstance: FunctionVersionContentInstance,\n  FunctionVersionContentContext: FunctionVersionContentContext\n};","map":null,"metadata":{},"sourceType":"script"}