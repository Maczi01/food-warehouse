{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _length = _interopRequireDefault(require(\"./length\"));\n\nvar _normalize = _interopRequireDefault(require(\"../indices/normalize\"));\n\nvar reverseMerge = R.flip(R.merge);\nvar reverseConcat = R.flip(R.concat);\n/**\n * Concats two runs into one\n *\n * @param  {Object}  first run\n * @param  {Object}  second run\n * @return {Object}  concatenated run\n */\n\nvar concat = function concat(runA, runB) {\n  return R.evolve({\n    end: R.add((0, _length[\"default\"])(runB)),\n    glyphs: reverseConcat(R.prop('glyphs', runB)),\n    positions: reverseConcat(R.prop('positions', runB)),\n    attributes: reverseMerge(R.prop('attributes', runB)),\n    glyphIndices: R.compose(_normalize[\"default\"], reverseConcat(R.map(R.compose(R.inc, R.add(R.last(R.propOr([], 'glyphIndices', runA)) || 0)), R.propOr([], 'glyphIndices', runB))))\n  })(runA);\n};\n\nvar _default = R.curryN(2, concat);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}