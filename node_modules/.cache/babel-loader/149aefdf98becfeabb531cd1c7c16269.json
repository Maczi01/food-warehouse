{"ast":null,"code":"'use strict';\n\nvar jwt = require('jsonwebtoken');\n\nvar _ = require('lodash');\n/**\n * Create a new Policy\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} [options.url] - Policy URL\n * @param {string} [options.method] - HTTP Method\n * @param {object} [options.queryFilter] - Request query filter allowances\n * @param {object} [options.postFilter] - Request post filter allowances\n * @param {boolean} [options.allowed] - Allow the policy\n */\n\n\nfunction Policy(options) {\n  options = options || {};\n  this.url = options.url;\n  this.method = options.method || 'GET';\n  this.queryFilter = options.queryFilter || {};\n  this.postFilter = options.postFilter || {};\n  this.allow = options.allow || true;\n}\n\n_.extend(Policy.prototype, {\n  payload: function payload() {\n    return {\n      url: this.url,\n      method: this.method,\n      query_filter: this.queryFilter,\n      post_filter: this.postFilter,\n      allow: this.allow\n    };\n  }\n});\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.accountSid - account sid\n * @param {string} options.authToken - auth token\n * @param {string} options.workspaceSid - workspace sid\n * @param {string} options.channelId - taskrouter channel id\n * @param {string} [options.friendlyName] - friendly name for the jwt\n * @param {number} [options.ttl] - time to live\n * @param {string} [options.version] - taskrouter version\n */\n\n\nfunction TaskRouterCapability(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n\n  if (_.isUndefined(options.accountSid)) {\n    throw new Error('Required parameter \"options.accountSid\" missing.');\n  }\n\n  if (_.isUndefined(options.authToken)) {\n    throw new Error('Required parameter \"options.authToken\" missing.');\n  }\n\n  if (_.isUndefined(options.workspaceSid)) {\n    throw new Error('Required parameter \"options.workspaceSid\" missing.');\n  }\n\n  if (_.isUndefined(options.channelId)) {\n    throw new Error('Required parameter \"options.channelId\" missing.');\n  }\n\n  this.accountSid = options.accountSid;\n  this.authToken = options.authToken;\n  this.workspaceSid = options.workspaceSid;\n  this.channelId = options.channelId;\n  this.friendlyName = options.friendlyName;\n  this.ttl = options.ttl || 3600;\n  this.version = options.version || 'v1';\n  this.policies = [];\n}\n\nTaskRouterCapability.Policy = Policy;\n\n_.extend(TaskRouterCapability.prototype, {\n  addPolicy: function addPolicy(policy) {\n    this.policies.push(policy);\n  },\n  toJwt: function toJwt() {\n    var payload = {\n      iss: this.accountSid,\n      exp: Math.floor(new Date() / 1000) + this.ttl,\n      version: this.version,\n      friendly_name: this.friendlyName,\n      account_sid: this.accountSid,\n      channel: this.channelId,\n      workspace_sid: this.workspaceSid,\n      policies: _.map(this.policies, function (policy) {\n        return policy.payload();\n      })\n    };\n\n    if (_.startsWith(this.channelId, 'WK')) {\n      payload.worker_sid = this.channelId;\n    } else if (_.startsWith(this.channelId, 'WQ')) {\n      payload.taskqueue_sid = this.channelId;\n    }\n\n    return jwt.sign(payload, this.authToken);\n  }\n});\n\nmodule.exports = TaskRouterCapability;","map":null,"metadata":{},"sourceType":"script"}