{"ast":null,"code":"'use strict';\n/* eslint-disable space-infix-ops */\n// The precision used to consider an ellipse as a circle\n//\n\nvar epsilon = 0.0000000001; // To convert degree in radians\n//\n\nvar torad = Math.PI / 180; // Class constructor :\n//  an ellipse centred at 0 with radii rx,ry and x - axis - angle ax.\n//\n\nfunction Ellipse(rx, ry, ax) {\n  if (!(this instanceof Ellipse)) {\n    return new Ellipse(rx, ry, ax);\n  }\n\n  this.rx = rx;\n  this.ry = ry;\n  this.ax = ax;\n} // Apply a linear transform m to the ellipse\n// m is an array representing a matrix :\n//    -         -\n//   | m[0] m[2] |\n//   | m[1] m[3] |\n//    -         -\n//\n\n\nEllipse.prototype.transform = function (m) {\n  // We consider the current ellipse as image of the unit circle\n  // by first scale(rx,ry) and then rotate(ax) ...\n  // So we apply ma =  m x rotate(ax) x scale(rx,ry) to the unit circle.\n  var c = Math.cos(this.ax * torad),\n      s = Math.sin(this.ax * torad);\n  var ma = [this.rx * (m[0] * c + m[2] * s), this.rx * (m[1] * c + m[3] * s), this.ry * (-m[0] * s + m[2] * c), this.ry * (-m[1] * s + m[3] * c)]; // ma * transpose(ma) = [ J L ]\n  //                      [ L K ]\n  // L is calculated later (if the image is not a circle)\n\n  var J = ma[0] * ma[0] + ma[2] * ma[2],\n      K = ma[1] * ma[1] + ma[3] * ma[3]; // the discriminant of the characteristic polynomial of ma * transpose(ma)\n\n  var D = ((ma[0] - ma[3]) * (ma[0] - ma[3]) + (ma[2] + ma[1]) * (ma[2] + ma[1])) * ((ma[0] + ma[3]) * (ma[0] + ma[3]) + (ma[2] - ma[1]) * (ma[2] - ma[1])); // the \"mean eigenvalue\"\n\n  var JK = (J + K) / 2; // check if the image is (almost) a circle\n\n  if (D < epsilon * JK) {\n    // if it is\n    this.rx = this.ry = Math.sqrt(JK);\n    this.ax = 0;\n    return this;\n  } // if it is not a circle\n\n\n  var L = ma[0] * ma[1] + ma[2] * ma[3];\n  D = Math.sqrt(D); // {l1,l2} = the two eigen values of ma * transpose(ma)\n\n  var l1 = JK + D / 2,\n      l2 = JK - D / 2; // the x - axis - rotation angle is the argument of the l1 - eigenvector\n\n  /*eslint-disable indent*/\n\n  this.ax = Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon ? 90 : Math.atan(Math.abs(L) > Math.abs(l1 - K) ? (l1 - J) / L : L / (l1 - K)) * 180 / Math.PI;\n  /*eslint-enable indent*/\n  // if ax > 0 => rx = sqrt(l1), ry = sqrt(l2), else exchange axes and ax += 90\n\n  if (this.ax >= 0) {\n    // if ax in [0,90]\n    this.rx = Math.sqrt(l1);\n    this.ry = Math.sqrt(l2);\n  } else {\n    // if ax in ]-90,0[ => exchange axes\n    this.ax += 90;\n    this.rx = Math.sqrt(l2);\n    this.ry = Math.sqrt(l1);\n  }\n\n  return this;\n}; // Check if the ellipse is (almost) degenerate, i.e. rx = 0 or ry = 0\n//\n\n\nEllipse.prototype.isDegenerate = function () {\n  return this.rx < epsilon * this.ry || this.ry < epsilon * this.rx;\n};\n\nmodule.exports = Ellipse;","map":null,"metadata":{},"sourceType":"script"}