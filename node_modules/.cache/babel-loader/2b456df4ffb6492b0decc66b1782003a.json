{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EngagementContextList;\nvar EngagementContextPage;\nvar EngagementContextInstance;\nvar EngagementContextContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementContextList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - Flow SID\n * @param {string} engagementSid - Engagement SID\n */\n\n/* jshint ignore:end */\n\nEngagementContextList = function EngagementContextList(version, flowSid, engagementSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function engagementContext\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextContext}\n   */\n\n  /* jshint ignore:end */\n  function EngagementContextListInstance(sid) {\n    return EngagementContextListInstance.get(sid);\n  }\n\n  EngagementContextListInstance._version = version; // Path Solution\n\n  EngagementContextListInstance._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a engagement_context\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList#\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextContext}\n   */\n\n  /* jshint ignore:end */\n\n  EngagementContextListInstance.get = function get() {\n    return new EngagementContextContext(this._version, this._solution.flowSid, this._solution.engagementSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementContextListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EngagementContextListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EngagementContextListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementContextPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EngagementContextSolution} solution - Path solution\n *\n * @returns EngagementContextPage\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextPage = function EngagementContextPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EngagementContextPage.prototype, Page.prototype);\n\nEngagementContextPage.prototype.constructor = EngagementContextPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EngagementContextInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextPage#\n *\n * @param {EngagementContextPayload} payload - Payload response from the API\n *\n * @returns EngagementContextInstance\n */\n\n/* jshint ignore:end */\n\nEngagementContextPage.prototype.getInstance = function getInstance(payload) {\n  return new EngagementContextInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextPage.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEngagementContextPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementContextContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextInstance\n *\n * @property {string} accountSid - Account SID\n * @property {object} context - Flow state\n * @property {string} engagementSid - Engagement SID\n * @property {string} flowSid - Flow SID\n * @property {string} url - The URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {EngagementContextPayload} payload - The instance payload\n * @param {sid} flowSid - Flow SID\n * @param {sid} engagementSid - Engagement SID\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextInstance = function EngagementContextInstance(version, payload, flowSid, engagementSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.context = payload.context; // jshint ignore:line\n\n  this.engagementSid = payload.engagement_sid; // jshint ignore:line\n\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid\n  };\n};\n\nObject.defineProperty(EngagementContextInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new EngagementContextContext(this._version, this._solution.flowSid, this._solution.engagementSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EngagementContextInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementContextInstance\n */\n\n/* jshint ignore:end */\n\nEngagementContextInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextInstance.prototype.toJSON = function toJSON() {\n  var clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEngagementContextInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementContextContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - Flow SID\n * @param {sid} engagementSid - Engagement SID\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextContext = function EngagementContextContext(version, flowSid, engagementSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid\n  };\n  this._uri = \"/Flows/\".concat(flowSid, \"/Engagements/\").concat(engagementSid, \"/Context\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EngagementContextInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementContextInstance\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EngagementContextInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEngagementContextContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEngagementContextContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EngagementContextList: EngagementContextList,\n  EngagementContextPage: EngagementContextPage,\n  EngagementContextInstance: EngagementContextInstance,\n  EngagementContextContext: EngagementContextContext\n};","map":null,"metadata":{},"sourceType":"script"}