{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _append = _interopRequireDefault(require(\"./append\"));\n\nvar _copy = _interopRequireDefault(require(\"../run/copy\"));\n\nvar _insert = _interopRequireDefault(require(\"../run/insert\"));\n\nvar _runIndexAt = _interopRequireDefault(require(\"./runIndexAt\"));\n\nvar _stringFromCodePoints = _interopRequireDefault(require(\"../utils/stringFromCodePoints\"));\n\nvar mapCond = function mapCond(conds) {\n  return R.addIndex(R.map)(R.cond(conds));\n};\n\nvar idxEquals = function idxEquals(idx) {\n  return R.compose(R.equals(idx), R.nthArg(1));\n};\n\nvar idxGt = function idxGt(idx) {\n  return R.compose(R.gt(R.__, idx), R.nthArg(1));\n};\n/**\n * Insert glyph into attributed string\n *\n * @param {number} index\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\n\n\nvar insertGlyph = function insertGlyph(index, glyph, string) {\n  var runIndex = (0, _runIndexAt[\"default\"])(index, string); // Add glyph to the end if run index invalid\n\n  if (runIndex === -1) {\n    return (0, _append[\"default\"])(glyph, string);\n  }\n\n  var codePoints = R.propOr([], 'codePoints')(glyph);\n  var incRange = R.add(R.length(codePoints));\n  return R.evolve({\n    string: R.compose(R.join(''), R.insert(index, (0, _stringFromCodePoints[\"default\"])(codePoints))),\n    runs: mapCond([[idxEquals(runIndex), function (run) {\n      return (0, _insert[\"default\"])(index - run.start, glyph, run);\n    }], [idxGt(runIndex), R.evolve({\n      start: incRange,\n      end: incRange\n    })], [R.T, _copy[\"default\"]]])\n  })(string);\n};\n\nvar _default = R.curryN(3, insertGlyph);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}