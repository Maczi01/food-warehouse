{"ast":null,"code":"// Generated by CoffeeScript 1.7.1\n(function () {\n  var NumberT, StringT, utils;\n  NumberT = require('./Number').Number;\n  utils = require('./utils');\n\n  StringT = function () {\n    function StringT(length, encoding) {\n      this.length = length;\n      this.encoding = encoding != null ? encoding : 'ascii';\n    }\n\n    StringT.prototype.decode = function (stream, parent) {\n      var buffer, encoding, length, pos, string;\n\n      length = function () {\n        if (this.length != null) {\n          return utils.resolveLength(this.length, stream, parent);\n        } else {\n          buffer = stream.buffer, length = stream.length, pos = stream.pos;\n\n          while (pos < length && buffer[pos] !== 0x00) {\n            ++pos;\n          }\n\n          return pos - stream.pos;\n        }\n      }.call(this);\n\n      encoding = this.encoding;\n\n      if (typeof encoding === 'function') {\n        encoding = encoding.call(parent, parent) || 'ascii';\n      }\n\n      string = stream.readString(length, encoding);\n\n      if (this.length == null && stream.pos < stream.length) {\n        stream.pos++;\n      }\n\n      return string;\n    };\n\n    StringT.prototype.size = function (val, parent) {\n      var encoding, size;\n\n      if (!val) {\n        return utils.resolveLength(this.length, null, parent);\n      }\n\n      encoding = this.encoding;\n\n      if (typeof encoding === 'function') {\n        encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';\n      }\n\n      if (encoding === 'utf16be') {\n        encoding = 'utf16le';\n      }\n\n      size = Buffer.byteLength(val, encoding);\n\n      if (this.length instanceof NumberT) {\n        size += this.length.size();\n      }\n\n      if (this.length == null) {\n        size++;\n      }\n\n      return size;\n    };\n\n    StringT.prototype.encode = function (stream, val, parent) {\n      var encoding;\n      encoding = this.encoding;\n\n      if (typeof encoding === 'function') {\n        encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';\n      }\n\n      if (this.length instanceof NumberT) {\n        this.length.encode(stream, Buffer.byteLength(val, encoding));\n      }\n\n      stream.writeString(val, encoding);\n\n      if (this.length == null) {\n        return stream.writeUInt8(0x00);\n      }\n    };\n\n    return StringT;\n  }();\n\n  module.exports = StringT;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}