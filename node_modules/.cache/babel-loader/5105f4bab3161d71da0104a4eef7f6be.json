{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar ATTACHMENT_CODE = 0xfffc; // 65532\n\nvar mapIndexed = R.addIndex(R.map);\nvar getGlyphs = R.propOr([], 'glyphs');\nvar getAttachment = R.pathOr({}, ['attributes', 'attachment']);\nvar isReplaceGlyph = R.o(R.includes(ATTACHMENT_CODE), R.propOr([], 'codePoints'));\n/**\n * Resolve attachments of run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\n\nvar resolveRunAttachments = function resolveRunAttachments(run) {\n  var glyphs = getGlyphs(run);\n  var attachment = getAttachment(run);\n  var attachmentWidth = R.always(attachment.width);\n  return R.evolve({\n    positions: mapIndexed(function (position, i) {\n      var glyph = glyphs[i];\n\n      if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n        return R.evolve({\n          xAdvance: attachmentWidth\n        }, position);\n      }\n\n      return R.clone(position);\n    })\n  })(run);\n};\n/**\n * Resolve attachments for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\n\n\nvar resolveAttachments = function resolveAttachments() {\n  return R.evolve({\n    runs: R.map(resolveRunAttachments)\n  });\n};\n\nvar _default = resolveAttachments;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}