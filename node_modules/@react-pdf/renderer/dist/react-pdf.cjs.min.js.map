{"version":3,"file":"react-pdf.cjs.min.js","sources":["../src/constants.js","../src/stylesheet/transformStyles.js","../src/font/font.js","../src/font/emoji.js","../src/font/standard.js","../src/font/hyphenation.js","../src/font/index.js","../src/render/save.js","../src/utils/url.js","../src/render/setLink.js","../src/render/restore.js","../src/node/isSvg.js","../src/node/isText.js","../src/node/isPage.js","../src/node/isLink.js","../src/node/isNote.js","../src/node/isImage.js","../src/node/isCanvas.js","../src/render/clipNode.js","../src/render/renderPath.js","../src/render/renderRect.js","../src/render/renderLine.js","../src/render/renderEllipse.js","../src/render/renderCircle.js","../src/render/renderSvgText.js","../src/svg/parsePoints.js","../src/render/renderPolyline.js","../src/render/renderPolygon.js","../src/utils/warning.js","../src/render/renderSvgImage.js","../src/render/applyTransformations.js","../src/node/isPath.js","../src/node/isRect.js","../src/node/isLine.js","../src/node/isTspan.js","../src/node/isGroup.js","../src/node/isCircle.js","../src/node/isTextInstance.js","../src/render/renderGroup.js","../src/node/isEllipse.js","../src/node/isPolygon.js","../src/node/isPolyline.js","../src/svg/normalizePath.js","../src/svg/getBoundingBox.js","../src/render/renderSvg.js","../src/render/renderText.js","../src/render/renderPage.js","../src/render/renderNote.js","../src/utils/matchPercent.js","../src/image/resolveObjectFit.js","../src/render/renderImage.js","../src/canvas/painter.js","../src/render/renderCanvas.js","../src/node/hasVerticalRuler.js","../src/node/hasHorizontalRuler.js","../src/render/renderRulers.js","../src/render/addMetadata.js","../src/render/renderDebug.js","../src/render/renderBorders.js","../src/render/setDestination.js","../src/render/renderBackground.js","../src/render/index.js","../src/utils/capitalize.js","../src/utils/upperFirst.js","../src/text/transformText.js","../src/text/standardFont.js","../src/text/fontSubstitution.js","../src/svg/layoutText.js","../src/node/isDefs.js","../src/svg/getDefs.js","../src/svg/replaceDefs.js","../src/svg/parseViewbox.js","../src/svg/getContainer.js","../src/svg/inheritProps.js","../src/svg/parseAspectRatio.js","../src/stylesheet/transformColors.js","../src/layout/resolveSvg.js","../src/layout/resolveZIndex.js","../src/layout/resolveRulers.js","../src/utils/png.js","../src/utils/jpeg.js","../src/utils/cache.js","../src/image/resolveImage.js","../src/utils/firstPass.js","../src/image/getSource.js","../src/image/fetchImage.js","../src/text/emoji.js","../src/layout/resolveAssets.js","../src/utils/castArray.js","../src/stylesheet/flatten.js","../src/stylesheet/expandStyles.js","../src/stylesheet/transformUnits.js","../src/stylesheet/resolveMediaQueries.js","../src/layout/resolveStyles.js","../src/node/getOrigin.js","../src/layout/resolveOrigins.js","../src/page/getOrientation.js","../src/page/isLandscape.js","../src/page/getSize.js","../src/utils/assocIfNil.js","../src/layout/resolvePageSizes.js","../src/text/lineIndexAtHeight.js","../src/text/heightAtLineIndex.js","../src/text/splitText.js","../src/node/splitNode.js","../src/node/createInstance.js","../src/node/getNodesHeight.js","../src/node/shouldBreak.js","../src/node/getPadding.js","../src/page/getContentArea.js","../src/text/ignorableChars.js","../src/text/getAttributedString.js","../src/text/layoutText.js","../src/layout/resolveTextLayout.js","../src/layout/resolveInheritance.js","../src/node/getMargin.js","../src/node/getPosition.js","../src/node/getDimension.js","../src/node/getBorderWidth.js","../src/node/setDisplay.js","../src/node/setOverflow.js","../src/node/setFlexWrap.js","../src/node/setYogaValue.js","../src/node/setFlexGrow.js","../src/node/setFlexBasis.js","../src/node/setAlign.js","../src/node/setAlignSelf.js","../src/node/setAlignItems.js","../src/node/setFlexShrink.js","../src/node/setAspectRatio.js","../src/node/setAlignContent.js","../src/node/setPositionType.js","../src/node/setFlexDirection.js","../src/node/setJustifyContent.js","../src/node/setMargin.js","../src/node/setPadding.js","../src/node/setBorderWidth.js","../src/node/setPosition.js","../src/node/setDimension.js","../src/svg/measureSvg.js","../src/text/linesWidth.js","../src/text/linesHeight.js","../src/text/measureText.js","../src/image/getRatio.js","../src/page/isHeightAuto.js","../src/image/measureImage.js","../src/canvas/measureCanvas.js","../src/layout/resolveDimensions.js","../src/layout/resolvePagination.js","../src/node/removeMargins.js","../src/layout/resolvePageMargins.js","../src/layout/resolveNoteChildren.js","../src/layout/resolvePagePaddings.js","../src/layout/resolvePercentRadius.js","../src/layout/resolvePercentHeight.js","../src/layout/resolveLinkSubstitution.js","../src/utils/asyncCompose.js","../src/layout/index.js","../src/utils/propsEqual.js","../src/renderer.js","../src/stylesheet/index.js","../src/index.js","../src/node.js"],"sourcesContent":["export const VIEW = 'VIEW';\nexport const TEXT = 'TEXT';\nexport const LINK = 'LINK';\nexport const PAGE = 'PAGE';\nexport const NOTE = 'NOTE';\nexport const IMAGE = 'IMAGE';\nexport const DOCUMENT = 'DOCUMENT';\nexport const CANVAS = 'CANVAS';\nexport const TEXT_INSTANCE = 'TEXT_INSTANCE';\nexport const SVG = 'SVG';\nexport const GROUP = 'G';\nexport const PATH = 'PATH';\nexport const RECT = 'RECT';\nexport const LINE = 'LINE';\nexport const CIRCLE = 'CIRCLE';\nexport const ELLIPSE = 'ELLIPSE';\nexport const POLYGON = 'POLYGON';\nexport const POLYLINE = 'POLYLINE';\nexport const DEFS = 'DEFS';\nexport const TSPAN = 'TSPAN';\nexport const CLIP_PATH = 'CLIP_PATH';\nexport const STOP = 'STOP';\nexport const LINEAR_GRADIENT = 'LINEAR_GRADIENT';\nexport const RADIAL_GRADIENT = 'RADIAL_GRADIENT';\n\nexport const DPI = 72; // 72pt per inch.\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Common_weight_name_mapping\nexport const FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900,\n};\n\nexport const PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n};\n\nexport const PORTRAIT = 'portrait';\nexport const LANDSCAPE = 'landscape';\n\nexport const INHERITED_PROPERTIES = [\n  'color',\n  'fontFamily',\n  'fontSize',\n  'fontStyle',\n  'fontWeight',\n  'letterSpacing',\n  'opacity',\n  'textDecoration',\n  'lineHeight',\n  'textAlign',\n  'visibility',\n  'wordSpacing',\n];\n\nexport const SVG_INHERITED_PROPS = [\n  'x',\n  'y',\n  'clipPath',\n  'clipRule',\n  'opacity',\n  'fill',\n  'fillOpacity',\n  'fillRule',\n  'stroke',\n  'strokeLinecap',\n  'strokeLinejoin',\n  'strokeOpacity',\n  'strokeWidth',\n  'textAnchor',\n  ...INHERITED_PROPERTIES,\n];\n\nexport const RULER_WIDTH = 13;\nexport const RULER_COLOR = 'white';\nexport const RULER_FONT_SIZE = 6;\nexport const DEFAULT_RULER_STEPS = 50;\nexport const LINE_WIDTH = 0.5;\nexport const LINE_COLOR = 'gray';\nexport const GRID_COLOR = '#ababab';\n","import * as R from 'ramda';\n\nimport { FONT_WEIGHTS } from '../constants';\n\nconst BOX_MODEL_REGEX = /\\d+(px|in|mm|cm|pt|%|vw|vh|px)?/g;\nconst OBJECT_POSITION_REGEX = /\\d+(px|in|mm|cm|pt|%|vw|vh|px)?/g;\nconst BORDER_SHORTHAND_REGEX = /(\\d+(px|in|mm|cm|pt|vw|vh|px)?)\\s(\\S+)\\s(\\S+)/;\nconst TRANSFORM_ORIGIN_REGEX = /(-?\\d+(px|in|mm|cm|pt|%|vw|vh|px)?)|top|right|bottom|left|center/g;\n\nconst matchBoxModel = R.match(BOX_MODEL_REGEX);\nconst matchObjectPosition = R.match(OBJECT_POSITION_REGEX);\nconst matchBorderShorthand = R.match(BORDER_SHORTHAND_REGEX);\nconst matchTransformOrigin = R.match(TRANSFORM_ORIGIN_REGEX);\n\nconst isNumber = R.is(Number);\n\nconst isFontWeightStyle = key => key.match(/^fontWeight/);\n\nconst isBorderStyle = (key, value) =>\n  key.match(/^border(Top|Right|Bottom|Left)(Color|Width|Style)/) &&\n  typeof value === 'string';\n\nconst isBoxModelStyle = (key, value) =>\n  key.match(/^(margin)|(padding)/) && typeof value === 'string';\n\nconst isObjectPositionStyle = (key, value) =>\n  key.match(/^objectPosition/) && typeof value === 'string';\n\nconst isTransformOriginStyle = (key, value) =>\n  key.match(/^transformOrigin/) && typeof value === 'string';\n\nconst isFlexGrow = key => key === 'flexGrow';\n\nconst isFlexShrink = key => key === 'flexShrink';\n\nconst isFlexBasis = key => key === 'flexBasis';\n\nconst processBorders = (key, value) => {\n  const match = matchBorderShorthand(value);\n\n  if (match) {\n    if (key.match(/Color$/)) {\n      return match[4] || value;\n    } else if (key.match(/Style$/)) {\n      return match[3] || value;\n    } else if (key.match(/Width$/)) {\n      return match[1] || value;\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nconst processBoxModel = (key, value) => {\n  const match = matchBoxModel(value);\n\n  if (match) {\n    if (key.match(/Top$/)) {\n      return match[0];\n    } else if (key.match(/Right$/)) {\n      return match[1] || match[0];\n    } else if (key.match(/Bottom$/)) {\n      return match[2] || match[0];\n    } else if (key.match(/Left$/)) {\n      return match[3] || match[1] || match[0];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nexport const processFontWeight = (key, value) => {\n  if (!value) return FONT_WEIGHTS.normal;\n  if (typeof value === 'number') return value;\n  return FONT_WEIGHTS[value.toLowerCase()];\n};\n\nexport const processObjectPosition = (key, value) => {\n  const match = matchObjectPosition(value);\n\n  if (match) {\n    if (key.match(/X$/)) {\n      return match[0] || value;\n    } else if (key.match(/Y$/)) {\n      return match[1] || value;\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nconst transformOffsetKeywords = value => {\n  switch (value) {\n    case 'top':\n    case 'left':\n      return '0%';\n    case 'right':\n    case 'bottom':\n      return '100%';\n    case 'center':\n      return '50%';\n    default:\n      return value;\n  }\n};\n\n// Transforms shorthand transformOrigin values\nconst processTransformOrigin = (key, value) => {\n  const match = matchTransformOrigin(value);\n\n  if (match) {\n    let result;\n\n    if (key.match(/X$/)) {\n      result = match[0] || value;\n    } else if (key.match(/Y$/)) {\n      result = match[1] || match[0] || value;\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n\n    return transformOffsetKeywords(result);\n  }\n\n  return value;\n};\n\nconst processFlexGrow = (key, value) => {\n  if (isNumber(value)) return value;\n  const matches = value.split(' ');\n  return matches[0];\n};\n\nconst processFlexShrink = (key, value) => {\n  if (isNumber(value)) return value;\n  const matches = value.split(' ');\n  return matches[1];\n};\n\nconst processFlexBasis = (key, value) => {\n  if (isNumber(value)) return value;\n  const matches = value.split(' ');\n  return matches[2];\n};\n\nconst keepSame = (key, value) => value;\n\nconst matchNumber = R.when(R.is(String), R.test(/^-?\\d*\\.?\\d*$/));\n\nconst castFloat = R.when(matchNumber, v => parseFloat(v, 10));\n\n/**\n * Transforms style key-value\n *\n * @param {String} key style key\n * @param {String} value style value\n * @returns {String | Number} transformed style values\n */\nconst transformStyle = R.compose(\n  castFloat,\n  R.cond([\n    [isBorderStyle, processBorders],\n    [isBoxModelStyle, processBoxModel],\n    [isObjectPositionStyle, processObjectPosition],\n    [isTransformOriginStyle, processTransformOrigin],\n    [isFontWeightStyle, processFontWeight],\n    [isFlexGrow, processFlexGrow],\n    [isFlexShrink, processFlexShrink],\n    [isFlexBasis, processFlexBasis],\n    [R.T, keepSame],\n  ]),\n);\n\n/**\n * Transforms already expanded styles shortcuts into appropiate values\n * Ex. marginTopWidth: '2 solid red' -> marginTopWidth: 2\n *\n * @param {Object} styles expanded object\n * @returns {Object} transformed styles\n */\nconst transformStyles = R.mapObjIndexed(R.flip(transformStyle));\n\nexport default transformStyles;\n","import isUrl from 'is-url';\nimport fontkit from '@react-pdf/fontkit';\nimport fetch from 'cross-fetch';\n\nimport { processFontWeight } from '../stylesheet/transformStyles';\n\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n\n  const buffer = await (response.buffer\n    ? response.buffer()\n    : response.arrayBuffer());\n\n  return buffer.constructor.name === 'Buffer' ? buffer : Buffer.from(buffer);\n};\n\nclass FontSource {\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = processFontWeight(fontWeight) || 400;\n\n    this.data = null;\n    this.loading = false;\n    this.options = options;\n  }\n\n  async load() {\n    this.loading = true;\n\n    if (BROWSER || isUrl(this.src)) {\n      const { headers, body, method = 'GET' } = this.options;\n      const data = await fetchFont(this.src, { method, body, headers });\n      this.data = fontkit.create(data);\n    } else {\n      this.data = await new Promise((resolve, reject) =>\n        fontkit.open(this.src, (err, data) =>\n          err ? reject(err) : resolve(data),\n        ),\n      );\n    }\n\n    this.loading = false;\n  }\n}\n\nclass Font {\n  static create(family) {\n    return new Font(family);\n  }\n\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n\n  register({ src, fontWeight, fontStyle, ...options }) {\n    this.sources.push(\n      new FontSource(src, this.fontFamily, fontStyle, fontWeight, options),\n    );\n  }\n\n  resolve(descriptor) {\n    const { fontWeight = 400, fontStyle = 'normal' } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n\n    if (exactFit) return exactFit;\n\n    let res;\n\n    if (fontWeight >= 400 && fontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(\n        s => s.fontWeight >= fontWeight && s.fontWeight < 500,\n      );\n\n      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n\n    const lt = styleSources.filter(s => s.fontWeight < fontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > fontWeight);\n\n    if (fontWeight < 400) {\n      res = lt[lt.length - 1] || gt[0];\n    }\n\n    if (fontWeight > 500) {\n      res = gt[0] || lt[lt.length - 1];\n    }\n\n    if (!res) {\n      throw new Error(\n        `Could not resolve font for ${\n          this.fontFamily\n        }, fontWeight ${fontWeight}`,\n      );\n    }\n\n    return res;\n  }\n}\n\nexport default Font;\n","let emojiSource;\n\nexport const registerEmojiSource = ({ url, format = 'png' }) => {\n  emojiSource = { url, format };\n};\n\nexport const getEmojiSource = () => emojiSource;\n\nexport default {\n  registerEmojiSource,\n  getEmojiSource,\n};\n","export default [\n  'Courier',\n  'Courier-Bold',\n  'Courier-Oblique',\n  'Helvetica',\n  'Helvetica-Bold',\n  'Helvetica-Oblique',\n  'Times-Roman',\n  'Times-Bold',\n  'Times-Italic',\n];\n","let hyphenationCallback;\n\nexport const registerHyphenationCallback = callback => {\n  hyphenationCallback = callback;\n};\n\nexport const getHyphenationCallback = () => hyphenationCallback;\n\nexport default {\n  registerHyphenationCallback,\n  getHyphenationCallback,\n};\n","import font from './font';\nimport emoji from './emoji';\nimport standardFonts from './standard';\nimport hyphenation from './hyphenation';\n\nlet fonts = {};\n\nconst register = data => {\n  const { family } = data;\n\n  if (!fonts[family]) {\n    fonts[family] = font.create(family);\n  }\n\n  // Bulk loading\n  if (data.fonts) {\n    for (let i = 0; i < data.fonts.length; i++) {\n      fonts[family].register({ family, ...data.fonts[i] });\n    }\n  } else {\n    fonts[family].register(data);\n  }\n};\n\nconst getRegisteredFonts = () => fonts;\n\nconst getRegisteredFontFamilies = () => Object.keys(fonts);\n\nconst getFont = descriptor => {\n  const { fontFamily } = descriptor;\n  const isStandard = standardFonts.includes(fontFamily);\n\n  if (isStandard) return null;\n\n  if (!fonts[fontFamily]) {\n    throw new Error(\n      `Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`,\n    );\n  }\n\n  return fonts[fontFamily].resolve(descriptor);\n};\n\nconst load = async function(descriptor) {\n  const { fontFamily } = descriptor;\n  const isStandard = standardFonts.includes(fontFamily);\n\n  if (isStandard) return;\n\n  const font = getFont(descriptor);\n\n  // We cache the font to avoid fetching it many times\n  if (!font.data && !font.loading) {\n    await font.load();\n  }\n};\n\nconst reset = function() {\n  for (const font in fonts) {\n    if (fonts.hasOwnProperty(font)) {\n      fonts[font].data = null;\n    }\n  }\n};\n\nconst clear = function() {\n  fonts = {};\n};\n\nexport default {\n  register,\n  getRegisteredFonts,\n  getRegisteredFontFamilies,\n  getFont,\n  load,\n  clear,\n  reset,\n  ...emoji,\n  ...hyphenation,\n};\n","import * as R from 'ramda';\n\nconst save = (ctx, node) => {\n  ctx.save();\n  return node;\n};\n\nexport default R.curryN(2, save);\n","const PROTOCOL_REGEXP = /^([a-z]+\\:(\\/\\/)?)/i;\nconst DEST_REGEXP = /^#.+/;\n\n/**\n * Add protocol th URL if valid\n *\n * @param {String} value url\n * @returns {String} corrected url\n */\nexport const getURL = value => {\n  if (!value) return '';\n\n  if (isSrcId(value)) return value; // don't modify it if it is an id\n\n  if (typeof value === 'string' && !value.match(PROTOCOL_REGEXP)) {\n    return `http://${value}`;\n  }\n\n  return value;\n};\n\nexport const isSrcId = src => src.match(DEST_REGEXP);\n\nexport const setLink = node => {\n  if (!node.src) {\n    return;\n  }\n\n  const { top, left, width, height } = node.getAbsoluteLayout();\n  const instanceMethod = isSrcId(node.src) ? 'goTo' : 'link';\n  const nodeSrc = isSrcId(node.src) ? node.src.slice(1) : node.src;\n\n  node.root.instance[instanceMethod](left, top, width, height, nodeSrc);\n};\n\nexport const setDestination = node => {\n  if (!node.props.id) {\n    return;\n  }\n\n  const { top } = node.getAbsoluteLayout();\n  node.root.instance.addNamedDestination(node.props.id, 'XYZ', null, top, null);\n};\n","import * as R from 'ramda';\n\nimport { getURL } from '../utils/url';\n\nconst DEST_REGEXP = /^#.+/;\n\nconst isSrcId = R.test(DEST_REGEXP);\n\nconst getSource = R.compose(\n  R.either(R.path(['props', 'src']), R.path(['props', 'href'])),\n);\n\nconst setLink = (ctx, node) => {\n  const { top, left, width, height } = node.box;\n  const src = getSource(node);\n  const instanceMethod = isSrcId(src) ? 'goTo' : 'link';\n  const value = isSrcId(src) ? src.slice(1) : getURL(src);\n\n  if (value) {\n    ctx[instanceMethod](left, top, width, height, value);\n  }\n\n  return node;\n};\n\nexport default R.curryN(2, setLink);\n","import * as R from 'ramda';\n\nconst restore = (ctx, node) => {\n  ctx.restore();\n  return node;\n};\n\nexport default R.curryN(2, restore);\n","import * as R from 'ramda';\n\nimport { SVG } from '../constants';\n\n/**\n * Checks if node is svg\n *\n * @param {Object} node\n * @returns {Boolean} is node svg?\n */\nconst isSvg = R.propEq('type', SVG);\n\nexport default isSvg;\n","import * as R from 'ramda';\n\nimport { TEXT } from '../constants';\n\n/**\n * Checks if node is text\n *\n * @param {Object} node\n * @returns {Boolean} is node text?\n */\nconst isText = R.propEq('type', TEXT);\n\nexport default isText;\n","import * as R from 'ramda';\n\nimport { PAGE } from '../constants';\n\n/**\n * Checks if node is page\n *\n * @param {Object} node\n * @returns {Boolean} is node page?\n */\nconst isPage = R.propEq('type', PAGE);\n\nexport default isPage;\n","import * as R from 'ramda';\n\nimport { LINK, TEXT } from '../constants';\n\n/**\n * Checks if node has valid source prop\n *\n * @param {Object} node\n * @returns {Boolean} does node have source prop?\n */\nconst hasSource = R.either(\n  R.hasPath(['props', 'src']),\n  R.hasPath(['props', 'href']),\n);\n\n/**\n * Checks if node is link\n *\n * @param {Object} node\n * @returns {Boolean} is node link?\n */\nconst isLink = R.either(\n  R.propEq('type', LINK),\n  R.both(R.propEq('type', TEXT), hasSource),\n);\n\nexport default isLink;\n","import * as R from 'ramda';\n\nimport { NOTE } from '../constants';\n\n/**\n * Checks if node is note\n *\n * @param {Object} node\n * @returns {Boolean} is node note?\n */\nconst isNote = R.propEq('type', NOTE);\n\nexport default isNote;\n","import * as R from 'ramda';\n\nimport { IMAGE } from '../constants';\n\n/**\n * Checks if node is image\n *\n * @param {Object} node\n * @returns {Boolean} is node image?\n */\nconst isImage = R.propEq('type', IMAGE);\n\nexport default isImage;\n","import * as R from 'ramda';\n\nimport { CANVAS } from '../constants';\n\n/**\n * Checks if node is canvas\n *\n * @param {Object} node\n * @returns {Boolean} is node canvas?\n */\nconst isCanvas = R.propEq('type', CANVAS);\n\nexport default isCanvas;\n","import * as R from 'ramda';\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nconst clipNode = (ctx, node) => {\n  const { top, left, width, height } = node.box;\n\n  const {\n    borderTopLeftRadius = 0,\n    borderTopRightRadius = 0,\n    borderBottomRightRadius = 0,\n    borderBottomLeftRadius = 0,\n  } = node.style;\n\n  // Border top\n  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  const ctr = rtr * (1.0 - KAPPA);\n\n  ctx.moveTo(left + rtr, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(\n    left + width - ctr,\n    top,\n    left + width,\n    top + ctr,\n    left + width,\n    top + rtr,\n  );\n\n  // Border right\n  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  const cbr = rbr * (1.0 - KAPPA);\n\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - cbr,\n    left + width - cbr,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n\n  // Border bottom\n  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  const cbl = rbl * (1.0 - KAPPA);\n\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(\n    left + cbl,\n    top + height,\n    left,\n    top + height - cbl,\n    left,\n    top + height - rbl,\n  );\n\n  // Border left\n  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  const ctl = rtl * (1.0 - KAPPA);\n\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n\n  return node;\n};\n\nexport default R.curryN(2, clipNode);\n","import * as R from 'ramda';\n\nconst renderPath = ctx =>\n  R.tap(node => {\n    const d = R.path(['props', 'd'], node);\n    if (d) ctx.path(node.props.d);\n  });\n\nexport default renderPath;\n","import * as R from 'ramda';\n\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nconst getProp = (d, p, v) => R.pathOr(d, ['props', p], v);\n\nconst renderRect = ctx => node => {\n  const x = getProp(0, 'x', node);\n  const y = getProp(0, 'y', node);\n  const rx = getProp(0, 'rx', node);\n  const ry = getProp(0, 'ry', node);\n  const width = getProp(0, 'width', node);\n  const height = getProp(0, 'height', node);\n\n  if (!width || !height) return node;\n\n  if (rx && ry) {\n    const krx = rx * KAPPA;\n    const kry = ry * KAPPA;\n\n    ctx.moveTo(x + rx, y);\n    ctx.lineTo(x - rx + width, y);\n    ctx.bezierCurveTo(\n      x - rx + width + krx,\n      y,\n      x + width,\n      y + ry - kry,\n      x + width,\n      y + ry,\n    );\n    ctx.lineTo(x + width, y + height - ry);\n    ctx.bezierCurveTo(\n      x + width,\n      y + height - ry + kry,\n      x - rx + width + krx,\n      y + height,\n      x - rx + width,\n      y + height,\n    );\n    ctx.lineTo(x + rx, y + height);\n    ctx.bezierCurveTo(\n      x + rx - krx,\n      y + height,\n      x,\n      y + height - ry + kry,\n      x,\n      y + height - ry,\n    );\n    ctx.lineTo(x, y + ry);\n    ctx.bezierCurveTo(x, y + ry - kry, x + rx - krx, y, x + rx, y);\n  } else {\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + width, y);\n    ctx.lineTo(x + width, y + height);\n    ctx.lineTo(x, y + height);\n  }\n\n  ctx.closePath();\n\n  return node;\n};\n\nexport default renderRect;\n","import * as R from 'ramda';\n\nconst getProp = (p, v) => R.path(['props', p], v);\n\nconst renderLine = ctx => node => {\n  const x1 = getProp('x1', node);\n  const y1 = getProp('y1', node);\n  const x2 = getProp('x2', node);\n  const y2 = getProp('y2', node);\n\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n\n  return node;\n};\n\nexport default renderLine;\n","import * as R from 'ramda';\n\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nconst getProp = (p, v) => R.path(['props', p], v);\n\nexport const drawEllipse = (ctx, cx, cy, rx, ry) => {\n  const x = cx - rx;\n  const y = cy - ry;\n  const ox = rx * KAPPA;\n  const oy = ry * KAPPA;\n  const xe = x + rx * 2;\n  const ye = y + ry * 2;\n  const xm = x + rx;\n  const ym = y + ry;\n\n  ctx.moveTo(x, ym);\n  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  ctx.closePath();\n};\n\nconst renderEllipse = ctx =>\n  R.tap(node => {\n    const cx = getProp('cx', node);\n    const cy = getProp('cy', node);\n    const rx = getProp('rx', node);\n    const ry = getProp('ry', node);\n\n    drawEllipse(ctx, cx, cy, rx, ry);\n  });\n\nexport default renderEllipse;\n","import * as R from 'ramda';\n\nimport { drawEllipse } from './renderEllipse';\n\nconst getProp = (p, v) => R.path(['props', p], v);\n\nconst renderCircle = ctx =>\n  R.tap(node => {\n    const cx = getProp('cx', node);\n    const cy = getProp('cy', node);\n    const r = getProp('r', node);\n\n    drawEllipse(ctx, cx, cy, r, r);\n  });\n\nexport default renderCircle;\n","import * as R from 'ramda';\n\nimport runWidth from '@react-pdf/textkit/run/advanceWidth';\nimport lineWidth from '@react-pdf/textkit/attributedString/advanceWidth';\n\nconst renderRun = (ctx, run) => {\n  const runAdvanceWidth = runWidth(run);\n  const { font, fontSize, color, opacity } = run.attributes;\n\n  ctx.fillColor(color);\n  ctx.fillOpacity(opacity);\n\n  if (font.sbix || (font.COLR && font.CPAL)) {\n    ctx.save();\n    ctx.translate(0, -run.ascent);\n\n    for (let i = 0; i < run.glyphs.length; i++) {\n      const position = run.positions[i];\n      const glyph = run.glyphs[i];\n\n      ctx.save();\n      ctx.translate(position.xOffset, position.yOffset);\n\n      glyph.render(ctx, fontSize);\n\n      ctx.restore();\n      ctx.translate(position.xAdvance, position.yAdvance);\n    }\n\n    ctx.restore();\n  } else {\n    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);\n\n    try {\n      ctx._addGlyphs(run.glyphs, run.positions, 0, 0);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ctx.translate(runAdvanceWidth, 0);\n};\n\nconst renderSpan = (ctx, line, textAnchor) => {\n  ctx.save();\n\n  const x = R.pathOr(0, ['box', 'x'], line);\n  const y = R.pathOr(0, ['box', 'y'], line);\n  const width = lineWidth(line);\n\n  switch (textAnchor) {\n    case 'middle':\n      ctx.translate(x - width / 2, y);\n      break;\n    case 'end':\n      ctx.translate(x - width, y);\n      break;\n    default:\n      ctx.translate(x, y);\n      break;\n  }\n\n  for (const run of line.runs) {\n    renderRun(ctx, run);\n  }\n\n  ctx.restore();\n};\n\nconst renderSvgText = ctx => node => {\n  for (const span of node.children) {\n    renderSpan(ctx, span.lines[0], span.props.textAnchor);\n  }\n\n  return node;\n};\n\nexport default renderSvgText;\n","import * as R from 'ramda';\n\nconst isOdd = x => x % 2 !== 0;\n\nconst lengthIsOdd = R.o(isOdd, R.prop('length'));\n\nconst parsePoints = R.compose(\n  R.splitEvery(2),\n  R.map(parseFloat),\n  R.when(lengthIsOdd, R.slice(0, -1)),\n  R.split(/\\s+/),\n  R.replace(/(\\d)-(\\d)/g, '$1 -$2'),\n  R.replace(/,/g, ' '),\n  R.trim,\n);\n\nexport default parsePoints;\n","import * as R from 'ramda';\n\nimport parsePoints from '../svg/parsePoints';\n\nexport const drawPolyline = ctx => points => {\n  if (points.length > 0) {\n    ctx.moveTo(points[0][0], points[0][1]);\n    points.slice(1).forEach(p => ctx.lineTo(p[0], p[1]));\n  }\n};\n\nconst renderPolyline = ctx =>\n  R.tap(\n    R.compose(\n      drawPolyline(ctx),\n      parsePoints,\n      R.pathOr('', ['props', 'points']),\n    ),\n  );\n\nexport default renderPolyline;\n","import * as R from 'ramda';\n\nimport renderPolyline from './renderPolyline';\n\nconst closePath = ctx => R.tap(() => ctx.closePath());\n\nconst renderPolygon = ctx =>\n  R.compose(\n    closePath(ctx),\n    renderPolyline(ctx),\n  );\n\nexport default renderPolygon;\n","function printWarning(format, ...args) {\n  let argIndex = 0;\n  const message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n\n  if (typeof console !== 'undefined') {\n    console.error(message);\n  }\n\n  try {\n    throw new Error(message);\n  } catch (x) {}\n}\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\n\nconst warning = __DEV__\n  ? (condition, format, ...args) => {\n      if (format === undefined) {\n        throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n            'message argument',\n        );\n      }\n      if (!condition) {\n        printWarning(format, ...args);\n      }\n    }\n  : () => {};\n\nexport default warning;\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\nimport warning from '../utils/warning';\n\nconst drawImage = ctx => node => {\n  const { x, y } = node.props;\n  const { width, height, opacity } = node.style;\n  const paddingTop = node.box.paddingLeft || 0;\n  const paddingLeft = node.box.paddingLeft || 0;\n\n  if (node.image.data) {\n    if (width !== 0 && height !== 0) {\n      ctx\n        .fillOpacity(opacity || 1)\n        .image(node.image.data, x + paddingLeft, y + paddingTop, {\n          width,\n          height,\n        });\n    } else {\n      warning(\n        false,\n        `Image with src '${node.props.href}' skipped due to invalid dimensions`,\n      );\n    }\n  }\n\n  return node;\n};\n\nconst renderImage = (ctx, node) => {\n  R.compose(\n    restore(ctx),\n    drawImage(ctx),\n    save(ctx),\n  )(node);\n\n  return node;\n};\n\nexport default R.curryN(2, renderImage);\n","import * as R from 'ramda';\n\n// TODO: Implement using only matrices to support skew and even more operations than css.\n\nconst getRotation = transform => {\n  const match = /rotate\\((-?\\d+.?\\d+)(.+)\\)/g.exec(transform);\n\n  if (match && match[1] && match[2]) {\n    const value = match[1];\n    return match[2] === 'rad' ? (value * 180) / Math.PI : value;\n  }\n\n  return 0;\n};\n\nconst getTranslateX = transform => {\n  const matchX = /translateX\\((-?\\d+\\.?d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?d*).*(,|\\s)\\s*(-?\\d+\\.?d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 0;\n};\n\nconst getTranslateY = transform => {\n  const matchY = /translateY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?\\d*).*(,|\\s)\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[3]) return matchGeneric[3];\n\n  return 0;\n};\n\nconst getScaleX = transform => {\n  const matchX = /scaleX\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,?\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 1;\n};\n\nconst getScaleY = transform => {\n  const matchY = /scaleY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,?\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 1;\n};\n\nconst getMatrix = transform => {\n  const match = /matrix\\(([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)\\)/g.exec(\n    transform,\n  );\n  if (match) return match.slice(1, 7);\n  return null;\n};\n\nconst applySingleTransformation = (ctx, transform, origin) => {\n  if (/rotate/g.test(transform)) {\n    ctx.rotate(getRotation(transform), { origin });\n  } else if (/scaleX/g.test(transform)) {\n    ctx.scale(getScaleX(transform), 1, { origin });\n  } else if (/scaleY/g.test(transform)) {\n    ctx.scale(1, getScaleY(transform), { origin });\n  } else if (/scale/g.test(transform)) {\n    ctx.scale(getScaleX(transform), getScaleY(transform), {\n      origin,\n    });\n  } else if (/translateX/g.test(transform)) {\n    ctx.translate(getTranslateX(transform), 1, { origin });\n  } else if (/translateY/g.test(transform)) {\n    ctx.translate(1, getTranslateY(transform), { origin });\n  } else if (/translate/g.test(transform)) {\n    ctx.translate(getTranslateX(transform), getTranslateY(transform), {\n      origin,\n    });\n  } else if (/matrix/g.test(transform)) {\n    ctx.transform(...getMatrix(transform));\n  }\n};\n\nconst applyTransformations = (ctx, node) => {\n  if (!node.origin) return node;\n\n  let match;\n  const re = /[a-zA-Z]+\\([^)]+\\)/g;\n  const origin = [node.origin.left, node.origin.top];\n  const transform =\n    (node.style && node.style.transform) ||\n    (node.props && node.props.transform) ||\n    '';\n\n  while ((match = re.exec(transform)) != null) {\n    applySingleTransformation(ctx, match[0], origin);\n  }\n\n  return node;\n};\n\nexport default R.curryN(2, applyTransformations);\n","import * as R from 'ramda';\n\nimport { PATH } from '../constants';\n\n/**\n * Checks if node is path\n *\n * @param {Object} node\n * @returns {Boolean} is node path?\n */\nconst isPath = R.propEq('type', PATH);\n\nexport default isPath;\n","import * as R from 'ramda';\n\nimport { RECT } from '../constants';\n\n/**\n * Checks if node is rect\n *\n * @param {Object} node\n * @returns {Boolean} is node rect?\n */\nconst isRect = R.propEq('type', RECT);\n\nexport default isRect;\n","import * as R from 'ramda';\n\nimport { LINE } from '../constants';\n\n/**\n * Checks if node is line\n *\n * @param {Object} node\n * @returns {Boolean} is node line?\n */\nconst isLine = R.propEq('type', LINE);\n\nexport default isLine;\n","import * as R from 'ramda';\n\nimport { TSPAN } from '../constants';\n\n/**\n * Checks if node is tspan\n *\n * @param {Object} node\n * @returns {Boolean} is node tspan?\n */\nconst isTspan = R.propEq('type', TSPAN);\n\nexport default isTspan;\n","import * as R from 'ramda';\n\nimport { GROUP } from '../constants';\n\n/**\n * Checks if node is group\n *\n * @param {Object} node\n * @returns {Boolean} is node group?\n */\nconst isGroup = R.propEq('type', GROUP);\n\nexport default isGroup;\n","import * as R from 'ramda';\n\nimport { CIRCLE } from '../constants';\n\n/**\n * Checks if node is circle\n *\n * @param {Object} node\n * @returns {Boolean} is node circle?\n */\nconst isCircle = R.propEq('type', CIRCLE);\n\nexport default isCircle;\n","import * as R from 'ramda';\n\nimport { TEXT_INSTANCE } from '../constants';\n\n/**\n * Checks if node is text intance\n *\n * @param {Object} node\n * @returns {Boolean} is node text intance?\n */\nconst isTextInstance = R.propEq('type', TEXT_INSTANCE);\n\nexport default isTextInstance;\n","import * as R from 'ramda';\n\nconst renderGroup = () => R.identity;\n\nexport default renderGroup;\n","import * as R from 'ramda';\n\nimport { ELLIPSE } from '../constants';\n\n/**\n * Checks if node is ellipse\n *\n * @param {Object} node\n * @returns {Boolean} is node ellipse?\n */\nconst isEllipse = R.propEq('type', ELLIPSE);\n\nexport default isEllipse;\n","import * as R from 'ramda';\n\nimport { POLYGON } from '../constants';\n\n/**\n * Checks if node is polygon\n *\n * @param {Object} node\n * @returns {Boolean} is node polygon?\n */\nconst isPolygon = R.propEq('type', POLYGON);\n\nexport default isPolygon;\n","import * as R from 'ramda';\n\nimport { POLYLINE } from '../constants';\n\n/**\n * Checks if node is polyline\n *\n * @param {Object} node\n * @returns {Boolean} is node polyline?\n */\nconst isPolyline = R.propEq('type', POLYLINE);\n\nexport default isPolyline;\n","import arcToCurve from 'svg-arc-to-cubic-bezier';\n\n// From https://github.com/jkroso/normalize-svg-path/blob/master/index.js\n// Copied here because an import issue with 'svg-arc-to-cubic-bezier'\nconst normalizePath = path => {\n  const result = [];\n\n  let prev;\n  let bezierX = 0;\n  let bezierY = 0;\n  let startX = 0;\n  let startY = 0;\n  let quadX = null;\n  let quadY = null;\n  let x = 0;\n  let y = 0;\n\n  for (let i = 0, len = path.length; i < len; i++) {\n    let seg = path[i];\n    const command = seg[0];\n\n    switch (command) {\n      case 'M':\n        startX = seg[1];\n        startY = seg[2];\n        break;\n      case 'A':\n        const curves = arcToCurve({\n          px: x,\n          py: y,\n          cx: seg[6],\n          cy: seg[7],\n          rx: seg[1],\n          ry: seg[2],\n          xAxisRotation: seg[3],\n          largeArcFlag: seg[4],\n          sweepFlag: seg[5],\n        });\n\n        // null-curves\n        if (!curves.length) continue;\n\n        for (let j = 0, c; j < curves.length; j++) {\n          c = curves[j];\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y];\n          if (j < curves.length - 1) result.push(seg);\n        }\n\n        break;\n      case 'S':\n        // default control point\n        let cx = x;\n        let cy = y;\n        if (prev === 'C' || prev === 'S') {\n          cx += cx - bezierX; // reflect the previous command's control\n          cy += cy - bezierY; // point relative to the current point\n        }\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]];\n        break;\n      case 'T':\n        if (prev === 'Q' || prev === 'T') {\n          quadX = x * 2 - quadX; // as with 'S' reflect previous control point\n          quadY = y * 2 - quadY;\n        } else {\n          quadX = x;\n          quadY = y;\n        }\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2]);\n        break;\n      case 'Q':\n        quadX = seg[1];\n        quadY = seg[2];\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4]);\n        break;\n      case 'L':\n        seg = line(x, y, seg[1], seg[2]);\n        break;\n      case 'H':\n        seg = line(x, y, seg[1], y);\n        break;\n      case 'V':\n        seg = line(x, y, x, seg[1]);\n        break;\n      case 'Z':\n        seg = line(x, y, startX, startY);\n        break;\n      default:\n        break;\n    }\n\n    // update state\n    prev = command;\n    x = seg[seg.length - 2];\n    y = seg[seg.length - 1];\n    if (seg.length > 4) {\n      bezierX = seg[seg.length - 4];\n      bezierY = seg[seg.length - 3];\n    } else {\n      bezierX = x;\n      bezierY = y;\n    }\n    result.push(seg);\n  }\n\n  return result;\n};\n\nconst line = (x1, y1, x2, y2) => {\n  return ['C', x1, y1, x2, y2, x2, y2];\n};\n\nconst quadratic = (x1, y1, cx, cy, x2, y2) => {\n  return [\n    'C',\n    x1 / 3 + (2 / 3) * cx,\n    y1 / 3 + (2 / 3) * cy,\n    x2 / 3 + (2 / 3) * cx,\n    y2 / 3 + (2 / 3) * cy,\n    x2,\n    y2,\n  ];\n};\n\nexport default normalizePath;\n","import * as R from 'ramda';\nimport absPath from 'abs-svg-path';\nimport parsePath from 'parse-svg-path';\n\nimport isRect from '../node/isRect';\nimport isLine from '../node/isLine';\nimport isPath from '../node/isPath';\nimport isCircle from '../node/isCircle';\nimport isPolygon from '../node/isPolygon';\nimport isEllipse from '../node/isEllipse';\nimport isPolyline from '../node/isPolyline';\nimport normalizePath from '../svg/normalizePath';\nimport parsePoints from './parsePoints';\n\n// From https://github.com/dy/svg-path-bounds/blob/master/index.js\nconst getPathBoundingBox = node => {\n  const path = R.compose(\n    normalizePath,\n    absPath,\n    parsePath,\n    R.pathOr('', ['props', 'd']),\n  )(node);\n\n  if (!path.length) return [0, 0, 0, 0];\n\n  const bounds = [Infinity, Infinity, -Infinity, -Infinity];\n\n  for (let i = 0, l = path.length; i < l; i++) {\n    const points = path[i].slice(1);\n\n    for (let j = 0; j < points.length; j += 2) {\n      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0];\n      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1];\n      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0];\n      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1];\n    }\n  }\n\n  return bounds;\n};\n\nconst getCircleBoundingBox = node => {\n  const r = R.pathOr(0, ['props', 'r'], node);\n  const cx = R.pathOr(0, ['props', 'cx'], node);\n  const cy = R.pathOr(0, ['props', 'cy'], node);\n\n  return [cx - r, cy - r, cx + r, cy + r];\n};\n\nconst getEllipseBoundingBox = node => {\n  const cx = R.pathOr(0, ['props', 'cx'], node);\n  const cy = R.pathOr(0, ['props', 'cy'], node);\n  const rx = R.pathOr(0, ['props', 'rx'], node);\n  const ry = R.pathOr(0, ['props', 'ry'], node);\n\n  return [cx - rx, cy - ry, cx + rx, cy + ry];\n};\n\nconst getLineBoundingBox = node => {\n  const x1 = R.pathOr(0, ['props', 'x1'], node);\n  const y1 = R.pathOr(0, ['props', 'y1'], node);\n  const x2 = R.pathOr(0, ['props', 'x2'], node);\n  const y2 = R.pathOr(0, ['props', 'y2'], node);\n\n  return [R.min(x1, x2), R.min(y1, y2), R.max(x1, x2), R.max(y1, y2)];\n};\n\nconst getRectBoundingBox = node => {\n  const x = R.pathOr(0, ['props', 'x'], node);\n  const y = R.pathOr(0, ['props', 'y'], node);\n  const width = R.pathOr(0, ['props', 'width'], node);\n  const height = R.pathOr(0, ['props', 'height'], node);\n\n  return [x, y, x + width, y + height];\n};\n\nconst max = R.reduce(R.max, -Infinity);\nconst min = R.reduce(R.min, Infinity);\n\nconst getPolylineBoundingBox = node => {\n  const points = R.compose(\n    parsePoints,\n    R.pathOr([], ['props', 'points']),\n  )(node);\n\n  const xValues = R.pluck(0, points);\n  const yValues = R.pluck(1, points);\n\n  return [min(xValues), min(yValues), max(xValues), max(yValues)];\n};\n\nconst getBoundingBox = R.cond([\n  [isRect, getRectBoundingBox],\n  [isLine, getLineBoundingBox],\n  [isPath, getPathBoundingBox],\n  [isCircle, getCircleBoundingBox],\n  [isEllipse, getEllipseBoundingBox],\n  [isPolygon, getPolylineBoundingBox],\n  [isPolyline, getPolylineBoundingBox],\n  [R.T, R.always([0, 0, 0, 0])],\n]);\n\nexport default getBoundingBox;\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\nimport clipNode from './clipNode';\nimport renderPath from './renderPath';\nimport renderRect from './renderRect';\nimport renderLine from './renderLine';\nimport renderCircle from './renderCircle';\nimport renderSvgText from './renderSvgText';\nimport renderEllipse from './renderEllipse';\nimport renderPolygon from './renderPolygon';\nimport renderPolyline from './renderPolyline';\nimport renderSvgImage from './renderSvgImage';\nimport applyTransformations from './applyTransformations';\nimport isPath from '../node/isPath';\nimport isText from '../node/isText';\nimport isRect from '../node/isRect';\nimport isLine from '../node/isLine';\nimport isTspan from '../node/isTspan';\nimport isImage from '../node/isImage';\nimport isGroup from '../node/isGroup';\nimport isCircle from '../node/isCircle';\nimport isTextInstance from '../node/isTextInstance';\nimport renderGroup from './renderGroup';\nimport isEllipse from '../node/isEllipse';\nimport isPolygon from '../node/isPolygon';\nimport isPolyline from '../node/isPolyline';\nimport getBoundingBox from '../svg/getBoundingBox';\nimport { LINEAR_GRADIENT, RADIAL_GRADIENT } from '../constants';\n\nconst warnUnsupportedNode = R.tap(node => {\n  console.warn(`SVG node of type ${node.type} is not currenty supported`);\n});\n\nconst getProp = (d, p, v) => R.pathOr(d, ['props', p], v);\n\nconst setStrokeWidth = ctx => node => {\n  const lineWidth = getProp(0, 'strokeWidth', node);\n  if (lineWidth) ctx.lineWidth(lineWidth);\n  return node;\n};\n\nconst setStrokeColor = ctx => node => {\n  const strokeColor = getProp(null, 'stroke', node);\n  if (strokeColor) ctx.strokeColor(strokeColor);\n  return node;\n};\n\nconst setOpacity = ctx => node => {\n  const opacity = getProp(null, 'opacity', node);\n  if (opacity) ctx.opacity(opacity);\n  return node;\n};\n\nconst setFillOpacity = ctx => node => {\n  const fillOpacity = getProp(null, 'fillOpacity', node);\n  if (fillOpacity) ctx.fillOpacity(fillOpacity);\n  return node;\n};\n\nconst setStrokeOpacity = ctx => node => {\n  const strokeOpacity = getProp(null, 'strokeOpacity', node);\n  if (strokeOpacity) ctx.strokeOpacity(strokeOpacity);\n  return node;\n};\n\nconst setLineJoin = ctx => node => {\n  const lineJoin = getProp(null, 'strokeLinejoin', node);\n  if (lineJoin) ctx.lineJoin(lineJoin);\n  return node;\n};\n\nconst setLineCap = ctx => node => {\n  const lineCap = getProp(null, 'strokeLinecap', node);\n  if (lineCap) ctx.lineCap(lineCap);\n  return node;\n};\n\nconst setLineDash = ctx => node => {\n  const value = getProp(null, 'strokeDasharray', node);\n\n  if (value) {\n    const dashArray = R.compose(\n      R.map(R.o(parseFloat, R.trim)),\n      R.split(','),\n    )(value);\n\n    ctx.dash(dashArray[0], { space: dashArray[1] });\n  }\n  return node;\n};\n\nconst hasLinearGradientFill = R.pathEq(\n  ['props', 'fill', 'type'],\n  LINEAR_GRADIENT,\n);\n\nconst hasRadialGradientFill = R.pathEq(\n  ['props', 'fill', 'type'],\n  RADIAL_GRADIENT,\n);\n\n// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L104\nconst setLinearGradientFill = ctx =>\n  R.tap(node => {\n    const bbox = getBoundingBox(node);\n    const gradient = getProp(null, 'fill', node);\n\n    const x1 = R.pathOr(0, ['props', 'x1'], gradient);\n    const y1 = R.pathOr(0, ['props', 'y1'], gradient);\n    const x2 = R.pathOr(1, ['props', 'x2'], gradient);\n    const y2 = R.pathOr(0, ['props', 'y2'], gradient);\n\n    const m0 = bbox[2] - bbox[0];\n    const m3 = bbox[3] - bbox[1];\n    const m4 = bbox[0];\n    const m5 = bbox[1];\n\n    const gx1 = m0 * x1 + m4;\n    const gy1 = m3 * y1 + m5;\n    const gx2 = m0 * x2 + m4;\n    const gy2 = m3 * y2 + m5;\n\n    const grad = ctx.linearGradient(gx1, gy1, gx2, gy2);\n\n    gradient.children.forEach(stop => {\n      grad.stop(\n        stop.props.offset,\n        stop.props.stopColor,\n        stop.props.stopOpacity,\n      );\n    });\n\n    ctx.fill(grad);\n  });\n\n// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L155\nconst setRadialGradientFill = ctx =>\n  R.tap(node => {\n    const bbox = getBoundingBox(node);\n    const gradient = getProp(null, 'fill', node);\n\n    const cx = R.pathOr(0.5, ['props', 'cx'], gradient);\n    const cy = R.pathOr(0.5, ['props', 'cy'], gradient);\n    const fx = R.pathOr(cx, ['props', 'fx'], gradient);\n    const fy = R.pathOr(cy, ['props', 'fy'], gradient);\n    const r = R.pathOr(0.5, ['props', 'r'], gradient);\n\n    const m0 = bbox[2] - bbox[0];\n    const m3 = bbox[3] - bbox[1];\n    const m4 = bbox[0];\n    const m5 = bbox[1];\n\n    const gr = r * m0;\n    const gcx = m0 * cx + m4;\n    const gcy = m3 * cy + m5;\n    const gfx = m0 * fx + m4;\n    const gfy = m3 * fy + m5;\n\n    const grad = ctx.radialGradient(gfx, gfy, 0, gcx, gcy, gr);\n\n    gradient.children.forEach(stop => {\n      grad.stop(\n        stop.props.offset,\n        stop.props.stopColor,\n        stop.props.stopOpacity,\n      );\n    });\n\n    ctx.fill(grad);\n  });\n\nconst setFillColor = ctx =>\n  R.tap(node => {\n    const fillColor = getProp(null, 'fill', node);\n    if (fillColor) ctx.fillColor(fillColor);\n  });\n\nconst setFill = ctx =>\n  R.cond([\n    [hasLinearGradientFill, setLinearGradientFill(ctx)],\n    [hasRadialGradientFill, setRadialGradientFill(ctx)],\n    [R.T, setFillColor(ctx)],\n  ]);\n\nconst draw = ctx => node => {\n  const props = R.propOr({}, 'props', node);\n\n  if (props.fill && props.stroke) {\n    ctx.fillAndStroke(props.fillRule);\n  } else if (props.fill) {\n    ctx.fill(props.fillRule);\n  } else if (props.stroke) {\n    ctx.stroke();\n  } else {\n    ctx.save();\n    ctx.opacity(0);\n    ctx.fill(null);\n    ctx.restore();\n  }\n\n  return node;\n};\n\nconst renderNode = ctx =>\n  R.cond([\n    [isTspan, R.identity],\n    [isTextInstance, R.identity],\n    [isPath, renderPath(ctx)],\n    [isRect, renderRect(ctx)],\n    [isLine, renderLine(ctx)],\n    [isGroup, renderGroup(ctx)],\n    [isText, renderSvgText(ctx)],\n    [isCircle, renderCircle(ctx)],\n    [isImage, renderSvgImage(ctx)],\n    [isEllipse, renderEllipse(ctx)],\n    [isPolygon, renderPolygon(ctx)],\n    [isPolyline, renderPolyline(ctx)],\n    [R.T, warnUnsupportedNode],\n  ]);\n\nconst drawNode = ctx =>\n  R.compose(\n    draw(ctx),\n    renderNode(ctx),\n    applyTransformations(ctx),\n    setOpacity(ctx),\n    setFillOpacity(ctx),\n    setStrokeOpacity(ctx),\n    setFill(ctx),\n    setStrokeColor(ctx),\n    setStrokeWidth(ctx),\n    setLineJoin(ctx),\n    setLineDash(ctx),\n    setLineCap(ctx),\n  );\n\nconst clipPath = ctx => node => {\n  const value = R.path(['props', 'clipPath'], node);\n\n  if (value) {\n    R.compose(\n      () => ctx.clip(),\n      R.forEach(renderNode(ctx)),\n      R.propOr([], 'children'),\n    )(value);\n  }\n\n  return node;\n};\n\nconst drawChildren = ctx => node =>\n  R.compose(\n    R.map(\n      R.compose(\n        restore(ctx),\n        drawChildren(ctx),\n        drawNode(ctx),\n        clipPath(ctx),\n        save(ctx),\n      ),\n    ),\n    R.propOr([], 'children'),\n  )(node);\n\nconst defaultsZero = R.pathOr(0);\n\nconst preserveAspectRatio = ctx => node => {\n  const { width, height } = node.box;\n  const { viewBox, preserveAspectRatio = {} } = node.props;\n  const { meetOrSlice = 'meet', align = 'xMidYMid' } = preserveAspectRatio;\n\n  if (viewBox == null || width == null || height == null) return node;\n\n  const x = viewBox ? viewBox.minX : 0;\n  const y = viewBox ? viewBox.minY : 0;\n  const logicalWidth = viewBox ? viewBox.maxX : width;\n  const logicalHeight = viewBox ? viewBox.maxY : height;\n\n  const logicalRatio = logicalWidth / logicalHeight;\n  const physicalRatio = width / height;\n  const scaleX = width / logicalWidth;\n  const scaleY = height / logicalHeight;\n\n  if (align === 'none') {\n    ctx.scale(scaleX, scaleY);\n    ctx.translate(-x, -y);\n    return node;\n  }\n\n  if (\n    (logicalRatio < physicalRatio && meetOrSlice === 'meet') ||\n    (logicalRatio >= physicalRatio && meetOrSlice === 'slice')\n  ) {\n    ctx.scale(scaleY, scaleY);\n\n    switch (align) {\n      case 'xMinYMin':\n      case 'xMinYMid':\n      case 'xMinYMax':\n        ctx.translate(-x, -y);\n        break;\n\n      case 'xMidYMin':\n      case 'xMidYMid':\n      case 'xMidYMax':\n        ctx.translate(\n          -x - (logicalWidth - (width * logicalHeight) / height) / 2,\n          -y,\n        );\n        break;\n\n      default:\n        ctx.translate(\n          -x - (logicalWidth - (width * logicalHeight) / height),\n          -y,\n        );\n    }\n  } else {\n    ctx.scale(scaleX, scaleX);\n\n    switch (align) {\n      case 'xMinYMin':\n      case 'xMidYMin':\n      case 'xMaxYMin':\n        ctx.translate(-x, -y);\n        break;\n\n      case 'xMinYMid':\n      case 'xMidYMid':\n      case 'xMaxYMid':\n        ctx.translate(\n          -x,\n          -y - (logicalHeight - (height * logicalWidth) / width) / 2,\n        );\n        break;\n\n      default:\n        ctx.translate(\n          -x,\n          -y - (logicalHeight - (height * logicalWidth) / width),\n        );\n    }\n  }\n\n  return node;\n};\n\nconst moveToOrigin = ctx => node => {\n  const { top, left } = node.box;\n\n  const paddingLeft = defaultsZero('paddingLeft', node.box);\n  const paddingTop = defaultsZero('paddingTop', node.box);\n\n  ctx.translate(left + paddingLeft, top + paddingTop);\n\n  return node;\n};\n\nconst renderSvg = (ctx, node) => {\n  R.compose(\n    restore(ctx),\n    drawChildren(ctx),\n    preserveAspectRatio(ctx),\n    moveToOrigin(ctx),\n    clipNode(ctx),\n    save(ctx),\n  )(node);\n\n  return node;\n};\n\nexport default R.curryN(2, renderSvg);\n","import * as R from 'ramda';\nimport PDFRenderer from '@react-pdf/textkit/renderers/pdf';\n\nconst renderText = (ctx, node) => {\n  const { top, left } = node.box;\n  const paddingTop = R.pathOr(0, ['box', 'paddingTop'], node);\n  const paddingLeft = R.pathOr(0, ['box', 'paddingLeft'], node);\n  const initialY = node.lines[0] ? node.lines[0].box.y : 0;\n\n  ctx.save();\n  ctx.translate(left + paddingLeft, top + paddingTop - initialY);\n\n  PDFRenderer.render(ctx, [node.lines]);\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderText);\n","import * as R from 'ramda';\n\nconst renderPage = (ctx, node) => {\n  const { width, height } = node.box;\n\n  ctx.addPage({ size: [width, height], margin: 0 });\n\n  return node;\n};\n\nexport default R.curryN(2, renderPage);\n","import * as R from 'ramda';\n\nconst renderNote = (ctx, node) => {\n  const { top, left } = node.box;\n  const value = node.children[0] ? node.children[0].value : '';\n\n  ctx.note(left, top, 0, 0, value);\n\n  return node;\n};\n\nexport default R.curryN(2, renderNote);\n","const isPercent = value => /((-)?\\d+\\.?\\d*)%/g.exec(value);\n\n/**\n * Get percentage value of input\n *\n * @param {String} value\n * @returns {Object} percent value (if matches)\n */\nconst matchPercent = value => {\n  const match = isPercent(value);\n\n  if (match) {\n    const value = parseFloat(match[1], 10);\n    const percent = value / 100;\n\n    return {\n      value,\n      percent,\n      absValue: Math.abs(value),\n      absPercent: Math.abs(percent),\n    };\n  }\n\n  return null;\n};\n\nexport default matchPercent;\n","import matchPercent from '../utils/matchPercent';\n\nconst isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nconst applyContainObjectFit = (cw, ch, iw, ih, px, py) => {\n  const cr = cw / ch;\n  const ir = iw / ih;\n\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n\n  if (cr > ir) {\n    const height = ch;\n    const width = height * ir;\n    const yOffset = isNumeric(py) ? py : 0;\n    const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n\n    return { width, height, xOffset, yOffset };\n  } else {\n    const width = cw;\n    const height = width / ir;\n    const xOffset = isNumeric(px) ? px : 0;\n    const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n\n    return { width, height, yOffset, xOffset };\n  }\n};\n\nconst applyNoneObjectFit = (cw, ch, iw, ih, px, py) => {\n  const width = iw;\n  const height = ih;\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n  const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n  const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n\n  return { width, height, xOffset, yOffset };\n};\n\nconst applyCoverObjectFit = (cw, ch, iw, ih, px, py) => {\n  const ir = iw / ih;\n  const cr = cw / ch;\n\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n\n  if (cr > ir) {\n    const width = cw;\n    const height = width / ir;\n    const xOffset = isNumeric(px) ? px : 0;\n    const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n    return { width, height, yOffset, xOffset };\n  } else {\n    const height = ch;\n    const width = height * ir;\n    const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n    const yOffset = isNumeric(py) ? py : 0;\n    return { width, height, xOffset, yOffset };\n  }\n};\n\nconst applyScaleDownObjectFit = (cw, ch, iw, ih, px, py) => {\n  const containDimension = applyContainObjectFit(cw, ch, iw, ih, px, py);\n  const noneDimension = applyNoneObjectFit(cw, ch, iw, ih, px, py);\n\n  return containDimension.width < noneDimension.width\n    ? containDimension\n    : noneDimension;\n};\n\nconst applyFillObjectFit = (cw, ch, px, py) => {\n  return {\n    width: cw,\n    height: ch,\n    xOffset: matchPercent(px) ? 0 : px || 0,\n    yOffset: matchPercent(py) ? 0 : py || 0,\n  };\n};\n\nconst resolveObjectFit = (type = 'fill', cw, ch, iw, ih, px, py) => {\n  switch (type) {\n    case 'contain':\n      return applyContainObjectFit(cw, ch, iw, ih, px, py);\n    case 'cover':\n      return applyCoverObjectFit(cw, ch, iw, ih, px, py);\n    case 'none':\n      return applyNoneObjectFit(cw, ch, iw, ih, px, py);\n    case 'scale-down':\n      return applyScaleDownObjectFit(cw, ch, iw, ih, px, py);\n    default:\n      return applyFillObjectFit(cw, ch, px, py);\n  }\n};\n\nexport default resolveObjectFit;\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\nimport clipNode from './clipNode';\nimport warning from '../utils/warning';\nimport resolveObjectFit from '../image/resolveObjectFit';\n\nconst drawImage = ctx => node => {\n  const { left, top } = node.box;\n  const { opacity, objectPositionX, objectPositionY } = node.style;\n  const paddingTop = node.box.paddingLeft || 0;\n  const paddingRight = node.box.paddingRight || 0;\n  const paddingBottom = node.box.paddingBottom || 0;\n  const paddingLeft = node.box.paddingLeft || 0;\n\n  const { width, height, xOffset, yOffset } = resolveObjectFit(\n    node.style.objectFit,\n    node.box.width - paddingLeft - paddingRight,\n    node.box.height - paddingTop - paddingBottom,\n    node.image.width,\n    node.image.height,\n    objectPositionX,\n    objectPositionY,\n  );\n\n  if (node.image.data) {\n    if (width !== 0 && height !== 0) {\n      ctx\n        .fillOpacity(opacity || 1)\n        .image(\n          node.image.data,\n          left + paddingLeft + xOffset,\n          top + paddingTop + yOffset,\n          {\n            width,\n            height,\n          },\n        );\n    } else {\n      warning(\n        false,\n        `Image with src '${node.props.src}' skipped due to invalid dimensions`,\n      );\n    }\n  }\n\n  return node;\n};\n\nconst renderImage = (ctx, node) => {\n  R.compose(\n    restore(ctx),\n    drawImage(ctx),\n    clipNode(ctx),\n    save(ctx),\n  )(node);\n\n  return node;\n};\n\nexport default R.curryN(2, renderImage);\n","export const availableMethods = [\n  'dash',\n  'clip',\n  'save',\n  'path',\n  'fill',\n  'font',\n  'text',\n  'rect',\n  'scale',\n  'moveTo',\n  'lineTo',\n  'stroke',\n  'rotate',\n  'circle',\n  'lineCap',\n  'opacity',\n  'ellipse',\n  'polygon',\n  'restore',\n  'lineJoin',\n  'fontSize',\n  'fillColor',\n  'lineWidth',\n  'translate',\n  'miterLimit',\n  'strokeColor',\n  'fillOpacity',\n  'roundedRect',\n  'strokeOpacity',\n  'bezierCurveTo',\n  'quadraticCurveTo',\n  'linearGradient',\n  'radialGradient',\n];\n\nconst painter = function(ctx) {\n  const p = availableMethods.reduce(\n    (acc, prop) => ({\n      ...acc,\n      [prop]: (...args) => {\n        ctx[prop](...args);\n        return p;\n      },\n    }),\n    {},\n  );\n\n  return p;\n};\n\nexport default painter;\n","import * as R from 'ramda';\n\nimport painter from '../canvas/painter';\nimport warning from '../utils/warning';\n\nconst defaultsZero = R.pathOr(0);\n\nconst renderCanvas = (ctx, node) => {\n  const { top, left, width, height } = node.box;\n\n  const paddingLeft = defaultsZero('paddingLeft', node.box);\n  const paddingRight = defaultsZero('paddingRight', node.box);\n  const paddingTop = defaultsZero('paddingTop', node.box);\n  const paddingBottom = defaultsZero('paddingBottom', node.box);\n\n  const availableWidth = width - paddingLeft - paddingRight;\n  const availableHeight = height - paddingTop - paddingBottom;\n\n  warning(\n    availableWidth && availableHeight,\n    'Canvas element has null width or height. Please provide valid values via the `style` prop in order to correctly render it.',\n  );\n\n  ctx.save().translate(left + paddingLeft, top + paddingTop);\n\n  if (node.props.paint) {\n    node.props.paint(painter(ctx), availableWidth, availableHeight);\n  }\n\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderCanvas);\n","import * as R from 'ramda';\n\n/**\n * Checks if page should render vertical ruler\n *\n * @param {Object} page\n * @returns {boolean} has vertical ruler\n */\nconst hasVerticalRuler = R.either(\n  R.hasPath(['props', 'ruler']),\n  R.hasPath(['props', 'verticalRuler']),\n);\n\nexport default hasVerticalRuler;\n","import * as R from 'ramda';\n\n/**\n * Checks if page should render horizontal ruler\n *\n * @param {Object} page\n * @returns {boolean} has horizontal ruler\n */\nconst hasHorizontalRuler = R.either(\n  R.hasPath(['props', 'ruler']),\n  R.hasPath(['props', 'horizontalRuler']),\n);\n\nexport default hasHorizontalRuler;\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\nimport hasVerticalRuler from '../node/hasVerticalRuler';\nimport hasHorizontalRuler from '../node/hasHorizontalRuler';\nimport {\n  RULER_WIDTH,\n  RULER_COLOR,\n  LINE_COLOR,\n  GRID_COLOR,\n  LINE_WIDTH,\n  RULER_FONT_SIZE,\n  DEFAULT_RULER_STEPS,\n} from '../constants';\n\nconst range = (max, steps) =>\n  Array.from({ length: Math.ceil(max / steps) }, (_, i) => i * steps);\n\nconst matchPercentage = value => {\n  const match = matchPercent(value);\n  return match ? 100 / match.value : null;\n};\n\nconst getVerticalSteps = page => {\n  const value =\n    page.props.horizontalRulerSteps ||\n    page.props.rulerSteps ||\n    DEFAULT_RULER_STEPS;\n\n  if (typeof value === 'string') {\n    const percentage = matchPercentage(value);\n    if (percentage) {\n      const width = page.box.width - (hasVerticalRuler(page) ? RULER_WIDTH : 0);\n      return width / percentage;\n    }\n    throw new Error('Page: Invalid horizontal steps value');\n  }\n\n  return value;\n};\n\nconst getHorizontalSteps = page => {\n  const value =\n    page.props.verticalRulerSteps ||\n    page.props.rulerSteps ||\n    DEFAULT_RULER_STEPS;\n\n  if (typeof value === 'string') {\n    const percentage = matchPercentage(value);\n    if (percentage) {\n      const height =\n        page.box.height - (hasVerticalRuler(page) ? RULER_WIDTH : 0);\n      return height / percentage;\n    }\n    throw new Error('Page: Invalid horizontal steps value');\n  }\n\n  return value;\n};\n\nconst renderVerticalRuler = ctx => page => {\n  const width = page.box.width;\n  const height = page.box.height;\n  const offset = hasHorizontalRuler(page) ? RULER_WIDTH : 0;\n  const hRange = range(width, getVerticalSteps(page));\n\n  ctx\n    .rect(offset, 0, width, RULER_WIDTH)\n    .fill(RULER_COLOR)\n    .moveTo(offset, RULER_WIDTH)\n    .lineTo(width, RULER_WIDTH)\n    .stroke(LINE_COLOR);\n\n  hRange.map(step => {\n    ctx\n      .moveTo(offset + step, 0)\n      .lineTo(offset + step, RULER_WIDTH)\n      .stroke(LINE_COLOR)\n      .fillColor('black')\n      .text(`${Math.round(step)}`, offset + step + 1, 1);\n\n    if (step !== 0) {\n      ctx\n        .moveTo(offset + step, RULER_WIDTH)\n        .lineTo(offset + step, height)\n        .stroke(GRID_COLOR);\n    }\n  });\n\n  return page;\n};\n\nconst renderHorizontalRuler = ctx => page => {\n  const width = page.box.width;\n  const height = page.box.height;\n  const offset = hasVerticalRuler(page) ? RULER_WIDTH : 0;\n  const hRange = range(height, getHorizontalSteps(page));\n\n  ctx\n    .rect(0, offset, RULER_WIDTH, height)\n    .fill(RULER_COLOR)\n    .moveTo(RULER_WIDTH, hasHorizontalRuler(page) ? RULER_WIDTH : 0)\n    .lineTo(RULER_WIDTH, height)\n    .stroke(LINE_COLOR);\n\n  hRange.map(step => {\n    ctx\n      .moveTo(0, offset + step)\n      .lineTo(RULER_WIDTH, offset + step)\n      .stroke(LINE_COLOR)\n      .fillColor('black')\n      .text(`${Math.round(step)}`, 1, offset + step + 1);\n\n    if (step !== 0) {\n      ctx\n        .moveTo(RULER_WIDTH, offset + step)\n        .lineTo(width, offset + step)\n        .stroke(GRID_COLOR);\n    }\n  });\n\n  return page;\n};\n\nconst renderRulers = (ctx, page) => {\n  ctx\n    .save()\n    .lineWidth(LINE_WIDTH)\n    .fontSize(RULER_FONT_SIZE)\n    .opacity(1);\n\n  R.compose(\n    R.when(hasVerticalRuler, renderVerticalRuler(ctx)),\n    R.when(hasHorizontalRuler, renderHorizontalRuler(ctx)),\n  )(page);\n\n  ctx.restore();\n\n  return page;\n};\n\nexport default R.curryN(2, renderRulers);\n","import * as R from 'ramda';\n\nconst getDocumentProp = target => (or, prop) =>\n  R.pathOr(or, ['props', prop], target);\n\nconst setPDFMetadata = target => (key, value) => {\n  if (value) target.info[key] = value;\n};\n\n/**\n * Set document instance metadata\n *\n * @param {Object} ctx document instance\n * @param {Object} doc document root\n */\nconst addMetadata = (ctx, doc) => {\n  const getProp = getDocumentProp(doc);\n  const setProp = setPDFMetadata(ctx);\n\n  const title = getProp(null, 'title');\n  const author = getProp(null, 'author');\n  const subject = getProp(null, 'subject');\n  const keywords = getProp(null, 'keywords');\n  const creator = getProp('react-pdf', 'creator');\n  const producer = getProp('react-pdf', 'producer');\n\n  setProp('Title', title);\n  setProp('Author', author);\n  setProp('Subject', subject);\n  setProp('Keywords', keywords);\n  setProp('Creator', creator);\n  setProp('Producer', producer);\n\n  return doc;\n};\n\nexport default R.curryN(2, addMetadata);\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\n\nconst CONTENT_COLOR = '#a1c6e7';\nconst PADDING_COLOR = '#c4deb9';\nconst MARGIN_COLOR = '#f8cca1';\n\nconst shouldDebug = R.pathEq(['props', 'debug'], true);\n\n// TODO: Draw debug boxes using clipping to enhance quality\n\nconst debugContent = ctx =>\n  R.tap(node => {\n    const {\n      left,\n      top,\n      width,\n      height,\n      paddingLeft,\n      paddingTop,\n      paddingRight,\n      paddingBottom,\n      borderLeftWidth,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n    } = node.box;\n\n    ctx\n      .fillColor(CONTENT_COLOR)\n      .opacity(0.5)\n      .rect(\n        left + paddingLeft + borderLeftWidth,\n        top + paddingTop + borderTopWidth,\n        width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth,\n        height -\n          paddingTop -\n          paddingBottom -\n          borderTopWidth -\n          borderBottomWidth,\n      )\n      .fill();\n  });\n\nconst debugPadding = ctx =>\n  R.tap(node => {\n    const {\n      left,\n      top,\n      width,\n      height,\n      paddingLeft,\n      paddingTop,\n      paddingRight,\n      paddingBottom,\n      borderLeftWidth,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n    } = node.box;\n\n    ctx.fillColor(PADDING_COLOR).opacity(0.5);\n\n    // Padding top\n    ctx\n      .rect(\n        left + paddingLeft + borderLeftWidth,\n        top + borderTopWidth,\n        width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth,\n        paddingTop,\n      )\n      .fill();\n\n    // Padding left\n    ctx\n      .rect(\n        left + borderLeftWidth,\n        top + borderTopWidth,\n        paddingLeft,\n        height - borderTopWidth - borderBottomWidth,\n      )\n      .fill();\n\n    // Padding right\n    ctx\n      .rect(\n        left + width - paddingRight - borderRightWidth,\n        top + borderTopWidth,\n        paddingRight,\n        height - borderTopWidth - borderBottomWidth,\n      )\n      .fill();\n\n    // Padding bottom\n    ctx\n      .rect(\n        left + paddingLeft + borderLeftWidth,\n        top + height - paddingBottom - borderBottomWidth,\n        width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth,\n        paddingBottom,\n      )\n      .fill();\n  });\n\nconst debugMargin = ctx =>\n  R.tap(node => {\n    const {\n      left,\n      top,\n      width,\n      height,\n      marginLeft,\n      marginTop,\n      marginRight,\n      marginBottom,\n    } = node.box;\n    ctx.fillColor(MARGIN_COLOR).opacity(0.5);\n\n    // Margin top\n    ctx.rect(left, top - marginTop, width, marginTop).fill();\n\n    // Margin left\n    ctx\n      .rect(\n        left - marginLeft,\n        top - marginTop,\n        marginLeft,\n        height + marginTop + marginBottom,\n      )\n      .fill();\n\n    // Margin right\n    ctx\n      .rect(\n        left + width,\n        top - marginTop,\n        marginRight,\n        height + marginTop + marginBottom,\n      )\n      .fill();\n\n    // Margin bottom\n    ctx.rect(left, top + height, width, marginBottom).fill();\n  });\n\nconst debugText = ctx =>\n  R.tap(node => {\n    const {\n      left,\n      top,\n      width,\n      height,\n      marginLeft,\n      marginTop,\n      marginRight,\n      marginBottom,\n    } = node.box;\n\n    const roundedWidth = Math.round(width + marginLeft + marginRight);\n    const roundedHeight = Math.round(height + marginTop + marginBottom);\n\n    ctx\n      .fontSize(4)\n      .opacity(1)\n      .fillColor('black')\n      .text(\n        `${roundedWidth} x ${roundedHeight}`,\n        left - marginLeft,\n        Math.max(top - marginTop - 4, 1),\n      );\n  });\n\nconst debugOrigin = ctx =>\n  R.tap(node => {\n    if (node.origin) {\n      ctx\n        .circle(node.origin.left, node.origin.top, 3)\n        .fill('red')\n        .circle(node.origin.left, node.origin.top, 5)\n        .stroke('red');\n    }\n  });\n\nconst renderDebug = ctx =>\n  R.tap(\n    R.when(\n      shouldDebug,\n      R.compose(\n        restore(ctx),\n        debugOrigin(ctx),\n        debugText(ctx),\n        debugMargin(ctx),\n        debugPadding(ctx),\n        debugContent(ctx),\n        save(ctx),\n      ),\n    ),\n  );\n\nexport default renderDebug;\n","import * as R from 'ramda';\n\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nconst clipBorderTop = (ctx, layout, style, rtr, rtl) => {\n  const { top, left, width, height } = layout;\n  const { borderTopWidth, borderRightWidth, borderLeftWidth } = style;\n\n  // Clip outer top border edge\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n\n  // Ellipse coefficients outer top right cap\n  const c0 = rtr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + width - c0,\n    top,\n    left + width,\n    top + c0,\n    left + width,\n    top + rtr,\n  );\n\n  // Move down in case the margin exceedes the radius\n  const topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord);\n\n  // Clip inner top right cap\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord);\n\n  // Ellipse coefficients inner top right cap\n  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  const c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  const c2 = innerTopRightRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth,\n    top + borderTopWidth + c2,\n    left + width - borderRightWidth - c1,\n    top + borderTopWidth,\n    left + width - borderRightWidth - innerTopRightRadiusX,\n    top + borderTopWidth,\n  );\n\n  // Clip inner top border edge\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  const c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  const c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  const topLeftYCoord = top + Math.max(borderTopWidth, rtl);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth + c3,\n    top + borderTopWidth,\n    left + borderLeftWidth,\n    top + borderTopWidth + c4,\n    left + borderLeftWidth,\n    topLeftYCoord,\n  );\n  ctx.lineTo(left, topLeftYCoord);\n\n  // Move down in case the margin exceedes the radius\n  ctx.lineTo(left, top + rtl);\n\n  // Ellipse coefficients outer top left cap\n  const c5 = rtl * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border top cap joins\n  if (borderRightWidth) {\n    const trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    const trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderTop = (ctx, layout, style, rtr, rtl) => {\n  const { top, left, width } = layout;\n  const {\n    borderTopColor,\n    borderTopWidth,\n    borderTopStyle,\n    borderRightWidth,\n    borderLeftWidth,\n  } = style;\n\n  const c0 = rtl * (1.0 - KAPPA);\n  const c1 = rtr * (1.0 - KAPPA);\n\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(\n    left + width - c1,\n    top,\n    left + width,\n    top + c1,\n    left + width,\n    top + rtr,\n  );\n\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(\n    Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2,\n  );\n\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, { space: borderTopWidth * 1.2 });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, { space: borderTopWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst clipBorderRight = (ctx, layout, style, rtr, rbr) => {\n  const { top, left, width, height } = layout;\n  const { borderTopWidth, borderRightWidth, borderBottomWidth } = style;\n\n  // Clip outer right border edge\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n\n  // Ellipse coefficients outer bottom right cap\n  const c0 = rbr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c0,\n    left + width - c0,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n\n  // Move left in case the margin exceedes the radius\n  const topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height);\n\n  // Clip inner bottom right cap\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth);\n\n  // Ellipse coefficients inner bottom right cap\n  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  const c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  const c2 = innerBottomRightRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth - c1,\n    top + height - borderBottomWidth,\n    left + width - borderRightWidth,\n    top + height - borderBottomWidth - c2,\n    left + width - borderRightWidth,\n    top + height - Math.max(rbr, borderBottomWidth),\n  );\n\n  // Clip inner right border edge\n  ctx.lineTo(\n    left + width - borderRightWidth,\n    top + Math.max(rtr, borderTopWidth),\n  );\n\n  // Ellipse coefficients inner top right cap\n  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  const c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  const c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  const topRightXCoord = left + width - Math.max(rtr, borderRightWidth);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth,\n    top + borderTopWidth + c4,\n    left + width - borderRightWidth - c3,\n    top + borderTopWidth,\n    topRightXCoord,\n    top + borderTopWidth,\n  );\n  ctx.lineTo(topRightXCoord, top);\n\n  // Move right in case the margin exceedes the radius\n  ctx.lineTo(left + width - rtr, top);\n\n  // Ellipse coefficients outer top right cap\n  const c5 = rtr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + width - c5,\n    top,\n    left + width,\n    top + c5,\n    left + width,\n    top + rtr,\n  );\n\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border right cap joins\n  if (borderTopWidth) {\n    const trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    const brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderRight = (ctx, layout, style, rtr, rbr) => {\n  const { top, left, width, height } = layout;\n  const {\n    borderRightColor,\n    borderRightStyle,\n    borderRightWidth,\n    borderTopWidth,\n    borderBottomWidth,\n  } = style;\n\n  const c0 = rbr * (1.0 - KAPPA);\n  const c1 = rtr * (1.0 - KAPPA);\n\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(\n    left + width - c1,\n    top,\n    left + width,\n    top + c1,\n    left + width,\n    top + rtr,\n  );\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c0,\n    left + width - c0,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(\n    Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2,\n  );\n\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, { space: borderRightWidth * 1.2 });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, { space: borderRightWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst clipBorderBottom = (ctx, layout, style, rbl, rbr) => {\n  const { top, left, width, height } = layout;\n  const { borderBottomWidth, borderRightWidth, borderLeftWidth } = style;\n\n  // Clip outer top border edge\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n\n  // Ellipse coefficients outer top right cap\n  const c0 = rbl * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + c0,\n    top + height,\n    left,\n    top + height - c0,\n    left,\n    top + height - rbl,\n  );\n\n  // Move up in case the margin exceedes the radius\n  const bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord);\n\n  // Clip inner bottom left cap\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord);\n\n  // Ellipse coefficients inner top right cap\n  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  const c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  const c2 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n\n  // Clip inner bottom left cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth,\n    top + height - borderBottomWidth - c2,\n    left + borderLeftWidth + c1,\n    top + height - borderBottomWidth,\n    left + borderLeftWidth + innerBottomLeftRadiusX,\n    top + height - borderBottomWidth,\n  );\n\n  // Clip inner bottom border edge\n  ctx.lineTo(\n    left + width - Math.max(rbr, borderRightWidth),\n    top + height - borderBottomWidth,\n  );\n\n  // Ellipse coefficients inner top left cap\n  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  const c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  const c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  const bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth - c3,\n    top + height - borderBottomWidth,\n    left + width - borderRightWidth,\n    top + height - borderBottomWidth - c4,\n    left + width - borderRightWidth,\n    bottomRightYCoord,\n  );\n  ctx.lineTo(left + width, bottomRightYCoord);\n\n  // Move down in case the margin exceedes the radius\n  ctx.lineTo(left + width, top + height - rbr);\n\n  // Ellipse coefficients outer top left cap\n  const c5 = rbr * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c5,\n    left + width - c5,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border bottom cap joins\n  if (borderRightWidth) {\n    const brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    const trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderBottom = (ctx, layout, style, rbl, rbr) => {\n  const { top, left, width, height } = layout;\n  const {\n    borderBottomColor,\n    borderBottomStyle,\n    borderBottomWidth,\n    borderRightWidth,\n    borderLeftWidth,\n  } = style;\n\n  const c0 = rbl * (1.0 - KAPPA);\n  const c1 = rbr * (1.0 - KAPPA);\n\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c1,\n    left + width - c1,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(\n    left + c0,\n    top + height,\n    left,\n    top + height - c0,\n    left,\n    top + height - rbl,\n  );\n\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(\n    Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2,\n  );\n\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, { space: borderBottomWidth * 1.2 });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, { space: borderBottomWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst clipBorderLeft = (ctx, layout, style, rbl, rtl) => {\n  const { top, left, width, height } = layout;\n  const { borderTopWidth, borderLeftWidth, borderBottomWidth } = style;\n\n  // Clip outer left border edge\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n\n  // Ellipse coefficients outer top left cap\n  const c0 = rtl * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n\n  // Move right in case the margin exceedes the radius\n  const topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top);\n\n  // Clip inner top left cap\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  const c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  const c2 = innerTopLeftRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth + c1,\n    top + borderTopWidth,\n    left + borderLeftWidth,\n    top + borderTopWidth + c2,\n    left + borderLeftWidth,\n    top + Math.max(rtl, borderTopWidth),\n  );\n\n  // Clip inner left border edge\n  ctx.lineTo(\n    left + borderLeftWidth,\n    top + height - Math.max(rbl, borderBottomWidth),\n  );\n\n  // Ellipse coefficients inner bottom left cap\n  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  const c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  const c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  const bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth,\n    top + height - borderBottomWidth - c4,\n    left + borderLeftWidth + c3,\n    top + height - borderBottomWidth,\n    bottomLeftXCoord,\n    top + height - borderBottomWidth,\n  );\n  ctx.lineTo(bottomLeftXCoord, top + height);\n\n  // Move left in case the margin exceedes the radius\n  ctx.lineTo(left + rbl, top + height);\n\n  // Ellipse coefficients outer top right cap\n  const c5 = rbl * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + c5,\n    top + height,\n    left,\n    top + height - c5,\n    left,\n    top + height - rbl,\n  );\n\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border right cap joins\n  if (borderBottomWidth) {\n    const trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    const trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderLeft = (ctx, layout, style, rbl, rtl) => {\n  const { top, left, height } = layout;\n  const {\n    borderLeftColor,\n    borderLeftStyle,\n    borderLeftWidth,\n    borderTopWidth,\n    borderBottomWidth,\n  } = style;\n\n  const c0 = rbl * (1.0 - KAPPA);\n  const c1 = rtl * (1.0 - KAPPA);\n\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(\n    left + c0,\n    top + height,\n    left,\n    top + height - c0,\n    left,\n    top + height - rbl,\n  );\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(\n    Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2,\n  );\n\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, { space: borderLeftWidth * 1.2 });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, { space: borderLeftWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst shouldRenderBorders = node =>\n  node.box &&\n  (node.box.borderTopWidth ||\n    node.box.borderRightWidth ||\n    node.box.borderBottomWidth ||\n    node.box.borderLeftWidth);\n\nconst renderBorders = (ctx, node) => {\n  if (!shouldRenderBorders(node)) return node;\n\n  const {\n    width,\n    height,\n    borderTopWidth,\n    borderLeftWidth,\n    borderRightWidth,\n    borderBottomWidth,\n  } = node.box;\n\n  const {\n    opacity,\n    borderTopLeftRadius = 0,\n    borderTopRightRadius = 0,\n    borderBottomLeftRadius = 0,\n    borderBottomRightRadius = 0,\n    borderTopColor = 'black',\n    borderTopStyle = 'solid',\n    borderLeftColor = 'black',\n    borderLeftStyle = 'solid',\n    borderRightColor = 'black',\n    borderRightStyle = 'solid',\n    borderBottomColor = 'black',\n    borderBottomStyle = 'solid',\n  } = node.style;\n\n  const style = {\n    borderTopColor,\n    borderTopWidth,\n    borderTopStyle,\n    borderLeftColor,\n    borderLeftWidth,\n    borderLeftStyle,\n    borderRightColor,\n    borderRightWidth,\n    borderRightStyle,\n    borderBottomColor,\n    borderBottomWidth,\n    borderBottomStyle,\n    borderTopLeftRadius,\n    borderTopRightRadius,\n    borderBottomLeftRadius,\n    borderBottomRightRadius,\n  };\n\n  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderBorders);\n","import * as R from 'ramda';\n\nconst setDestination = ctx =>\n  R.tap(node => {\n    if (node.props.id) {\n      ctx.addNamedDestination(node.props.id, 'XYZ', null, node.box.top, null);\n    }\n  });\n\nexport default setDestination;\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\nimport clipNode from './clipNode';\n\nconst drawBackground = ctx => node => {\n  if (node.box && node.style.backgroundColor) {\n    const { top, left, width, height } = node.box;\n\n    ctx\n      .fillOpacity(node.style.opacity || 1)\n      .fillColor(node.style.backgroundColor)\n      .rect(left, top, width, height)\n      .fill();\n  }\n\n  return node;\n};\n\nconst shouldRenderBackground = R.hasPath(['style', 'backgroundColor']);\n\nconst renderBackground = (ctx, node) => {\n  R.when(\n    shouldRenderBackground,\n    R.compose(\n      restore(ctx),\n      drawBackground(ctx),\n      clipNode(ctx),\n      save(ctx),\n    ),\n  )(node);\n\n  return node;\n};\n\nexport default R.curryN(2, renderBackground);\n","import * as R from 'ramda';\n\nimport Font from '../font';\nimport save from './save';\nimport setLink from './setLink';\nimport restore from './restore';\nimport isSvg from '../node/isSvg';\nimport isText from '../node/isText';\nimport isPage from '../node/isPage';\nimport isLink from '../node/isLink';\nimport isNote from '../node/isNote';\nimport isImage from '../node/isImage';\nimport isCanvas from '../node/isCanvas';\nimport renderSvg from './renderSvg';\nimport renderText from './renderText';\nimport renderPage from './renderPage';\nimport renderNote from './renderNote';\nimport renderImage from './renderImage';\nimport renderCanvas from './renderCanvas';\nimport renderRulers from './renderRulers';\nimport addMetadata from './addMetadata';\nimport renderDebug from './renderDebug';\nimport renderBorders from './renderBorders';\nimport setDestination from './setDestination';\nimport renderBackground from './renderBackground';\nimport applyTransformations from './applyTransformations';\n\nconst shouldRenderChildren = v => !isText(v) && !isSvg(v);\n\nconst renderChildren = ctx => node => {\n  save(ctx, node);\n\n  ctx.translate(node.box.left, node.box.top);\n\n  R.compose(\n    R.forEach(renderNode(ctx)),\n    R.pathOr([], ['children']),\n  )(node);\n\n  restore(ctx, node);\n\n  return node;\n};\n\nconst renderNode = ctx => node =>\n  R.compose(\n    restore(ctx),\n    renderDebug(ctx),\n    setDestination(ctx),\n    R.when(shouldRenderChildren, renderChildren(ctx)),\n    R.when(R.either(isText, isLink), setLink(ctx)),\n    R.cond([\n      [isText, renderText(ctx)],\n      [isNote, renderNote(ctx)],\n      [isImage, renderImage(ctx)],\n      [isCanvas, renderCanvas(ctx)],\n      [isSvg, renderSvg(ctx)],\n      [R.T, R.identity],\n    ]),\n    renderBorders(ctx),\n    renderBackground(ctx),\n    applyTransformations(ctx),\n    save(ctx),\n    R.when(isPage, renderPage(ctx)),\n  )(node);\n\nconst renderDocument = ctx =>\n  R.compose(\n    R.forEach(\n      R.compose(\n        renderRulers(ctx),\n        renderNode(ctx),\n      ),\n    ),\n    R.pathOr([], ['children']),\n  );\n\nconst render = (ctx, doc) => {\n  addMetadata(ctx)(doc);\n  renderDocument(ctx)(doc);\n\n  ctx.end();\n  Font.reset(); // TODO: move outside\n\n  return ctx;\n};\n\nexport default render;\n","/**\n * Capitalize first letter of each word\n *\n * @param {String} string\n * @returns {String} capitalized string\n */\nconst capitalize = value => {\n  if (!value) return value;\n  return value.replace(/(^|\\s)\\S/g, l => l.toUpperCase());\n};\n\nexport default capitalize;\n","import * as R from 'ramda';\n\n/**\n * Capitalize first letter of string\n *\n * @param {String} string\n * @returns {String} capitalized string\n */\nconst upperFirst = R.ifElse(\n  R.isNil,\n  R.identity,\n  R.compose(\n    R.join(''),\n    R.juxt([\n      R.compose(\n        R.toUpper,\n        R.head,\n      ),\n      R.tail,\n    ]),\n  ),\n);\n\nexport default R.memoizeWith(R.identity, upperFirst);\n","import capitalize from '../utils/capitalize';\nimport upperFirst from '../utils/upperFirst';\n\n/**\n * Apply transformation to text string\n *\n * @param {String} text\n * @param {String} transformation type\n * @returns {String} transformed text\n */\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return capitalize(text);\n    case 'upperfirst':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\n\nexport default transformText;\n","import { PDFFont } from '@react-pdf/pdfkit';\n\nclass StandardFont {\n  constructor(src) {\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n  }\n\n  layout(str) {\n    const [encoded, positions] = this.src.encode(str);\n\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs: encoded.map((g, i) => {\n        const glyph = this.getGlyph(parseInt(g, 16));\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      }),\n    };\n  }\n\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n\n  getGlyph(id) {\n    return {\n      id,\n      _font: this.src,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id),\n    };\n  }\n\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n\n  // Based on empirical observation\n  get ascent() {\n    return 900;\n  }\n\n  // Based on empirical observation\n  get descent() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n        return -220;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n        return -230;\n      default:\n        return -200;\n    }\n  }\n\n  get lineGap() {\n    return 0;\n  }\n\n  get unitsPerEm() {\n    return 1000;\n  }\n}\n\nexport default StandardFont;\n","import * as R from 'ramda';\n\nimport StandardFont from './standardFont';\n\nconst fontCache = {};\n\nconst IGNORED_CODE_POINTS = [173];\n\nconst getFontSize = R.pathOr(12, ['attributes', 'fontSize']);\n\nconst getOrCreateFont = name => {\n  if (fontCache[name]) return fontCache[name];\n\n  const font = new StandardFont(name);\n  fontCache[name] = font;\n\n  return font;\n};\n\nconst getFallbackFont = () => getOrCreateFont('Helvetica');\n\nconst shouldFallbackToFont = (codePoint, font) =>\n  !IGNORED_CODE_POINTS.includes(codePoint) &&\n  !font.hasGlyphForCodePoint(codePoint) &&\n  getFallbackFont().hasGlyphForCodePoint(codePoint);\n\nconst fontSubstitution = () => ({ string, runs }) => {\n  let lastFont = null;\n  let lastIndex = 0;\n  let index = 0;\n\n  const res = [];\n\n  for (const run of runs) {\n    const fontSize = getFontSize(run);\n    const defaultFont =\n      typeof run.attributes.font === 'string'\n        ? getOrCreateFont(run.attributes.font)\n        : run.attributes.font;\n\n    if (string.length === 0) {\n      res.push({ start: 0, end: 0, attributes: { font: defaultFont } });\n      break;\n    }\n\n    for (const char of string.slice(run.start, run.end)) {\n      const codePoint = char.codePointAt();\n      const shouldFallback = shouldFallbackToFont(codePoint, defaultFont);\n      const font = shouldFallback ? getFallbackFont() : defaultFont;\n\n      // If the default font does not have a glyph and the fallback font does, we use it\n      if (font !== lastFont) {\n        if (lastFont) {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              font: lastFont,\n              scale: lastFont ? fontSize / lastFont.unitsPerEm : 0,\n            },\n          });\n        }\n\n        lastFont = font;\n        lastIndex = index;\n      }\n\n      index += char.length;\n    }\n  }\n\n  if (lastIndex < string.length) {\n    const fontSize = getFontSize(R.last(runs));\n\n    res.push({\n      start: lastIndex,\n      end: string.length,\n      attributes: {\n        font: lastFont,\n        scale: lastFont ? fontSize / lastFont.unitsPerEm : 0,\n      },\n    });\n  }\n\n  return { string, runs: res };\n};\n\nexport default fontSubstitution;\n","import * as R from 'ramda';\nimport layoutEngine from '@react-pdf/textkit/layout';\nimport linebreaker from '@react-pdf/textkit/engines/linebreaker';\nimport justification from '@react-pdf/textkit/engines/justification';\nimport textDecoration from '@react-pdf/textkit/engines/textDecoration';\nimport scriptItemizer from '@react-pdf/textkit/engines/scriptItemizer';\nimport wordHyphenation from '@react-pdf/textkit/engines/wordHyphenation';\nimport AttributedString from '@react-pdf/textkit/attributedString';\n\nimport Font from '../font';\nimport transformText from '../text/transformText';\nimport isTextInstance from '../node/isTextInstance';\nimport fontSubstitution from '../text/fontSubstitution';\n\nconst engines = {\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution,\n};\n\nconst engine = layoutEngine(engines);\n\nconst layoutOptions = {\n  hyphenationCallback: Font.getHyphenationCallback(),\n  shrinkWhitespaceFactor: { before: -0.5, after: -0.5 },\n};\n\nconst getFragments = instance => {\n  if (!instance) return [{ string: '' }];\n\n  const fragments = [];\n\n  const {\n    fill = 'black',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    opacity,\n  } = instance.props;\n\n  const obj = Font.getFont({ fontFamily, fontWeight, fontStyle });\n  const font = obj ? obj.data : fontFamily;\n\n  const attributes = {\n    font,\n    opacity,\n    fontSize,\n    color: fill,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline',\n    underlineColor: textDecorationColor || fill,\n    strike: textDecoration === 'line-through',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || fill,\n  };\n\n  instance.children.forEach(child => {\n    if (isTextInstance(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes,\n      });\n    } else {\n      if (child) {\n        fragments.push(...getFragments(child));\n      }\n    }\n  });\n\n  return fragments;\n};\n\nconst getAttributedString = instance =>\n  AttributedString.fromFragments(getFragments(instance));\n\nconst AlmostInfinity = 999999999999;\n\nconst layoutTspan = node => {\n  const attributedString = getAttributedString(node);\n\n  const x = R.pathOr(0, ['props', 'x'], node);\n  const y = R.pathOr(0, ['props', 'y'], node);\n\n  const container = { x, y, width: AlmostInfinity, height: AlmostInfinity };\n\n  const lines = R.compose(\n    R.reduce(R.concat, []),\n    engine,\n  )(attributedString, container, layoutOptions);\n\n  return R.assoc('lines', lines, node);\n};\n\nconst layoutText = R.evolve({\n  children: R.map(layoutTspan),\n});\n\nexport default layoutText;\n","import * as R from 'ramda';\n\nimport { DEFS } from '../constants';\n\n/**\n * Checks if node is svg defs\n *\n * @param {Object} node\n * @returns {Boolean} is node svg defs?\n */\nconst isDefs = R.propEq('type', DEFS);\n\nexport default isDefs;\n","import * as R from 'ramda';\n\nimport isDefs from '../node/isDefs';\n\nconst getChildren = R.propOr([], 'children');\n\nconst getId = R.path(['props', 'id']);\n\nconst getDefs = R.compose(\n  R.map(R.prop(0)),\n  R.groupBy(getId),\n  getChildren,\n  R.defaultTo({}),\n  R.find(isDefs),\n  getChildren,\n);\n\nexport default getDefs;\n","import * as R from 'ramda';\n\nimport getDefs from './getDefs';\nimport isDefs from '../node/isDefs';\n\nconst isNotDefs = R.complement(isDefs);\n\nconst detachDefs = R.evolve({\n  children: R.filter(isNotDefs),\n});\n\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\n\nconst replaceDef = defs =>\n  R.compose(\n    R.when(\n      R.test(URL_REGEX),\n      R.compose(\n        R.prop(R.__, defs),\n        R.prop(1),\n        R.match(URL_REGEX),\n      ),\n    ),\n    R.defaultTo(''),\n  );\n\nconst parseNodeDefs = defs => node =>\n  R.compose(\n    R.evolve({\n      props: R.evolve({\n        fill: replaceDef(defs),\n        clipPath: replaceDef(defs),\n      }),\n    }),\n    R.evolve({ children: R.map(parseNodeDefs(defs)) }),\n  )(node);\n\nconst parseDefs = root => {\n  const defs = getDefs(root);\n  return R.evolve({ children: R.map(parseNodeDefs(defs)) }, root);\n};\n\nconst replaceDefs = R.compose(\n  detachDefs,\n  parseDefs,\n);\n\nexport default replaceDefs;\n","const parseViewbox = value => {\n  if (!value) return null;\n  const values = value.split(/[,\\s]+/).map(parseFloat);\n  if (values.length !== 4) return null;\n  return { minX: values[0], minY: values[1], maxX: values[2], maxY: values[3] };\n};\n\nexport default parseViewbox;\n","import parseViewBox from './parseViewbox';\n\nconst getContainer = node => {\n  const viewbox = parseViewBox(node.props.viewBox);\n\n  if (viewbox) {\n    return { width: viewbox.maxX, height: viewbox.maxY };\n  }\n\n  if (node.props.width && node.props.height) {\n    return {\n      width: parseFloat(node.props.width),\n      height: parseFloat(node.props.height),\n    };\n  }\n\n  return { width: 0, height: 0 };\n};\n\nexport default getContainer;\n","import * as R from 'ramda';\n\nimport { SVG_INHERITED_PROPS } from '../constants';\n\nconst getInheritProps = R.compose(\n  R.pick(SVG_INHERITED_PROPS),\n  R.propOr({}, 'props'),\n);\n\nconst inheritProps = node => {\n  const props = getInheritProps(node);\n\n  return R.evolve({\n    children: R.map(\n      R.compose(\n        inheritProps,\n        R.evolve({\n          props: R.merge(props),\n        }),\n      ),\n    ),\n  })(node);\n};\n\nexport default inheritProps;\n","const parseAspectRatio = value => {\n  const match = value\n    .replace(/[\\s\\r\\t\\n]+/gm, ' ')\n    .replace(/^defer\\s/, '')\n    .split(' ');\n\n  const align = match[0] || 'xMidYMid';\n  const meetOrSlice = match[1] || 'meet';\n\n  return { align, meetOrSlice };\n};\n\nexport default parseAspectRatio;\n","import * as R from 'ramda';\nimport colorString from 'color-string';\nimport hlsToHex from 'hsl-to-hex';\n\nconst isRgb = R.test(/rgb/g);\nconst isRgba = R.test(/rgba/g);\nconst isHsl = R.test(/hsl/g);\nconst isHsla = R.test(/hsla/g);\n\n/**\n * Transform rgb color to hexa\n *\n * @param {String} styles value\n * @returns {Object} transformed value\n */\nconst parseRgb = R.compose(\n  colorString.to.hex,\n  colorString.get.rgb,\n);\n\n/**\n * Transform Hsl color to hexa\n *\n * @param {String} styles value\n * @returns {Object} transformed value\n */\nconst parseHsl = R.compose(\n  R.toUpper,\n  R.apply(hlsToHex),\n  R.map(Math.round),\n  colorString.get.hsl,\n);\n\n/**\n * Transform given color to hexa\n *\n * @param {String} styles value\n * @returns {Object} transformed value\n */\nexport const transformColor = value =>\n  R.cond([\n    [isRgba, parseRgb],\n    [isRgb, parseRgb],\n    [isHsla, parseHsl],\n    [isHsl, parseHsl],\n    [R.T, R.always(value)],\n  ])(value);\n\n/**\n * Transform rbg and cmyk colors to hexa\n *\n * @param {Object} styles object\n * @returns {Object} transformed styles\n */\nconst transformColors = styles => R.map(transformColor, styles);\n\nexport default transformColors;\n","import * as R from 'ramda';\n\nimport isSvg from '../node/isSvg';\nimport isText from '../node/isText';\n\nimport layoutText from '../svg/layoutText';\nimport replaceDefs from '../svg/replaceDefs';\nimport getContainer from '../svg/getContainer';\nimport parseViewbox from '../svg/parseViewbox';\nimport inheritProps from '../svg/inheritProps';\nimport matchPercent from '../utils/matchPercent';\nimport isTextInstance from '../node/isTextInstance';\nimport parseAspectRatio from '../svg/parseAspectRatio';\nimport { transformColor } from '../stylesheet/transformColors';\n\nconst STYLE_PROPS = [\n  'width',\n  'height',\n  'color',\n  'stroke',\n  'strokeWidth',\n  'opacity',\n  'fillOpacity',\n  'strokeOpacity',\n  'fill',\n  'fillRule',\n  'clipPath',\n  'offset',\n  'transform',\n  'strokeLinejoin',\n  'strokeLinecap',\n  'strokeDasharray',\n];\n\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\n\nconst transformPercent = container =>\n  R.mapObjIndexed((value, key) => {\n    const match = matchPercent(value);\n\n    if (match && VERTICAL_PROPS.includes(key)) {\n      return match.percent * container.height;\n    }\n\n    if (match && HORIZONTAL_PROPS.includes(key)) {\n      return match.percent * container.width;\n    }\n\n    return value;\n  });\n\nconst parsePercent = value => {\n  const match = matchPercent(value);\n  return match ? match.percent : parseFloat(value);\n};\n\nconst parseProps = container =>\n  R.compose(\n    R.evolve({\n      props: R.o(\n        R.evolve({\n          x: parseFloat,\n          x1: parseFloat,\n          x2: parseFloat,\n          y: parseFloat,\n          y1: parseFloat,\n          y2: parseFloat,\n          r: parseFloat,\n          rx: parseFloat,\n          ry: parseFloat,\n          cx: parseFloat,\n          cy: parseFloat,\n          width: parseFloat,\n          height: parseFloat,\n          offset: parsePercent,\n          fill: transformColor,\n          opacity: parsePercent,\n          stroke: transformColor,\n          stopOpacity: parsePercent,\n          stopColor: transformColor,\n        }),\n        transformPercent(container),\n      ),\n    }),\n  );\n\nconst mergeStyles = node => {\n  const style = R.propOr({}, 'style', node);\n  return R.evolve({ props: R.merge(style) }, node);\n};\n\nconst removeNoneValues = R.evolve({\n  props: R.map(R.when(R.equals('none'), R.always(null))),\n});\n\nconst pickStyleProps = node => {\n  const styleProps = R.o(R.pick(STYLE_PROPS), R.propOr({}, 'props'))(node);\n  return R.evolve({ style: R.merge(styleProps) }, node);\n};\n\nconst parseSvgProps = R.evolve({\n  props: R.evolve({\n    width: parseFloat,\n    height: parseFloat,\n    viewBox: parseViewbox,\n    preserveAspectRatio: parseAspectRatio,\n  }),\n});\n\nconst wrapBetweenTspan = node => ({\n  type: 'TSPAN',\n  props: {},\n  children: [node],\n});\n\nconst addMissingTspan = R.when(\n  isText,\n  R.evolve({\n    children: R.map(R.when(isTextInstance, wrapBetweenTspan)),\n  }),\n);\n\nconst resolveSvgNode = container =>\n  R.compose(\n    parseProps(container),\n    addMissingTspan,\n    removeNoneValues,\n    mergeStyles,\n  );\n\nconst resolveChildren = container => node =>\n  R.evolve({\n    children: R.map(\n      R.compose(\n        resolveChildren(container),\n        resolveSvgNode(container),\n      ),\n    ),\n  })(node);\n\nconst parseText = node =>\n  R.ifElse(\n    isText,\n    layoutText,\n    R.evolve({\n      children: R.map(parseText),\n    }),\n  )(node);\n\nconst resolveSvgRoot = node => {\n  const container = getContainer(node);\n\n  return R.compose(\n    replaceDefs,\n    parseText,\n    parseSvgProps,\n    pickStyleProps,\n    inheritProps,\n    resolveChildren(container),\n  )(node);\n};\n\nconst resolveSvg = node =>\n  R.compose(\n    R.evolve({ children: R.map(resolveSvg) }),\n    R.when(isSvg, resolveSvgRoot),\n  )(node);\n\nexport default resolveSvg;\n","import * as R from 'ramda';\nimport { SVG, DOCUMENT } from '../constants';\n\nconst getZIndex = R.path(['style', 'zIndex']);\n\nconst isType = R.propEq('type');\n\nconst shouldNotSort = R.anyPass([isType(DOCUMENT), isType(SVG)]);\n\nconst sortZIndex = (a, b) => {\n  const za = getZIndex(a);\n  const zb = getZIndex(b);\n\n  if (!za && !zb) return 0;\n  if (!za) return 1;\n  if (!zb) return -1;\n\n  return zb - za;\n};\n\n/**\n * Sort children by zIndex value\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolveZIndex = node =>\n  R.compose(\n    R.evolve({ children: R.map(resolveZIndex) }),\n    R.unless(shouldNotSort, R.evolve({ children: R.sort(sortZIndex) })),\n  )(node);\n\nexport default resolveZIndex;\n","import * as R from 'ramda';\n\nimport { RULER_WIDTH } from '../constants';\nimport hasVerticalRuler from '../node/hasVerticalRuler';\nimport hasHorizontalRuler from '../node/hasHorizontalRuler';\n\n/**\n * Adjust page size given ruler props\n *\n * @param {Object} page\n * @returns {boolean} page with size altered by ruler props\n */\nconst adjustPageSize = R.compose(\n  R.when(\n    hasVerticalRuler,\n    R.evolve({\n      box: { height: R.add(RULER_WIDTH) },\n      children: R.map(\n        R.evolve({\n          box: { top: R.add(RULER_WIDTH) },\n        }),\n      ),\n    }),\n  ),\n  R.when(\n    hasHorizontalRuler,\n    R.evolve({\n      box: { width: R.add(RULER_WIDTH) },\n      children: R.map(\n        R.evolve({\n          box: { left: R.add(RULER_WIDTH) },\n        }),\n      ),\n    }),\n  ),\n);\n\n/**\n * Adjust pages size given ruler props\n *\n * @param {Object} root\n * @returns {boolean} root with pages size altered by ruler props\n */\nconst resolveRulers = R.evolve({\n  children: R.map(adjustPageSize),\n});\n\nexport default resolveRulers;\n","import PNG from '@react-pdf/png-js';\n\nPNG.isValid = function(data) {\n  try {\n    return !!new PNG(data);\n  } catch (e) {\n    return false;\n  }\n};\n\nexport default PNG;\n","// Extracted from https://github.com/devongovett/pdfkit/blob/master/lib/image/jpeg.coffee\n\nconst MARKERS = [\n  0xffc0,\n  0xffc1,\n  0xffc2,\n  0xffc3,\n  0xffc5,\n  0xffc6,\n  0xffc7,\n  0xffc8,\n  0xffc9,\n  0xffca,\n  0xffcb,\n  0xffcc,\n  0xffcd,\n  0xffce,\n  0xffcf,\n];\n\nclass JPEG {\n  data = null;\n  width = null;\n  height = null;\n\n  constructor(data) {\n    this.data = data;\n\n    if (data.readUInt16BE(0) !== 0xffd8) {\n      throw new Error('SOI not found in JPEG');\n    }\n\n    let marker;\n    let pos = 2;\n\n    while (pos < data.length) {\n      marker = data.readUInt16BE(pos);\n      pos += 2;\n      if (MARKERS.includes(marker)) {\n        break;\n      }\n      pos += data.readUInt16BE(pos);\n    }\n\n    if (!MARKERS.includes(marker)) {\n      throw new Error('Invalid JPEG.');\n    }\n\n    pos += 3;\n    this.height = data.readUInt16BE(pos);\n\n    pos += 2;\n    this.width = data.readUInt16BE(pos);\n  }\n}\n\nJPEG.isValid = function(data) {\n  if (!data || !Buffer.isBuffer(data) || data.readUInt16BE(0) !== 0xffd8) {\n    return false;\n  }\n\n  let marker;\n  let pos = 2;\n\n  while (pos < data.length) {\n    marker = data.readUInt16BE(pos);\n    pos += 2;\n    if (MARKERS.includes(marker)) {\n      break;\n    }\n    pos += data.readUInt16BE(pos);\n  }\n\n  if (!MARKERS.includes(marker)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default JPEG;\n","const createCache = ({ limit = 100 } = {}) => {\n  let cache = {};\n  let keys = [];\n\n  return {\n    get: key => cache[key],\n    set: (key, value) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift()];\n      }\n      cache[key] = value;\n    },\n    reset: () => {\n      cache = {};\n      keys = [];\n    },\n    length: () => keys.length,\n  };\n};\n\nexport default createCache;\n","import fs from 'fs';\nimport url from 'url';\nimport path from 'path';\nimport fetch from 'cross-fetch';\n\nimport PNG from '../utils/png';\nimport JPEG from '../utils/jpeg';\nimport createCache from '../utils/cache';\n\nexport const IMAGE_CACHE = createCache({ limit: 30 });\n\nexport const getAbsoluteLocalPath = src => {\n  if (BROWSER) {\n    throw new Error('Cannot check local paths in client-side environment');\n  }\n\n  const { protocol, auth, host, port, hostname, path: pathname } = url.parse(\n    src,\n  );\n  const absolutePath = path.resolve(pathname);\n  if ((protocol && protocol !== 'file:') || auth || host || port || hostname) {\n    return undefined;\n  }\n  return absolutePath;\n};\n\nconst fetchLocalFile = src =>\n  new Promise((resolve, reject) => {\n    try {\n      if (BROWSER) {\n        return reject(new Error('Cannot fetch local file in this environemnt'));\n      }\n      const absolutePath = getAbsoluteLocalPath(src);\n      if (!absolutePath) {\n        return reject(new Error(`Cannot fetch non-local path: ${src}`));\n      }\n      fs.readFile(absolutePath, (err, data) =>\n        err ? reject(err) : resolve(data),\n      );\n    } catch (err) {\n      reject(err);\n    }\n  });\n\nconst fetchRemoteFile = async (uri, options) => {\n  const response = await fetch(uri, options);\n\n  const buffer = await (response.buffer\n    ? response.buffer()\n    : response.arrayBuffer());\n\n  return buffer.constructor.name === 'Buffer' ? buffer : Buffer.from(buffer);\n};\n\nconst isValidFormat = format => {\n  const lower = format.toLowerCase();\n  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';\n};\n\nconst guessFormat = buffer => {\n  let format;\n\n  if (JPEG.isValid(buffer)) {\n    format = 'jpg';\n  } else if (PNG.isValid(buffer)) {\n    format = 'png';\n  }\n\n  return format;\n};\n\nconst isCompatibleBase64 = ({ uri }) =>\n  /^data:image\\/[a-zA-Z]*;base64,[^\"]*/g.test(uri);\n\nfunction getImage(body, extension) {\n  switch (extension.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n      return new JPEG(body);\n    case 'png':\n      return new PNG(body);\n    default:\n      return null;\n  }\n}\n\nconst resolveBase64Image = ({ uri }) => {\n  const match = /^data:image\\/([a-zA-Z]*);base64,([^\"]*)/g.exec(uri);\n  const format = match[1];\n  const data = match[2];\n\n  if (!isValidFormat(format)) {\n    throw new Error(`Base64 image invalid format: ${format}`);\n  }\n\n  return new Promise(resolve => {\n    return resolve(getImage(Buffer.from(data, 'base64'), format));\n  });\n};\n\nconst resolveImageFromData = src => {\n  if (src.data && src.format) {\n    return new Promise(resolve => resolve(getImage(src.data, src.format)));\n  }\n\n  throw new Error(`Invalid data given for local file: ${JSON.stringify(src)}`);\n};\n\nconst resolveBufferImage = buffer => {\n  const format = guessFormat(buffer);\n\n  if (format) {\n    return new Promise(resolve => resolve(getImage(buffer, format)));\n  }\n};\n\nconst getImageFormat = body => {\n  const isPng =\n    body[0] === 137 &&\n    body[1] === 80 &&\n    body[2] === 78 &&\n    body[3] === 71 &&\n    body[4] === 13 &&\n    body[5] === 10 &&\n    body[6] === 26 &&\n    body[7] === 10;\n\n  const isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;\n\n  let extension = '';\n  if (isPng) {\n    extension = 'png';\n  } else if (isJpg) {\n    extension = 'jpg';\n  } else {\n    throw new Error('Not valid image extension');\n  }\n\n  return extension;\n};\n\nconst resolveImageFromUrl = async src => {\n  const { uri, body, headers, method = 'GET' } = src;\n\n  const data =\n    !BROWSER && getAbsoluteLocalPath(uri)\n      ? await fetchLocalFile(uri)\n      : await fetchRemoteFile(uri, { body, headers, method });\n\n  const extension = getImageFormat(data);\n\n  return getImage(data, extension);\n};\n\nconst resolveImage = (src, { cache = true } = {}) => {\n  const cacheKey = src.data ? src.data.toString() : src.uri;\n\n  if (cache && IMAGE_CACHE.get(cacheKey)) {\n    return IMAGE_CACHE.get(cacheKey);\n  }\n\n  let image;\n  if (isCompatibleBase64(src)) {\n    image = resolveBase64Image(src);\n  } else if (Buffer.isBuffer(src)) {\n    image = resolveBufferImage(src);\n  } else if (typeof src === 'object' && src.data) {\n    image = resolveImageFromData(src);\n  } else {\n    image = resolveImageFromUrl(src);\n  }\n\n  if (!image) {\n    throw new Error('Cannot resolve image');\n  }\n\n  if (cache) {\n    IMAGE_CACHE.set(cacheKey, image);\n  }\n\n  return image;\n};\n\nexport default resolveImage;\n","import * as R from 'ramda';\n\nconst isNotNil = R.complement(R.isNil);\n\n/**\n * Takes a list of predicates and returns the first predicate result that returns true for a given list of arguments\n *\n * @param  {...any} predicates\n * @param  {any} value\n */\nconst firstPass = (...fns) => value => {\n  let res;\n\n  for (const fn of fns) {\n    res = fn(value);\n    if (isNotNil(res)) return res;\n  }\n\n  return res;\n};\n\nexport default firstPass;\n","import * as R from 'ramda';\n\nimport firstPass from '../utils/firstPass';\n\n/**\n * Get image source\n *\n * @param {Object} image node\n * @returns {String} image src\n */\nconst getSource = R.compose(\n  R.when(R.is(String), src => ({ uri: src })),\n  firstPass(\n    R.path(['props', 'src']),\n    R.path(['props', 'source']),\n    R.path(['props', 'href']),\n  ),\n);\n\nexport default getSource;\n","import resolveImage from './resolveImage';\nimport getSource from './getSource';\nimport warning from '../utils/warning';\n\n/**\n * Resolves async src if passed\n *\n * @param {string | Function} src\n * @returns {object} resolved src\n */\nconst resolveSrc = async src =>\n  typeof src === 'function' ? { uri: await src() } : src;\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param {Object} node\n */\nconst fetchImage = async node => {\n  const src = getSource(node);\n  const { cache } = node.props;\n\n  if (!src) {\n    warning(false, 'Image should receive either a \"src\" or \"source\" prop');\n    return;\n  }\n\n  try {\n    const source = await resolveSrc(src);\n    node.image = await resolveImage(source, { cache });\n  } catch (e) {\n    node.image = { width: 0, height: 0 };\n    console.warn(e.message);\n  }\n};\n\nexport default fetchImage;\n","/* eslint-disable no-cond-assign */\nimport emojiRegex from 'emoji-regex';\n\nimport Font from '../font';\nimport resolveImage from '../image/resolveImage';\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n\nconst reflect = promise => (...args) => promise(...args).then(v => v, e => e);\n\n// Returns a function to be able to mock resolveImage.\nconst makeFetchEmojiImage = () => reflect(resolveImage);\n\n/**\n * When an emoji as no color, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst _removeNoColor = x => x !== '️';\n\nconst getCodePoints = string =>\n  Array.from(string)\n    .filter(_removeNoColor)\n    .map(char => char.codePointAt(0).toString(16))\n    .join('-');\n\nconst buildEmojiUrl = emoji => {\n  const { url, format } = Font.getEmojiSource();\n  return `${url}${getCodePoints(emoji)}.${format}`;\n};\n\nexport const fetchEmojis = string => {\n  const emojiSource = Font.getEmojiSource();\n\n  if (!emojiSource || !emojiSource.url) return [];\n\n  const promises = [];\n\n  let match;\n  while ((match = regex.exec(string))) {\n    const emoji = match[0];\n\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji);\n\n      emojis[emoji] = { loading: true };\n      const fetchEmojiImage = makeFetchEmojiImage();\n      promises.push(\n        fetchEmojiImage({ uri: emojiUrl }).then(image => {\n          emojis[emoji].loading = false;\n          emojis[emoji].data = image.data;\n        }),\n      );\n    }\n  }\n\n  return promises;\n};\n\nexport const embedEmojis = fragments => {\n  const result = [];\n\n  for (let i = 0; i < fragments.length; i++) {\n    const fragment = fragments[i];\n\n    let match;\n    let lastIndex = 0;\n\n    while ((match = regex.exec(fragment.string))) {\n      const index = match.index;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0xfffc)),\n          attributes: {\n            ...fragment.attributes,\n            attachment: {\n              width: emojiSize,\n              height: emojiSize,\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data,\n            },\n          },\n        });\n      } else {\n        // If no emoji data, we just replace the emoji with a nodef char\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0)),\n          attributes: fragment.attributes,\n        });\n      }\n\n      lastIndex = index + emoji.length;\n    }\n\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes,\n      });\n    }\n  }\n\n  return result;\n};\n","import * as R from 'ramda';\n\nimport Font from '../font';\nimport isImage from '../node/isImage';\nimport fetchImage from '../image/fetchImage';\nimport { fetchEmojis } from '../text/emoji';\n\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} root node\n * @returns {Array} asset promises\n */\nconst fetchAssets = node => {\n  const promises = [];\n  const listToExplore = node.children.slice(0);\n\n  while (listToExplore.length > 0) {\n    const node = listToExplore.shift();\n\n    if (isImage(node)) {\n      promises.push(fetchImage(node));\n    }\n\n    if (node.style && node.style.fontFamily) {\n      promises.push(Font.load(node.style));\n    }\n\n    if (typeof node === 'string') {\n      promises.push(...fetchEmojis(node));\n    }\n\n    if (typeof node.value === 'string') {\n      promises.push(...fetchEmojis(node.value));\n    }\n\n    if (node.children) {\n      node.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n\n  return promises;\n};\n\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} root node\n * @returns {Object} root node\n */\nconst resolveAssets = node =>\n  R.compose(\n    R.then(R.always(node)),\n    p => Promise.all(p),\n    fetchAssets,\n  )(node);\n\nexport default resolveAssets;\n","import * as R from 'ramda';\n\n/**\n * Checks if value is not an array\n *\n * @param {any} value\n * @returns {Boolean} isn't value an array\n */\nconst isNotArray = R.complement(R.is(Array));\n\n/**\n * Casts value to array\n *\n * @param {any} value\n * @returns {Array} casted value\n */\nconst castArray = R.when(isNotArray, v => [v]);\n\nexport default castArray;\n","import * as R from 'ramda';\n\nimport castArray from '../utils/castArray';\n\n/**\n * Remove nil values from array\n *\n * @param {Array} array\n * @returns {Array} array without nils\n */\nconst compact = R.filter(Boolean);\n\n/**\n * Checks if value is array\n *\n * @param {any} value\n * @returns {Boolean} is value an array\n */\nconst isArray = R.is(Array);\n\n/**\n * Merges style objects array\n *\n * @param {Array} style objects array\n * @returns {Object} merged style object\n */\nconst mergeStyles = styles =>\n  styles.reduce((acc, style) => {\n    const s = isArray(style) ? flatten(style) : style;\n\n    Object.keys(s).forEach(key => {\n      if (s[key] !== null && s[key] !== undefined) {\n        acc[key] = s[key];\n      }\n    });\n\n    return acc;\n  }, {});\n\n/**\n * Flattens an array of style objects, into one aggregated style object.\n *\n * @param {Array} style objects array\n * @returns {Object} flatted style object\n */\nconst flatten = R.compose(\n  mergeStyles,\n  compact,\n  castArray,\n);\n\nexport default flatten;\n","const hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Expand rules\n */\nconst styleShorthands = {\n  margin: {\n    marginTop: true,\n    marginRight: true,\n    marginBottom: true,\n    marginLeft: true,\n  },\n  marginHorizontal: {\n    marginLeft: true,\n    marginRight: true,\n  },\n  marginVertical: {\n    marginTop: true,\n    marginBottom: true,\n  },\n  padding: {\n    paddingTop: true,\n    paddingRight: true,\n    paddingBottom: true,\n    paddingLeft: true,\n  },\n  paddingHorizontal: {\n    paddingLeft: true,\n    paddingRight: true,\n  },\n  paddingVertical: {\n    paddingTop: true,\n    paddingBottom: true,\n  },\n  border: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderTop: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n  },\n  borderRight: {\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n  },\n  borderBottom: {\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n  },\n  borderLeft: {\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderColor: {\n    borderTopColor: true,\n    borderRightColor: true,\n    borderBottomColor: true,\n    borderLeftColor: true,\n  },\n  borderRadius: {\n    borderTopLeftRadius: true,\n    borderTopRightRadius: true,\n    borderBottomRightRadius: true,\n    borderBottomLeftRadius: true,\n  },\n  borderStyle: {\n    borderTopStyle: true,\n    borderRightStyle: true,\n    borderBottomStyle: true,\n    borderLeftStyle: true,\n  },\n  borderWidth: {\n    borderTopWidth: true,\n    borderRightWidth: true,\n    borderBottomWidth: true,\n    borderLeftWidth: true,\n  },\n  objectPosition: {\n    objectPositionX: true,\n    objectPositionY: true,\n  },\n  transformOrigin: {\n    transformOriginX: true,\n    transformOriginY: true,\n  },\n  flex: {\n    flexGrow: true,\n    flexShrink: true,\n    flexBasis: true,\n  },\n};\n\n/**\n * Expand the shorthand properties to isolate every declaration from the others.\n *\n * @param { Object } style object\n * @returns { Object } expanded style object\n */\nconst expandStyles = style => {\n  if (!style) return style;\n\n  const propsArray = Object.keys(style);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = style[key];\n\n    if (styleShorthands[key]) {\n      const expandedProps = styleShorthands[key];\n\n      for (const propName in expandedProps) {\n        if (hasOwnProperty.call(expandedProps, propName)) {\n          resolvedStyle[propName] = value;\n        }\n      }\n    } else {\n      resolvedStyle[key] = value;\n    }\n  }\n\n  return resolvedStyle;\n};\n\nexport default expandStyles;\n","import * as R from 'ramda';\n\nimport { DPI } from '../constants';\n\nconst MM_FACTOR = (1 / 25.4) * DPI;\n\nconst CM_FACTOR = (1 / 2.54) * DPI;\n\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param {String} scalar value\n * @returns {Object} parsed value\n */\nconst parseValue = value => {\n  const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|vh|vw|px)?$/g.exec(value);\n\n  return match\n    ? { value: parseFloat(match[1], 10), unit: match[2] || 'pt' }\n    : { value, unit: undefined };\n};\n\n/**\n * Transform given scalar value\n *\n * @param {Object} container\n * @param {String} styles value\n * @returns {Object} transformed value\n */\nconst transformUnit = R.curryN(2, (container, value) => {\n  const scalar = parseValue(value);\n\n  switch (scalar.unit) {\n    case 'in':\n      return scalar.value * DPI;\n    case 'mm':\n      return scalar.value * MM_FACTOR;\n    case 'cm':\n      return scalar.value * CM_FACTOR;\n    case 'vh':\n      return scalar.value * (container.height / 100);\n    case 'vw':\n      return scalar.value * (container.width / 100);\n    default:\n      return scalar.value;\n  }\n});\n\n/**\n * Transform units on given styles object.\n * Container is given to calculate vh and vw\n *\n * @param {Object} container\n * @param {Object} styles object\n * @returns {Object} transformed styles\n */\nconst transformUnits = (container, styles) =>\n  R.map(transformUnit(container), styles);\n\nexport default R.curryN(2, transformUnits);\n","import * as R from 'ramda';\nimport matchMedia from 'media-engine';\n\n/**\n * Resolves media queries in styles object\n *\n * @param {Object} container\n * @param {Object} styles object\n */\nconst resolveMediaQueries = (container, styles) => {\n  return Object.keys(styles).reduce((acc, key) => {\n    if (/@media/.test(key)) {\n      return {\n        ...acc,\n        ...matchMedia({ [key]: styles[key] }, container),\n      };\n    }\n\n    return { ...acc, [key]: styles[key] };\n  }, {});\n};\n\nexport default R.curryN(2, resolveMediaQueries);\n","import * as R from 'ramda';\n\nimport isLink from '../node/isLink';\nimport flattenStyles from '../stylesheet/flatten';\nimport expandStyles from '../stylesheet/expandStyles';\nimport transformUnits from '../stylesheet/transformUnits';\nimport transformStyles from '../stylesheet/transformStyles';\nimport transformColors from '../stylesheet/transformColors';\nimport resolveMediaQueries from '../stylesheet/resolveMediaQueries';\n\nconst LINK_STYLES = {\n  color: 'blue',\n  textDecoration: 'underline',\n};\n\n/**\n * Filter styles with `none` value\n *\n * @param {Object} style object\n * @returns {Object} style without none values\n */\nconst filterNoneValues = R.reject(R.equals('none'));\n\n/**\n * Resolves styles\n *\n * @param {Object} container\n * @param {Object} node\n * @param {Object} style object\n * @returns {Object} resolved style object\n */\nconst resolveStyles = container =>\n  R.compose(\n    transformUnits(container),\n    transformColors,\n    transformStyles,\n    expandStyles,\n    resolveMediaQueries(container),\n    filterNoneValues,\n    flattenStyles,\n  );\n\n/**\n * Resolves node styles\n *\n * @param {Object} container\n * @param {Object} document node\n * @returns {Object} node (and subnodes) with resolved styles\n */\nconst resolveNodeStyles = container => node =>\n  R.o(\n    R.when(isLink, R.evolve({ style: R.merge(LINK_STYLES) })),\n    R.evolve({\n      style: resolveStyles(container),\n      children: R.map(resolveNodeStyles(container)),\n    }),\n  )(node);\n\n/**\n * Resolves page styles\n *\n * @param {Object} document page\n * @returns {Object} document page with resolved styles\n */\nconst resolvePageStyles = page => {\n  const box = R.prop('box', page);\n  const style = R.prop('style', page);\n  const container = R.isEmpty(box) ? style : box;\n\n  return R.evolve({\n    style: resolveStyles(container),\n    children: R.map(resolveNodeStyles(container)),\n  })(page);\n};\n\n/**\n * Resolves root styles\n *\n * @param {Object} document root\n * @returns {Object} document root with resolved styles\n */\nexport default R.evolve({\n  children: R.map(resolvePageStyles),\n});\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\nconst getTransformStyle = s => R.pathOr('50%', ['style', s]);\n\n/**\n * Get node origin\n *\n * @param {Object} node\n * @returns {Object} node origin\n */\nconst getOrigin = node => {\n  if (!node.box) return {};\n\n  const { left, top, width, height } = node.box;\n  const transformOriginX = getTransformStyle('transformOriginX')(node);\n  const transformOriginY = getTransformStyle('transformOriginY')(node);\n\n  const percentX = matchPercent(transformOriginX);\n  const percentY = matchPercent(transformOriginY);\n\n  const offsetX = percentX ? width * percentX.percent : transformOriginX;\n  const offsetY = percentY ? height * percentY.percent : transformOriginY;\n\n  return { left: left + offsetX, top: top + offsetY };\n};\n\nexport default getOrigin;\n","import * as R from 'ramda';\n\nimport getOrigin from '../node/getOrigin';\n\n/**\n * Resolve node origin\n *\n * @param {Object} node\n * @returns {Object} node with origin attribute\n */\nconst resolveNodeOrigin = node =>\n  R.compose(\n    R.evolve({ children: R.map(resolveNodeOrigin) }),\n    R.converge(R.assoc('origin'), [getOrigin, R.identity]),\n  )(node);\n\n/**\n * Resolve document origins\n *\n * @param {Object} document root\n * @returns {Object} documrnt root\n */\nconst resolveOrigin = R.evolve({\n  children: R.map(resolveNodeOrigin),\n});\n\nexport default resolveOrigin;\n","import * as R from 'ramda';\n\nimport { PORTRAIT, LANDSCAPE } from '../constants';\n\nconst VALID_ORIENTATIONS = [PORTRAIT, LANDSCAPE];\n\n/**\n * Get page orientation. Defaults to landscape\n *\n * @param { Object } page object\n * @returns { String } page orientation\n */\nconst getOrientation = R.compose(\n  R.ifElse(\n    R.includes(R.__, VALID_ORIENTATIONS),\n    R.identity,\n    R.always(PORTRAIT),\n  ),\n  R.pathOr(PORTRAIT, ['props', 'orientation']),\n);\n\nexport default getOrientation;\n","import * as R from 'ramda';\n\nimport getOrientation from './getOrientation';\n\nimport { LANDSCAPE } from '../constants';\n\nconst isLandscape = R.compose(\n  R.equals(LANDSCAPE),\n  getOrientation,\n);\n\nexport default isLandscape;\n","import * as R from 'ramda';\n\nimport isLandscape from './isLandscape';\nimport { PAGE_SIZES } from '../constants';\n\n/**\n * Transforms array into size object\n *\n * @param {Array} array\n * @returns {Object} size object with width and height\n */\nconst toSizeObject = R.applySpec({\n  width: R.prop(0),\n  height: R.prop(1),\n});\n\n/**\n * Flip size object\n *\n * @param {Object} size object\n * @returns {Object} flipped size object\n */\nconst flipSizeObject = R.applySpec({\n  width: R.prop('height'),\n  height: R.prop('width'),\n});\n\n/**\n * Returns size object from a given string\n *\n * @param {String} page size string\n * @returns {Object} size object with width and height\n */\nconst getStringSize = R.compose(\n  toSizeObject,\n  R.prop(R.__, PAGE_SIZES),\n  R.toUpper,\n);\n\n/**\n * Returns size object from a single number\n *\n * @param {Number} page size number\n * @returns {Object} size object with width and height\n */\nconst getNumberSize = R.compose(\n  toSizeObject,\n  v => [v],\n);\n\n/**\n * Throws invalid size error\n *\n * @param {String} invalid page size input\n */\nconst throwInvalidError = size => {\n  throw new Error(`Invalid Page size: ${JSON.stringify(size)}`);\n};\n\n/**\n * Return page size in an object { width, height }\n *\n * @param {Object} page instance\n * @returns {Object} size object with width and height\n */\nconst getSize = page => {\n  const size = R.compose(\n    R.cond([\n      [R.is(String), getStringSize],\n      [R.is(Array), toSizeObject],\n      [R.is(Number), getNumberSize],\n      [R.is(Object), R.identity],\n      [R.T, throwInvalidError],\n    ]),\n    R.pathOr('A4', ['props', 'size']),\n  )(page);\n\n  return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\nexport default getSize;\n","import * as R from 'ramda';\n\n/**\n * Add empt box prop if not present in node\n *\n * @param {Object} node\n * @returns {Object} node with box prop\n */\nconst assocIfNil = (key, value, target) =>\n  R.when(\n    R.compose(\n      R.isNil,\n      R.prop(key),\n    ),\n    R.assoc(key, value),\n  )(target);\n\nexport default R.curryN(3, assocIfNil);\n","import * as R from 'ramda';\n\nimport getPageSize from '../page/getSize';\nimport assocIfNil from '../utils/assocIfNil';\n\n/**\n * Resolves page size\n *\n * @param {Object} page\n * @returns {Object} page with resolved size in style attribute\n */\nexport const resolvePageSize = page => {\n  const size = getPageSize(page);\n  return R.evolve({ style: R.merge(R.__, size) })(page);\n};\n\n/**\n * Resolves page sizes\n *\n * @param {Object} document root\n * @returns {Object} document root with resolved page sizes\n */\nconst resolvePageSizes = R.evolve({\n  children: R.map(\n    R.compose(\n      resolvePageSize,\n      assocIfNil('style', {}),\n    ),\n  ),\n});\n\nexport default resolvePageSizes;\n","/**\n * Get line index at given height\n *\n * @param {Object} node\n * @param {Number} height\n */\nconst lineIndexAtHeight = (node, height) => {\n  let y = 0;\n\n  if (!node.lines) return 0;\n\n  for (let i = 0; i < node.lines.length; i++) {\n    const line = node.lines[i];\n    if (y + line.box.height > height) return i;\n    y += line.box.height;\n  }\n\n  return node.lines.length;\n};\n\nexport default lineIndexAtHeight;\n","/**\n * Get height for given text line index\n *\n * @param {Object} node\n * @param {Number} index\n */\nconst heightAtLineIndex = (node, index) => {\n  let counter = 0;\n\n  if (!node.lines) return counter;\n\n  for (let i = 0; i < index; i++) {\n    const line = node.lines[i];\n\n    if (!line) break;\n\n    counter += line.box.height;\n  }\n\n  return counter;\n};\n\nexport default heightAtLineIndex;\n","import * as R from 'ramda';\n\nimport lineIndexAtHeight from './lineIndexAtHeight';\nimport heightAtLineIndex from './heightAtLineIndex';\n\nconst zero = R.always(0);\n\nconst getTop = R.pathOr(0, ['box', 'top']);\n\nconst getWidows = R.pathOr(2, ['props', 'widows']);\n\nconst getOrphans = R.pathOr(2, ['props', 'orphans']);\n\nconst getLineBreak = (node, height) => {\n  const top = getTop(node);\n  const widows = getWidows(node);\n  const orphans = getOrphans(node);\n  const linesQuantity = node.lines.length;\n  const slicedLine = lineIndexAtHeight(node, height - top);\n\n  if (slicedLine === 0) {\n    return 0;\n  } else if (linesQuantity < orphans) {\n    return linesQuantity;\n  } else if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  } else if (linesQuantity === orphans + widows) {\n    return orphans;\n  } else if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n\n  return slicedLine;\n};\n\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n\n  const current = R.evolve(\n    {\n      lines: R.slice(0, slicedLineIndex),\n      style: R.evolve({\n        marginBottom: zero,\n        paddingBottom: zero,\n        borderBottomWidth: zero,\n        borderBottomLeftRadius: zero,\n        borderBottomRightRadius: zero,\n      }),\n      box: {\n        height: R.always(currentHeight),\n        borderBottomWidth: zero,\n      },\n    },\n    node,\n  );\n\n  const next = R.evolve(\n    {\n      lines: R.slice(slicedLineIndex, Infinity),\n      style: R.evolve({\n        marginTop: zero,\n        paddingTop: zero,\n        borderTopWidth: zero,\n        borderTopLeftRadius: zero,\n        borderTopRightRadius: zero,\n      }),\n      box: {\n        top: zero,\n        height: R.always(nextHeight),\n        borderTopWidth: zero,\n      },\n    },\n    node,\n  );\n\n  return [current, next];\n};\n\nexport default splitText;\n","import * as R from 'ramda';\n\nconst zero = R.always(0);\n\nconst getTop = R.pathOr(0, ['box', 'top']);\n\nconst hasFixedHeight = R.hasPath(['style', 'height']);\n\nconst subtractHeight = value =>\n  R.o(R.subtract(R.__, value), R.path(['box', 'height']));\n\nconst splitNode = (node, height) => {\n  if (!node) return [null, null];\n\n  const nodeTop = getTop(node);\n\n  // TODO: We should keep style untouched\n  const current = R.evolve({\n    style: R.evolve({\n      marginBottom: zero,\n      paddingBottom: zero,\n      borderBottomWidth: zero,\n      borderBottomLeftRadius: zero,\n      borderBottomRightRadius: zero,\n    }),\n    box: {\n      height: R.always(height - nodeTop),\n      borderBottomWidth: zero,\n    },\n  })(node);\n\n  const nextHeight = R.ifElse(\n    hasFixedHeight,\n    subtractHeight(height - nodeTop),\n    R.always(null),\n  )(node);\n\n  // TODO: We should keep style untouched\n  const next = R.evolve({\n    style: R.evolve({\n      marginTop: zero,\n      paddingTop: zero,\n      borderTopWidth: zero,\n      borderTopLeftRadius: zero,\n      borderTopRightRadius: zero,\n    }),\n    box: {\n      top: zero,\n      height: R.always(nextHeight),\n      borderTopWidth: zero,\n    },\n  })(node);\n\n  return [current, next];\n};\n\nexport default splitNode;\n","import * as R from 'ramda';\n\nimport castArray from '../utils/castArray';\nimport { TEXT_INSTANCE } from '../constants';\n\nconst isString = R.is(String);\n\nconst isNumber = R.is(Number);\n\nconst isNotString = R.complement(isString);\n\n/**\n * Transforms a react element instance to internal element format\n *\n * @param {Object} React element\n * @returns {Object} parsed react element\n */\nconst createInstance = element => {\n  if (isString(element) || isNumber(element))\n    return { type: TEXT_INSTANCE, value: `${element}` };\n\n  if (isNotString(element.type))\n    return createInstance(element.type(element.props));\n\n  const {\n    type,\n    props: { style = {}, children = [], ...props },\n  } = element;\n\n  const nextChildren = R.compose(\n    R.map(createInstance),\n    castArray,\n  )(children);\n\n  return {\n    type,\n    style,\n    props,\n    box: {},\n    children: nextChildren,\n  };\n};\n\nexport default createInstance;\n","import * as R from 'ramda';\n\n/**\n * Get many nodes height\n *\n * @param {Array} nodes\n * @return {number} nodes height\n */\nconst getNodesHeight = nodes => {\n  let max = 0;\n  let min = Infinity;\n\n  if (R.isEmpty(nodes)) return 0;\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    min = Math.min(min, node.box.top);\n    max = Math.max(max, node.box.top + node.box.height);\n  }\n\n  return max - min;\n};\n\nexport default getNodesHeight;\n","import * as R from 'ramda';\n\nimport isSvg from './isSvg';\nimport isNote from './isNote';\nimport isImage from './isImage';\nimport isCanvas from './isCanvas';\nimport getNodesHeight from './getNodesHeight';\n\nconst getWrap = R.ifElse(\n  R.anyPass([isSvg, isNote, isImage, isCanvas]),\n  R.always(false),\n  R.pathOr(true, ['props', 'wrap']),\n);\n\nconst getBreak = R.pathOr(false, ['props', 'break']);\n\nconst getMinPresenceAhead = R.path(['props', 'minPresenceAhead']);\n\nconst defaultPresenceAhead = element => height =>\n  Math.min(element.box.height, height);\n\nconst getPresenceAhead = (elements, height) => {\n  let result = 0;\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (!element.box) continue;\n\n    const isElementInside = height > element.box.top;\n    const presenceAhead =\n      element.props.presenceAhead || defaultPresenceAhead(element);\n\n    if (element && isElementInside) {\n      result += presenceAhead(height - element.box.top);\n    }\n  }\n\n  return result;\n};\n\nconst shouldBreak = (child, futureElements, height) => {\n  const minPresenceAhead = getMinPresenceAhead(child);\n  const presenceAhead = getPresenceAhead(futureElements, height);\n  const futureHeight = getNodesHeight(futureElements);\n  const shouldSplit = height < child.box.top + child.box.height;\n  const shouldWrap = getWrap(child);\n\n  return (\n    getBreak(child) ||\n    (!shouldWrap && shouldSplit) ||\n    (minPresenceAhead < futureHeight && presenceAhead < minPresenceAhead)\n  );\n};\n\nexport default shouldBreak;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport firstPass from '../utils/firstPass';\n\nconst getComputedPadding = edge => node => {\n  const yogaNode = node._yogaNode;\n  return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} paddings\n */\nconst getPadding = R.applySpec({\n  paddingTop: firstPass(\n    getComputedPadding(Yoga.EDGE_TOP),\n    R.path(['box', 'paddingTop']),\n    R.path(['style', 'paddingTop']),\n    R.path(['style', 'paddingVertical']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n  paddingRight: firstPass(\n    getComputedPadding(Yoga.EDGE_RIGHT),\n    R.path(['box', 'paddingRight']),\n    R.path(['style', 'paddingRight']),\n    R.path(['style', 'paddingHorizontal']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n  paddingBottom: firstPass(\n    getComputedPadding(Yoga.EDGE_BOTTOM),\n    R.path(['box', 'paddingBottom']),\n    R.path(['style', 'paddingBottom']),\n    R.path(['style', 'paddingVertical']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n  paddingLeft: firstPass(\n    getComputedPadding(Yoga.EDGE_LEFT),\n    R.path(['box', 'paddingLeft']),\n    R.path(['style', 'paddingLeft']),\n    R.path(['style', 'paddingHorizontal']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n});\n\nexport default getPadding;\n","import * as R from 'ramda';\n\nimport getPadding from '../node/getPadding';\n\nconst getContentArea = page => {\n  const { paddingTop } = getPadding(page);\n  const height = R.path(['style', 'height'], page);\n  return height - paddingTop;\n};\n\nexport default getContentArea;\n","const IGNORABLE_CODEPOINTS = [\n  8232, // LINE_SEPARATOR\n  8233, // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font =>\n  IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n    if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n    return [...acc, String.fromCharCode(codePoint)];\n  }, []);\n\nexport const ignoreChars = fragments =>\n  fragments.map(fragment => {\n    const charSubset = buildSubsetForFont(fragment.attributes.font);\n    const subsetRegex = new RegExp(charSubset.join('|'));\n\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes,\n    };\n  });\n","import AttributedString from '@react-pdf/textkit/attributedString';\n\nimport Font from '../font';\nimport isImage from '../node/isImage';\nimport { embedEmojis } from './emoji';\nimport transformText from './transformText';\nimport { ignoreChars } from './ignorableChars';\nimport isTextInstance from '../node/isTextInstance';\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\n\n/**\n * Get textkit framgents of given node object\n *\n * @param {Object} instance node\n * @returns {Array} text fragments\n */\nconst getFragments = instance => {\n  if (!instance) return [{ string: '' }];\n\n  let fragments = [];\n  const {\n    color = 'black',\n    backgroundColor,\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textAlign = 'left',\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n    textIndent,\n    opacity,\n  } = instance.style;\n\n  const obj = Font.getFont({ fontFamily, fontWeight, fontStyle });\n  const font = obj ? obj.data : fontFamily;\n\n  const attributes = {\n    font,\n    color,\n    opacity,\n    fontSize,\n    backgroundColor,\n    align: textAlign,\n    indent: textIndent,\n    link: instance.src,\n    characterSpacing: letterSpacing,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline',\n    underlineColor: textDecorationColor || color,\n    strike: textDecoration === 'line-through',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || color,\n    lineHeight: lineHeight ? lineHeight * fontSize : null,\n  };\n\n  instance.children.forEach(child => {\n    if (isImage(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: {\n          ...attributes,\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data,\n          },\n        },\n      });\n    } else if (isTextInstance(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes,\n      });\n    } else {\n      if (child) {\n        fragments.push(...getFragments(child));\n      }\n    }\n  });\n\n  for (const preprocessor of PREPROCESSORS) {\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} instance node\n * @returns {Object} attributed string\n */\nconst getAttributedString = instance =>\n  AttributedString.fromFragments(getFragments(instance));\n\nexport default getAttributedString;\n","import * as R from 'ramda';\nimport layoutEngine from '@react-pdf/textkit/layout';\nimport linebreaker from '@react-pdf/textkit/engines/linebreaker';\nimport justification from '@react-pdf/textkit/engines/justification';\nimport textDecoration from '@react-pdf/textkit/engines/textDecoration';\nimport scriptItemizer from '@react-pdf/textkit/engines/scriptItemizer';\nimport wordHyphenation from '@react-pdf/textkit/engines/wordHyphenation';\n\nimport Font from '../font';\nimport fontSubstitution from './fontSubstitution';\nimport getAttributedString from './getAttributedString';\n\nconst engines = {\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution,\n};\n\nconst engine = layoutEngine(engines);\n\n/**\n * Get layout container for specific text node\n *\n * @param {Object} node\n * @param {Number} width\n * @param {Number} height\n * @returns {Object} layout container\n */\nconst getContainer = (node, width, height) => {\n  const maxLines = R.path(['style', 'maxLines'], node);\n  const textOverflow = R.path(['style', 'textOverflow'], node);\n\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow,\n  };\n};\n\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = node => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  hyphenationCallback: Font.getHyphenationCallback(),\n  shrinkWhitespaceFactor: { before: -0.5, after: -0.5 },\n});\n\n/**\n * Get text lines for given node\n *\n * @param {Object} node\n * @param {Number} container width\n * @param {Number} container height\n * @returns {Array} layout lines\n */\nconst layoutText = R.compose(\n  R.reduce(R.concat, []),\n  R.converge(engine, [getAttributedString, getContainer, getLayoutOptions]),\n);\n\nexport default layoutText;\n","import * as R from 'ramda';\n\nimport isSvg from '../node/isSvg';\nimport isText from '../node/isText';\nimport layoutText from '../text/layoutText';\n\nconst isNotSvg = R.complement(isSvg);\n\nconst hasLines = node =>\n  node.props.fixed ? !R.isEmpty(node.lines) : !!node.lines;\n\nconst shouldLayoutText = node => isText(node) && !hasLines(node);\n\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layouted node\n */\nconst resolveTextLayout = node =>\n  R.compose(\n    R.evolve({\n      children: R.map(R.when(isNotSvg, resolveTextLayout)),\n    }),\n    R.when(\n      shouldLayoutText,\n      R.compose(\n        R.converge(R.assoc('lines'), [\n          R.converge(layoutText, [\n            R.identity,\n            R.path(['box', 'width']),\n            R.path(['box', 'height']),\n          ]),\n          R.identity,\n        ]),\n      ),\n    ),\n  )(node);\n\nexport default resolveTextLayout;\n","import * as R from 'ramda';\n\nimport isSvg from '../node/isSvg';\nimport { INHERITED_PROPERTIES } from '../constants';\n\n/**\n * Get styles sub group of inherited properties\n *\n * @param {Object} style object\n * @returns {Object} style object only with inherited properties\n */\nconst getInheritStyles = R.compose(\n  R.pick(INHERITED_PROPERTIES),\n  R.propOr({}, 'style'),\n);\n\n/**\n * Merges styles with node\n *\n * @param {Object} style object\n * @param {Object} node\n * @returns {Object} node with styles merged\n */\nconst mergeStyles = styles =>\n  R.evolve({\n    style: R.merge(styles),\n  });\n\n/**\n * Inherit style values from the root to the leafs\n *\n * @param {Object} document root\n * @returns {Object} document root with inheritance\n *\n */\nconst resolveInheritance = node => {\n  if (isSvg(node)) return node;\n\n  const inheritStyles = getInheritStyles(node);\n\n  return R.evolve({\n    children: R.map(\n      R.compose(\n        resolveInheritance,\n        mergeStyles(inheritStyles),\n      ),\n    ),\n  })(node);\n};\n\nexport default resolveInheritance;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport firstPass from '../utils/firstPass';\n\nconst getComputedMargin = edge => node => {\n  const yogaNode = node._yogaNode;\n  return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} margins\n */\nconst getMargin = R.applySpec({\n  marginTop: firstPass(\n    getComputedMargin(Yoga.EDGE_TOP),\n    R.path(['box', 'marginTop']),\n    R.path(['style', 'marginTop']),\n    R.path(['style', 'marginVertical']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n  marginRight: firstPass(\n    getComputedMargin(Yoga.EDGE_RIGHT),\n    R.path(['box', 'marginRight']),\n    R.path(['style', 'marginRight']),\n    R.path(['style', 'marginHorizontal']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n  marginBottom: firstPass(\n    getComputedMargin(Yoga.EDGE_BOTTOM),\n    R.path(['box', 'marginBottom']),\n    R.path(['style', 'marginBottom']),\n    R.path(['style', 'marginVertical']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n  marginLeft: firstPass(\n    getComputedMargin(Yoga.EDGE_LEFT),\n    R.path(['box', 'marginLeft']),\n    R.path(['style', 'marginLeft']),\n    R.path(['style', 'marginHorizontal']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n});\n\nexport default getMargin;\n","import * as R from 'ramda';\n\nconst getTop = yogaNode => (yogaNode ? yogaNode.getComputedTop() : 0);\nconst getRight = yogaNode => (yogaNode ? yogaNode.getComputedRight() : 0);\nconst getBottom = yogaNode => (yogaNode ? yogaNode.getComputedBottom() : 0);\nconst getLeft = yogaNode => (yogaNode ? yogaNode.getComputedLeft() : 0);\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} position\n */\nconst getPosition = node => {\n  const yogaNode = node._yogaNode;\n\n  return R.applySpec({\n    top: getTop,\n    right: getRight,\n    bottom: getBottom,\n    left: getLeft,\n  })(yogaNode);\n};\n\nexport default getPosition;\n","const DEFAULT_DIMENSION = {\n  width: 0,\n  height: 0,\n};\n\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} dimensions\n */\nconst getDimension = node => {\n  const yogaNode = node._yogaNode;\n\n  if (!yogaNode) return DEFAULT_DIMENSION;\n\n  return {\n    width: yogaNode.getComputedWidth(),\n    height: yogaNode.getComputedHeight(),\n  };\n};\n\nexport default getDimension;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nconst getComputedBorder = edge => yogaNode =>\n  yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} border widths\n */\nconst getBorderWidth = node => {\n  const yogaNode = node._yogaNode;\n\n  return R.applySpec({\n    borderTopWidth: getComputedBorder(Yoga.EDGE_TOP),\n    borderRightWidth: getComputedBorder(Yoga.EDGE_RIGHT),\n    borderBottomWidth: getComputedBorder(Yoga.EDGE_BOTTOM),\n    borderLeftWidth: getComputedBorder(Yoga.EDGE_LEFT),\n  })(yogaNode);\n};\n\nexport default getBorderWidth;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param {String} display\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setDisplay = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      yogaNode.setDisplay(\n        value === 'none' ? Yoga.DISPLAY_NONE : Yoga.DISPLAY_FLEX,\n      );\n    }\n  });\n\nexport default setDisplay;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param {String} overflow value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setOverflow = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('hidden'), R.always(Yoga.OVERFLOW_HIDDEN)],\n        [R.equals('scroll'), R.always(Yoga.OVERFLOW_SCROLL)],\n        [R.T, R.always(Yoga.OVERFLOW_VISIBLE)],\n      ])(value);\n\n      yogaNode.setOverflow(yogaValue);\n    }\n  });\n\nexport default setOverflow;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param {String} flex wrap value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexWrap = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('wrap'), R.always(Yoga.WRAP_WRAP)],\n        [R.equals('wrap-reverse'), R.always(Yoga.WRAP_WRAP_REVERSE)],\n        [R.T, R.always(Yoga.WRAP_NO_WRAP)],\n      ])(value);\n\n      yogaNode.setFlexWrap(yogaValue);\n    }\n  });\n\nexport default setFlexWrap;\n","import * as R from 'ramda';\n\nimport upperFirst from '../utils/upperFirst';\nimport matchPercent from '../utils/matchPercent';\n\nconst isNotNil = R.complement(R.isNil);\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {String} property\n * @param {Number} edge\n * @param {any} value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setYogaValue = (attr, edge) => value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      const hasEdge = isNotNil(edge);\n      const fixedMethod = `set${upperFirst(attr)}`;\n      const autoMethod = `${fixedMethod}Auto`;\n      const percentMethod = `${fixedMethod}Percent`;\n      const percent = matchPercent(value);\n\n      if (percent && !yogaNode[percentMethod]) {\n        throw new Error(`You can't pass percentage values to ${attr} property`);\n      }\n\n      if (percent) {\n        hasEdge\n          ? yogaNode[percentMethod](edge, percent.value)\n          : yogaNode[percentMethod](percent.value);\n      } else if (value === 'auto') {\n        hasEdge ? yogaNode[autoMethod](edge) : yogaNode[autoMethod]();\n      } else {\n        hasEdge\n          ? yogaNode[fixedMethod](edge, value)\n          : yogaNode[fixedMethod](value);\n      }\n    }\n  });\n\nexport default setYogaValue;\n","import * as R from 'ramda';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param {Number} flex grow value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexGrow = R.compose(\n  setYogaValue('flexGrow'),\n  R.defaultTo(0),\n);\n\nexport default setFlexGrow;\n","import setYogaValue from './setYogaValue';\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param {Number} flex basis value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\n\nexport default setFlexBasis;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport upperFirst from '../utils/upperFirst';\n\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {String} specific align property\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlign = attr => value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('flex-start'), R.always(Yoga.ALIGN_FLEX_START)],\n        [R.equals('center'), R.always(Yoga.ALIGN_CENTER)],\n        [R.equals('flex-end'), R.always(Yoga.ALIGN_FLEX_END)],\n        [R.equals('stretch'), R.always(Yoga.ALIGN_STRETCH)],\n        [R.equals('baseline'), R.always(Yoga.ALIGN_BASELINE)],\n        [R.equals('space-between'), R.always(Yoga.ALIGN_SPACE_BETWEEN)],\n        [R.equals('space-around'), R.always(Yoga.ALIGN_SPACE_AROUND)],\n        [\n          R.T,\n          R.always(attr === 'items' ? Yoga.ALIGN_STRETCH : Yoga.ALIGN_AUTO),\n        ],\n      ])(value);\n\n      yogaNode[`setAlign${upperFirst(attr)}`](yogaValue);\n    }\n  });\n\nexport default setAlign;\n","import setAlign from './setAlign';\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlignSelf = setAlign('self');\n\nexport default setAlignSelf;\n","import setAlign from './setAlign';\n\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlignItems = setAlign('items');\n\nexport default setAlignItems;\n","import * as R from 'ramda';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param {Number} flex shrink value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexShrink = R.compose(\n  setYogaValue('flexShrink'),\n  R.defaultTo(1),\n);\n\nexport default setFlexShrink;\n","import * as R from 'ramda';\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param {Number} ratio\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAspectRatio = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      yogaNode.setAspectRatio(value);\n    }\n  });\n\nexport default setAspectRatio;\n","import setAlign from './setAlign';\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlignContent = setAlign('content');\n\nexport default setAlignContent;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param {String} position type\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setPositionType = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      yogaNode.setPositionType(\n        value === 'absolute'\n          ? Yoga.POSITION_TYPE_ABSOLUTE\n          : Yoga.POSITION_TYPE_RELATIVE,\n      );\n    }\n  });\n\nexport default setPositionType;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nconst isRow = R.equals('row');\nconst isRowReverse = R.equals('row-reverse');\nconst isColumnReverse = R.equals('column-reverse');\n\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {String} flex direction value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexDirection = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      const yogaValue = R.cond([\n        [isRow, R.always(Yoga.FLEX_DIRECTION_ROW)],\n        [isRowReverse, R.always(Yoga.FLEX_DIRECTION_ROW_REVERSE)],\n        [isColumnReverse, R.always(Yoga.FLEX_DIRECTION_COLUMN_REVERSE)],\n        [R.T, R.always(Yoga.FLEX_DIRECTION_COLUMN)],\n      ])(value);\n\n      yogaNode.setFlexDirection(yogaValue);\n    }\n  });\n\nexport default setFlexDirection;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param {String} justify content value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setJustifyContent = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('center'), R.always(Yoga.JUSTIFY_CENTER)],\n        [R.equals('flex-end'), R.always(Yoga.JUSTIFY_FLEX_END)],\n        [R.equals('space-between'), R.always(Yoga.JUSTIFY_SPACE_BETWEEN)],\n        [R.equals('space-around'), R.always(Yoga.JUSTIFY_SPACE_AROUND)],\n        [R.equals('space-evenly'), R.always(Yoga.JUSTIFY_SPACE_EVENLY)],\n        [R.T, R.always(Yoga.JUSTIFY_FLEX_START)],\n      ])(value);\n\n      yogaNode.setJustifyContent(yogaValue);\n    }\n  });\n\nexport default setJustifyContent;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param {Number} margin top\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginTop = setYogaValue('margin', Yoga.EDGE_TOP);\n\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param {Number} margin right\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginRight = setYogaValue('margin', Yoga.EDGE_RIGHT);\n\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param {Number} margin bottom\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginBottom = setYogaValue('margin', Yoga.EDGE_BOTTOM);\n\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param {Number} margin left\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginLeft = setYogaValue('margin', Yoga.EDGE_LEFT);\n\n/**\n * Set all margins at once\n *\n * @param {Number} margin\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMargin = margin =>\n  R.tap(node => {\n    setMarginTop(margin)(node);\n    setMarginRight(margin)(node);\n    setMarginBottom(margin)(node);\n    setMarginLeft(margin)(node);\n  });\n\nexport default setMargin;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param {Number} padding top\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingTop = setYogaValue('padding', Yoga.EDGE_TOP);\n\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param {Number} padding right\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingRight = setYogaValue('padding', Yoga.EDGE_RIGHT);\n\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param {Number} padding bottom\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingBottom = setYogaValue('padding', Yoga.EDGE_BOTTOM);\n\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param {Number} padding left\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingLeft = setYogaValue('padding', Yoga.EDGE_LEFT);\n\n/**\n * Set all paddings at once\n *\n * @param {Number} margin\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPadding = padding =>\n  R.tap(node => {\n    setPaddingTop(padding)(node);\n    setPaddingRight(padding)(node);\n    setPaddingBottom(padding)(node);\n    setPaddingLeft(padding)(node);\n  });\n\nexport default setPadding;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param {Number} border top width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderTop = setYogaValue('border', Yoga.EDGE_TOP);\n\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param {Number} border right width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderRight = setYogaValue('border', Yoga.EDGE_RIGHT);\n\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param {Number} border bottom width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderBottom = setYogaValue('border', Yoga.EDGE_BOTTOM);\n\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param {Number} border left width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderLeft = setYogaValue('border', Yoga.EDGE_LEFT);\n\n/**\n * Set all border widths at once\n *\n * @param {Number} border width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorder = width =>\n  R.tap(node => {\n    setBorderTop(width)(node);\n    setBorderRight(width)(node);\n    setBorderBottom(width)(node);\n    setBorderLeft(width)(node);\n  });\n\nexport default setBorder;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param {Number} position top\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionTop = setYogaValue('position', Yoga.EDGE_TOP);\n\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param {Number} position right\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionRight = setYogaValue('position', Yoga.EDGE_RIGHT);\n\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param {Number} position bottom\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionBottom = setYogaValue('position', Yoga.EDGE_BOTTOM);\n\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param {Number} position left\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionLeft = setYogaValue('position', Yoga.EDGE_LEFT);\n\n/**\n * Set all positions at once\n *\n * @param {Number} position\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPosition = position =>\n  R.tap(node => {\n    setPositionTop(position)(node);\n    setPositionRight(position)(node);\n    setPositionBottom(position)(node);\n    setPositionLeft(position)(node);\n  });\n\nexport default setPosition;\n","import setYogaValue from './setYogaValue';\n\n/**\n * Set width to node's Yoga instance\n *\n * @param {Number} width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setWidth = setYogaValue('width');\n\n/**\n * Set min width to node's Yoga instance\n *\n * @param {Number} min width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMinWidth = setYogaValue('minWidth');\n\n/**\n * Set max width to node's Yoga instance\n *\n * @param {Number} max width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMaxWidth = setYogaValue('maxWidth');\n\n/**\n * Set height to node's Yoga instance\n *\n * @param {Number} height\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setHeight = setYogaValue('height');\n\n/**\n * Set min height to node's Yoga instance\n *\n * @param {Number} min height\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMinHeight = setYogaValue('minHeight');\n\n/**\n * Set max height to node's Yoga instance\n *\n * @param {Number} max height\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMaxHeight = setYogaValue('maxHeight');\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nconst getAspectRatio = viewbox => {\n  if (!viewbox) return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n\n/**\n * Yoga svg measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\nconst measureCanvas = (page, node, width, widthMode, height, heightMode) => {\n  const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_EXACTLY ||\n    widthMode === Yoga.MEASURE_MODE_AT_MOST\n  ) {\n    return { width, height: width / aspectRatio };\n  }\n\n  if (heightMode === Yoga.MEASURE_MODE_EXACTLY) {\n    return { width: height * aspectRatio };\n  }\n\n  return {};\n};\n\nexport default R.curryN(6, measureCanvas);\n","import AttributedString from '@react-pdf/textkit/attributedString';\n\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {Number} lines width\n */\nconst linesWidth = node => {\n  if (!node.lines) return -1;\n  return Math.max(\n    ...node.lines.map(line => AttributedString.advanceWidth(line)),\n  );\n};\n\nexport default linesWidth;\n","/**\n * Get lines height (if any)\n *\n * @param {Object} node\n * @returns {Number} lines height\n */\nconst linesHeight = node => {\n  if (!node.lines) return -1;\n  return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\nexport default linesHeight;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport layoutText from './layoutText';\nimport linesWidth from './linesWidth';\nimport linesHeight from './linesHeight';\n\n/**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} text width and height\n */\nconst measureText = (page, node, width, widthMode, height, heightMode) => {\n  if (widthMode === Yoga.MEASURE_MODE_EXACTLY) {\n    if (!node.lines) node.lines = layoutText(node, width, height);\n\n    return { height: linesHeight(node) };\n  }\n\n  if (widthMode === Yoga.MEASURE_MODE_AT_MOST) {\n    if (!node.lines) node.lines = layoutText(node, width, height);\n\n    return {\n      height: linesHeight(node),\n      width: Math.min(width, linesWidth(node)),\n    };\n  }\n\n  return {};\n};\n\nexport default R.curryN(6, measureText);\n","import * as R from 'ramda';\n\n/**\n * Get image ratio\n *\n * @param {Object} image node\n * @returns {Number} image ratio\n */\nconst getRatio = R.ifElse(\n  R.hasPath(['image', 'data']),\n  node => node.image.width / node.image.height,\n  R.always(1),\n);\n\nexport default getRatio;\n","import * as R from 'ramda';\n\n/**\n * Checks if page has auto height\n *\n * @param {Object} page\n * @returns {Boolean} is page height auto\n */\nconst isHeightAuto = R.pathSatisfies(R.isNil, ['box', 'height']);\n\nexport default isHeightAuto;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport getRatio from '../image/getRatio';\nimport getMargin from '../node/getMargin';\nimport getPadding from '../node/getPadding';\nimport isHeightAuto from '../page/isHeightAuto';\n\nconst SAFETY_HEIGHT = 10;\n\n/**\n * Yoga image measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} image width and height\n */\nconst measureImage = (page, node, width, widthMode, height, heightMode) => {\n  const imageRatio = getRatio(node);\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page)\n    ? Infinity\n    : page.box.height -\n      pagePadding.paddingTop -\n      pagePadding.paddingBottom -\n      imageMargin.marginTop -\n      imageMargin.marginBottom -\n      SAFETY_HEIGHT;\n\n  // Skip measure if image data not present yet\n  if (!node.image) return { width: 0, height: 0 };\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n    heightMode === Yoga.MEASURE_MODE_UNDEFINED\n  ) {\n    const scaledHeight = width / imageRatio;\n    return { height: Math.min(pageArea, scaledHeight) };\n  }\n\n  if (\n    heightMode === Yoga.MEASURE_MODE_EXACTLY &&\n    (widthMode === Yoga.MEASURE_MODE_AT_MOST ||\n      widthMode === Yoga.MEASURE_MODE_UNDEFINED)\n  ) {\n    return { width: Math.min(height * imageRatio, width) };\n  }\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n    heightMode === Yoga.MEASURE_MODE_AT_MOST\n  ) {\n    const scaledHeight = width / imageRatio;\n    return { height: Math.min(height, pageArea, scaledHeight) };\n  }\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_AT_MOST &&\n    heightMode === Yoga.MEASURE_MODE_AT_MOST\n  ) {\n    if (imageRatio > 1) {\n      return {\n        width: width,\n        height: Math.min(width / imageRatio, height),\n      };\n    } else {\n      return {\n        width: Math.min(height * imageRatio, width),\n        height: height,\n      };\n    }\n  }\n\n  return { height, width };\n};\n\nexport default R.curryN(6, measureImage);\n","import * as R from 'ramda';\n\nimport getMargin from '../node/getMargin';\nimport getPadding from '../node/getPadding';\nimport isHeightAuto from '../page/isHeightAuto';\n\nconst SAFETY_HEIGHT = 10;\n\nconst getMax = R.reduce(R.max, -Infinity);\n\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n  const ctx = {};\n  const points = [];\n\n  const nil = () => ctx;\n  const addPoint = (x, y) => points.push([x, y]);\n\n  const moveTo = R.compose(\n    nil,\n    addPoint,\n  );\n\n  const rect = (x, y, w, h) => {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n\n  const ellipse = (x, y, rx, ry) => {\n    ry = ry || rx;\n\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n\n    return ctx;\n  };\n\n  const polygon = (...pts) => {\n    points.push(...pts);\n    return nil();\n  };\n\n  // Change dimensions\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect;\n\n  // To be implemented\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil;\n\n  // These don't change dimensions\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n\n  ctx.getWidth = () =>\n    R.compose(\n      getMax,\n      R.pluck(0),\n    )(points);\n\n  ctx.getHeight = () =>\n    R.compose(\n      getMax,\n      R.pluck(1),\n    )(points);\n\n  return ctx;\n};\n\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\nconst measureCanvas = (page, node) => {\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page)\n    ? Infinity\n    : page.box.height -\n      pagePadding.paddingTop -\n      pagePadding.paddingBottom -\n      imageMargin.marginTop -\n      imageMargin.marginBottom -\n      SAFETY_HEIGHT;\n\n  const ctx = measureCtx();\n\n  node.props.paint(ctx);\n\n  const width = ctx.getWidth();\n  const height = Math.min(pageArea, ctx.getHeight());\n\n  return { height, width };\n};\n\nexport default R.curryN(6, measureCanvas);\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport getMargin from '../node/getMargin';\nimport getPadding from '../node/getPadding';\nimport getPosition from '../node/getPosition';\nimport getDimension from '../node/getDimension';\nimport getBorderWidth from '../node/getBorderWidth';\nimport setDisplay from '../node/setDisplay';\nimport setOverflow from '../node/setOverflow';\nimport setFlexWrap from '../node/setFlexWrap';\nimport setFlexGrow from '../node/setFlexGrow';\nimport setFlexBasis from '../node/setFlexBasis';\nimport setAlignSelf from '../node/setAlignSelf';\nimport setAlignItems from '../node/setAlignItems';\nimport setFlexShrink from '../node/setFlexShrink';\nimport setAspectRatio from '../node/setAspectRatio';\nimport setAlignContent from '../node/setAlignContent';\nimport setPositionType from '../node/setPositionType';\nimport setFlexDirection from '../node/setFlexDirection';\nimport setJustifyContent from '../node/setJustifyContent';\nimport {\n  setMarginTop,\n  setMarginRight,\n  setMarginBottom,\n  setMarginLeft,\n} from '../node/setMargin';\nimport {\n  setPaddingTop,\n  setPaddingRight,\n  setPaddingBottom,\n  setPaddingLeft,\n} from '../node/setPadding';\nimport {\n  setBorderTop,\n  setBorderRight,\n  setBorderBottom,\n  setBorderLeft,\n} from '../node/setBorderWidth';\nimport {\n  setPositionTop,\n  setPositionRight,\n  setPositionBottom,\n  setPositionLeft,\n} from '../node/setPosition';\nimport {\n  setWidth,\n  setHeight,\n  setMinWidth,\n  setMaxWidth,\n  setMinHeight,\n  setMaxHeight,\n} from '../node/setDimension';\nimport isSvg from '../node/isSvg';\nimport isText from '../node/isText';\nimport isNote from '../node/isNote';\nimport isPage from '../node/isPage';\nimport isImage from '../node/isImage';\nimport isCanvas from '../node/isCanvas';\nimport measureSvg from '../svg/measureSvg';\nimport measureText from '../text/measureText';\nimport measureImage from '../image/measureImage';\nimport measureCanvas from '../canvas/measureCanvas';\nimport isTextInstance from '../node/isTextInstance';\n\nconst YOGA_NODE = '_yogaNode';\nconst YOGA_CONFIG = Yoga.Config.create();\n\nYOGA_CONFIG.setPointScaleFactor(0);\n\nconst setNodeHeight = node =>\n  R.ifElse(\n    isPage,\n    setHeight(node.box.height),\n    setHeight(node.box.height || node.style.height),\n  );\n\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst setYogaValues = R.tap(node => {\n  R.compose(\n    setNodeHeight(node),\n    setWidth(node.style.width),\n    setMinWidth(node.style.minWidth),\n    setMaxWidth(node.style.maxWidth),\n    setMinHeight(node.style.minHeight),\n    setMaxHeight(node.style.maxHeight),\n    setMarginTop(node.style.marginTop),\n    setMarginRight(node.style.marginRight),\n    setMarginBottom(node.style.marginBottom),\n    setMarginLeft(node.style.marginLeft),\n    setPaddingTop(node.style.paddingTop),\n    setPaddingRight(node.style.paddingRight),\n    setPaddingBottom(node.style.paddingBottom),\n    setPaddingLeft(node.style.paddingLeft),\n    setPositionType(node.style.position),\n    setPositionTop(node.style.top),\n    setPositionRight(node.style.right),\n    setPositionBottom(node.style.bottom),\n    setPositionLeft(node.style.left),\n    setBorderTop(node.style.borderTopWidth),\n    setBorderRight(node.style.borderRightWidth),\n    setBorderBottom(node.style.borderBottomWidth),\n    setBorderLeft(node.style.borderLeftWidth),\n    setDisplay(node.style.display),\n    setFlexDirection(node.style.flexDirection),\n    setAlignSelf(node.style.alignSelf),\n    setAlignContent(node.style.alignContent),\n    setAlignItems(node.style.alignItems),\n    setJustifyContent(node.style.justifyContent),\n    setFlexWrap(node.style.flexWrap),\n    setOverflow(node.style.overflow),\n    setAspectRatio(node.style.aspectRatio),\n    setFlexBasis(node.style.flexBasis),\n    setFlexGrow(node.style.flexGrow),\n    setFlexShrink(node.style.flexShrink),\n  )(node);\n});\n\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent\n * @param {Object} node\n * @param {Object} node\n */\nconst insertYogaNodes = parent =>\n  R.tap(child => parent.insertChild(child[YOGA_NODE], parent.getChildCount()));\n\nconst setMeasureFunc = page => node => {\n  const yogaNode = node[YOGA_NODE];\n\n  if (isText(node)) {\n    yogaNode.setMeasureFunc(measureText(page, node));\n  }\n\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc(measureImage(page, node));\n  }\n\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc(measureCanvas(page, node));\n  }\n\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc(measureSvg(page, node));\n  }\n\n  return node;\n};\n\nconst isNotText = R.complement(isText);\nconst isNotNote = R.complement(isNote);\nconst isNotSvg = R.complement(isSvg);\nconst isNotTextInstance = R.complement(isTextInstance);\nconst isLayoutElement = R.allPass([isNotText, isNotNote, isNotSvg]);\n\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\nconst createYogaNodes = page => node => {\n  const yogaNode = Yoga.Node.createWithConfig(YOGA_CONFIG);\n\n  return R.compose(\n    setMeasureFunc(page),\n    R.when(\n      isLayoutElement,\n      R.evolve({\n        children: R.map(\n          R.compose(\n            insertYogaNodes(yogaNode),\n            createYogaNodes(page),\n          ),\n        ),\n      }),\n    ),\n    setYogaValues,\n    R.assoc(YOGA_NODE, yogaNode),\n  )(node);\n};\n\n/**\n * Performs yoga calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst calculateLayout = R.tap(page => page[YOGA_NODE].calculateLayout());\n\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\nconst persistDimensions = node => {\n  return R.evolve({\n    children: R.map(R.when(isNotTextInstance, persistDimensions)),\n    box: R.always(\n      R.mergeAll([\n        getPadding(node),\n        getMargin(node),\n        getBorderWidth(node),\n        getPosition(node),\n        getDimension(node),\n      ]),\n    ),\n  })(node);\n};\n\n/**\n * Removes and destroys yoga node frm document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\nconst destroyYogaNodes = node => {\n  return R.compose(\n    R.dissoc(YOGA_NODE),\n    R.tap(n => Yoga.Node.destroy(n[YOGA_NODE])),\n    R.evolve({ children: R.map(R.when(isLayoutElement, destroyYogaNodes)) }),\n  )(node);\n};\n\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\nexport const resolvePageDimensions = page =>\n  R.ifElse(\n    R.isNil,\n    R.always(null),\n    R.compose(\n      destroyYogaNodes,\n      persistDimensions,\n      calculateLayout,\n      createYogaNodes(page),\n    ),\n  )(page);\n\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} root object\n * @returns {Object} root object with correct 'box' layout attributes\n */\nconst resolveDimensions = node =>\n  R.evolve({\n    children: R.map(resolvePageDimensions),\n  })(node);\n\nexport default resolveDimensions;\n","import * as R from 'ramda';\n\nimport isText from '../node/isText';\nimport splitText from '../text/splitText';\nimport splitNode from '../node/splitNode';\nimport createInstance from '../node/createInstance';\nimport shouldNodeBreak from '../node/shouldBreak';\nimport getContentArea from '../page/getContentArea';\nimport resolveTextLayout from './resolveTextLayout';\nimport resolveInheritance from './resolveInheritance';\nimport { resolvePageDimensions } from './resolveDimensions';\n\n// Prevent splitting elements by low decimal numbers\nconst SAFTY_THRESHOLD = 0.001;\n\nconst assingChildren = R.assoc('children');\n\nconst getTop = R.pathOr(0, ['box', 'top']);\n\nconst getHeight = R.path(['box', 'height']);\n\nconst getChildren = R.propOr([], 'children');\n\nconst isElementOutside = R.useWith(R.lte, [R.identity, getTop]);\n\nconst isFixed = R.pathEq(['props', 'fixed'], true);\n\nconst allFixed = R.all(isFixed);\n\nconst isDynamic = R.hasPath(['props', 'render']);\n\nconst relayoutPage = R.compose(\n  resolveTextLayout,\n  resolveInheritance,\n  resolvePageDimensions,\n);\n\nconst splitView = (node, height) => {\n  const [currentNode, nextNode] = splitNode(node, height);\n  const [currentChilds, nextChildren] = splitChildren(height, node);\n\n  return [\n    assingChildren(currentChilds)(currentNode),\n    assingChildren(nextChildren)(nextNode),\n  ];\n};\n\nconst split = R.ifElse(isText, splitText, splitView);\n\nconst splitNodes = (height, nodes) => {\n  const currentChildren = [];\n  const nextChildren = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const child = nodes[i];\n    const futureNodes = nodes.slice(i + 1);\n    const futureFixedNodes = R.filter(isFixed, futureNodes);\n\n    const nodeTop = getTop(child);\n    const nodeHeight = getHeight(child);\n    const isOutside = isElementOutside(height, child);\n    const shouldBreak = shouldNodeBreak(child, futureNodes, height);\n    const shouldSplit = height + SAFTY_THRESHOLD < nodeTop + nodeHeight;\n\n    if (isFixed(child)) {\n      nextChildren.push(child);\n      currentChildren.push(child);\n      continue;\n    }\n\n    if (isOutside) {\n      const next = R.evolve({ box: { top: R.subtract(R.__, height) } })(child);\n      nextChildren.push(next);\n      continue;\n    }\n\n    if (shouldBreak) {\n      const next = R.evolve({\n        box: { top: R.subtract(R.__, height) },\n        props: R.evolve({ break: R.always(false) }),\n      })(child);\n\n      currentChildren.push(...futureFixedNodes);\n      nextChildren.push(next, ...futureNodes);\n      break;\n    }\n\n    if (shouldSplit) {\n      const [currentChild, nextChild] = split(child, height);\n\n      if (currentChild) currentChildren.push(currentChild);\n      if (nextChild) nextChildren.push(nextChild);\n\n      continue;\n    }\n\n    currentChildren.push(child);\n  }\n\n  return [currentChildren, nextChildren];\n};\n\nconst splitChildren = (height, node) => {\n  const children = getChildren(node);\n  const availableHeight = height - getTop(node);\n  return splitNodes(availableHeight, children);\n};\n\nconst splitPage = (page, pageNumber) => {\n  const contentArea = getContentArea(page);\n  const height = R.path(['style', 'height'], page);\n  const dynamicPage = resolveDynamicPage({ pageNumber }, page);\n\n  const [currentChilds, nextChilds] = splitNodes(\n    contentArea,\n    dynamicPage.children,\n  );\n\n  const currentPage = R.compose(\n    relayoutPage,\n    assingChildren(currentChilds),\n    R.assocPath(['box', 'height'], height),\n  )(page);\n\n  if (R.isEmpty(nextChilds) || allFixed(nextChilds)) return [currentPage, null];\n\n  const nextPage = R.compose(\n    relayoutPage,\n    assingChildren(nextChilds),\n    R.dissocPath(['box', 'height']),\n  )(page);\n\n  return [currentPage, nextPage];\n};\n\nconst shouldResolveDynamicNodes = node =>\n  R.either(\n    isDynamic,\n    R.compose(\n      R.any(shouldResolveDynamicNodes),\n      R.propOr([], 'children'),\n    ),\n  )(node);\n\nconst resolveDynamicPage = (props, page) =>\n  R.when(\n    shouldResolveDynamicNodes,\n    R.compose(\n      relayoutPage,\n      resolveDynamicNodes(props),\n    ),\n  )(page);\n\nconst resolveDynamicNodes = props => node => {\n  const isNodeDynamic = R.always(isDynamic(node));\n\n  const resolveRender = () => {\n    const res = node.props.render(props);\n    return [createInstance(res)];\n  };\n\n  return R.evolve(\n    {\n      children: R.ifElse(\n        isNodeDynamic,\n        resolveRender,\n        R.map(resolveDynamicNodes(props)),\n      ),\n      lines: R.when(isNodeDynamic, R.always([])),\n    },\n    node,\n  );\n};\n\nconst paginate = (page, pageNumber) => {\n  if (!page) return [];\n\n  let splittedPage = splitPage(page, pageNumber);\n\n  const pages = [splittedPage[0]];\n  let nextPage = splittedPage[1];\n\n  while (nextPage !== null) {\n    splittedPage = splitPage(nextPage, pageNumber + pages.length);\n\n    pages.push(splittedPage[0]);\n    nextPage = splittedPage[1];\n  }\n\n  return pages;\n};\n\nconst resolvePageIndices = (page, pageNumber, pages) => {\n  const totalPages = pages.length;\n  return resolveDynamicPage({ pageNumber: pageNumber + 1, totalPages }, page);\n};\n\nconst resolvePagination = doc => {\n  let pages = [];\n  let pageNumber = 1;\n\n  for (let i = 0; i < doc.children.length; i++) {\n    const page = doc.children[i];\n    const subpages = paginate(page, pageNumber);\n\n    pageNumber += subpages.length;\n    pages = pages.concat(subpages);\n  }\n\n  pages = pages.map(resolvePageIndices);\n\n  return assingChildren(pages, doc);\n};\n\nexport default resolvePagination;\n","import * as R from 'ramda';\n\n/**\n * Removes margins on node\n *\n * @param {Object} node\n * @returns {Object} node without margins\n */\nconst removeMargins = R.compose(\n  R.dissocPath(['style', 'margin']),\n  R.dissocPath(['style', 'marginTop']),\n  R.dissocPath(['style', 'marginRight']),\n  R.dissocPath(['style', 'marginBottom']),\n  R.dissocPath(['style', 'marginLeft']),\n  R.dissocPath(['style', 'marginHorizontal']),\n  R.dissocPath(['style', 'marginVertical']),\n);\n\nexport default removeMargins;\n","import * as R from 'ramda';\n\nimport removeMargins from '../node/removeMargins';\n\n/**\n * Remove page margins\n *\n * @param {Object} document root\n * @returns {Object} document root without margins on pages\n */\nconst resolvePageMargins = R.evolve({\n  children: R.map(removeMargins),\n});\n\nexport default resolvePageMargins;\n","import * as R from 'ramda';\n\nimport isNote from '../node/isNote';\nimport isTextInstance from '../node/isTextInstance';\n\n/**\n * Get node underlying text value\n *\n * @param {Object} node\n * @returns {String} node text content\n */\nconst getNodeText = node =>\n  R.cond([\n    [R.is(String), R.identity],\n    [isTextInstance, R.prop('value')],\n    [\n      R.T,\n      R.compose(\n        getNodesText,\n        R.propOr([], 'children'),\n      ),\n    ],\n  ])(node);\n\n/**\n * Get underlying text value of several nodes\n *\n * @param {Array} nodes\n * @returns {String} nodes text content\n */\nconst getNodesText = R.compose(\n  R.join(''),\n  R.map(getNodeText),\n);\n\n/**\n * Transforms string to text instance\n *\n * @param {String} value\n * @returns {Array} text intance\n */\nconst wrapTextInstance = value => [{ type: 'TEXT_INSTANCE', value }];\n\n/**\n * Cast Note children as a text instance\n *\n * @param {Object} node\n * @returns {Object} node with resolved note children\n */\nconst resolveNoteChildren = node =>\n  R.ifElse(\n    isNote,\n    R.evolve({\n      children: R.compose(\n        wrapTextInstance,\n        getNodesText,\n      ),\n    }),\n    R.evolve({ children: R.map(resolveNoteChildren) }),\n  )(node);\n\nexport default resolveNoteChildren;\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\n/*\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param {Object} page container\n * @param {String} padding value\n * @returns {Object} translated padding value\n */\nconst resolvePageHorizontalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.width : value;\n};\n\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param {Object} page container\n * @param {String} padding value\n * @returns {Object} translated padding value\n */\nconst resolvePageVerticalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.height : value;\n};\n\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param {Object} page\n * @returns {Object} page with fixed paddings\n */\nconst resolvePagePaddings = page => {\n  const container = R.pathOr({}, ['props', 'size'], page);\n\n  return R.evolve({\n    style: R.evolve({\n      paddingLeft: resolvePageHorizontalPadding(container),\n      paddingRight: resolvePageHorizontalPadding(container),\n      paddingTop: resolvePageVerticalPadding(container),\n      paddingBottom: resolvePageVerticalPadding(container),\n    }),\n  })(page);\n};\n\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param {Object} document root\n * @returns {Object} document root with translated page paddings\n */\nexport default R.evolve({\n  children: R.map(resolvePagePaddings),\n});\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\n/**\n *\n * @param {Object} container width and height\n * @param {String | Number} value border radius value\n * @returns {Number} fixed border radius value\n */\nconst resolveRadius = container => value => {\n  const match = matchPercent(value);\n  return match\n    ? match.percent * Math.min(container.width, container.height)\n    : value;\n};\n\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolvePercentRadius = node =>\n  R.evolve({\n    children: R.map(resolvePercentRadius),\n    style: R.evolve({\n      borderTopLeftRadius: resolveRadius(node.box),\n      borderTopRightRadius: resolveRadius(node.box),\n      borderBottomRightRadius: resolveRadius(node.box),\n      borderBottomLeftRadius: resolveRadius(node.box),\n    }),\n  })(node);\n\nexport default resolvePercentRadius;\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\n/**\n * Transform percent height into fixed\n *\n * @param {String | number} height\n * @return {number} height\n */\nconst transformHeight = pageArea => height => {\n  const match = matchPercent(height);\n  return match ? match.percent * pageArea : height;\n};\n\n/**\n * Get page area (height minus paddings)\n *\n * @param {Object} page\n * @return {number} page area\n */\nconst getPageArea = page => {\n  const pageHeight = R.path(['style', 'height'], page);\n  const pagePaddingTop = R.pathOr(0, ['style', 'paddingTop'], page);\n  const pagePaddingBottom = R.pathOr(0, ['style', 'paddingBottom'], page);\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n\n/**\n * Checks if page has height\n *\n * @param {Object} page\n * @return {boolean} page has height\n */\nconst hasHeight = R.hasPath(['style', 'height']);\n\n/**\n * Transform node percent height to fixed\n *\n * @param {Object} page\n * @param {Object} node\n * @return {Object} transformed node\n */\nconst resolveNodePercentHeight = page => node => {\n  if (hasHeight(page)) {\n    const pageArea = getPageArea(page);\n    return R.evolve({ style: { height: transformHeight(pageArea) } })(node);\n  }\n\n  return node;\n};\n\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param {Object} page\n * @return {Object} transformed page\n */\nconst resolvePagePercentHeight = page =>\n  R.evolve({\n    children: R.map(resolveNodePercentHeight(page)),\n  })(page);\n\n/**\n * Transform all page immediate children with percent height to fixed\n *\n * @param {Object} document root\n * @return {Object} transformed document root\n */\nconst resolvePercentHeight = R.evolve({\n  children: R.map(resolvePagePercentHeight),\n});\n\nexport default resolvePercentHeight;\n","import * as R from 'ramda';\n\nimport { TEXT } from '../constants';\nimport isLink from '../node/isLink';\nimport isTextInstance from '../node/isTextInstance';\n\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {Boolean} has render prop?\n */\nconst hasRenderProp = R.hasPath(['props', 'render']);\n\n/**\n * Checks if all children of node are text instances\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\nconst hasTextInstanceChilds = R.compose(\n  R.all(isTextInstance),\n  R.propOr([], 'children'),\n);\n\n/**\n * If the Link has a string child or render prop, substitute the instance by a Text,\n * that will ultimately render the inline Link via the textkit PDF renderer.\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\nconst resolveLinkSubstitution = node =>\n  R.evolve({\n    children: R.map(\n      R.ifElse(\n        R.both(isLink, R.either(hasRenderProp, hasTextInstanceChilds)),\n        R.assoc('type', TEXT),\n        resolveLinkSubstitution,\n      ),\n    ),\n  })(node);\n\nexport default resolveLinkSubstitution;\n","import * as R from 'ramda';\n\n/**\n * Performs right-to-left function composition with async functions support\n *\n * @param  {...any} functions\n */\nconst asyncCompose = (...fns) => async value => {\n  for (const fn of R.reverse(fns)) value = await fn(value);\n  return value;\n};\n\nexport default asyncCompose;\n","// import * as R from 'ramda';\n\nimport resolveSvg from './resolveSvg';\nimport resolveZIndex from './resolveZIndex';\nimport resolveRulers from './resolveRulers';\nimport resolveAssets from './resolveAssets';\nimport resolveStyles from './resolveStyles';\nimport resolveOrigins from './resolveOrigins';\nimport resolvePageSizes from './resolvePageSizes';\nimport resolvePagination from './resolvePagination';\nimport resolveDimensions from './resolveDimensions';\nimport resolveTextLayout from './resolveTextLayout';\nimport resolveInheritance from './resolveInheritance';\nimport resolvePageMargins from './resolvePageMargins';\nimport resolveNoteChildren from './resolveNoteChildren';\nimport resolvePagePaddings from './resolvePagePaddings';\nimport resolvePercentRadius from './resolvePercentRadius';\nimport resolvePercentHeight from './resolvePercentHeight';\nimport resolveLinkSubstitution from './resolveLinkSubstitution';\nimport asyncCompose from '../utils/asyncCompose';\n\n// const startTimer = name => R.tap(() => console.time(name));\n// const endTimer = name => R.tap(() => console.timeEnd(name));\n\nconst layout = asyncCompose(\n  resolveZIndex,\n  resolveRulers,\n  resolveOrigins,\n  resolvePagination,\n  resolveTextLayout,\n  resolvePercentRadius,\n  resolveDimensions,\n  resolveSvg,\n  resolveAssets,\n  resolveInheritance,\n  resolvePercentHeight,\n  resolvePagePaddings,\n  resolveStyles,\n  resolveNoteChildren,\n  resolveLinkSubstitution,\n  resolvePageMargins,\n  resolvePageSizes,\n);\n\nexport default layout;\n","/**\n * Checks if two sets of props are equal (recursively)\n *\n * @param {Object} props A\n * @param {Object} props B\n * @returns {Boolean} props equals?\n *\n */\nconst propsEqual = (a, b) => {\n  const oldPropsKeys = Object.keys(a);\n  const newPropsKeys = Object.keys(b);\n\n  if (oldPropsKeys.length !== newPropsKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < oldPropsKeys.length; i++) {\n    const propName = oldPropsKeys[i];\n\n    if (propName === 'render') {\n      if (!a[propName] !== !b[propName]) {\n        return false;\n      }\n      continue;\n    }\n\n    if (propName !== 'children' && a[propName] !== b[propName]) {\n      if (\n        typeof a[propName] === 'object' &&\n        typeof b[propName] === 'object' &&\n        propsEqual(a[propName], b[propName])\n      ) {\n        continue;\n      }\n\n      return false;\n    }\n\n    if (\n      propName === 'children' &&\n      (typeof a[propName] === 'string' || typeof b[propName] === 'string')\n    ) {\n      return a[propName] === b[propName];\n    }\n  }\n\n  return true;\n};\n\nexport default propsEqual;\n","'use strict';\n\nimport ReactFiberReconciler from 'react-reconciler';\nimport {\n  unstable_scheduleCallback as schedulePassiveEffects,\n  unstable_cancelCallback as cancelPassiveEffects,\n} from 'scheduler';\n\nimport propsEqual from './utils/propsEqual';\n\nconst emptyObject = {};\n\nconst createRenderer = ({ onChange = () => {} }) => {\n  return ReactFiberReconciler({\n    schedulePassiveEffects,\n\n    cancelPassiveEffects,\n\n    supportsMutation: true,\n\n    isPrimaryRenderer: false,\n\n    warnsIfNotActing: false,\n\n    appendInitialChild(parentInstance, child) {\n      parentInstance.children.push(child);\n    },\n\n    createInstance(type, { style, children, ...props }) {\n      return {\n        type,\n        box: {},\n        style: style || {},\n        props: props || {},\n        children: [],\n      };\n    },\n\n    createTextInstance(text, rootContainerInstance) {\n      return { type: 'TEXT_INSTANCE', value: text };\n    },\n\n    finalizeInitialChildren(element, type, props) {\n      return false;\n    },\n\n    getPublicInstance(instance) {\n      return instance;\n    },\n\n    prepareForCommit() {\n      // Noop\n    },\n\n    prepareUpdate(element, type, oldProps, newProps) {\n      return !propsEqual(oldProps, newProps);\n    },\n\n    resetAfterCommit: onChange,\n\n    resetTextContent(element) {\n      // Noop\n    },\n\n    getRootHostContext() {\n      return emptyObject;\n    },\n\n    getChildHostContext() {\n      return emptyObject;\n    },\n\n    shouldSetTextContent(type, props) {\n      return false;\n    },\n\n    now: Date.now,\n\n    useSyncScheduling: true,\n\n    appendChild(parentInstance, child) {\n      parentInstance.children.push(child);\n    },\n\n    appendChildToContainer(parentInstance, child) {\n      if (parentInstance.type === 'ROOT') {\n        parentInstance.document = child;\n      } else {\n        parentInstance.children.push(child);\n      }\n    },\n\n    insertBefore(parentInstance, child, beforeChild) {\n      const index = parentInstance.children.indexOf(beforeChild);\n      if (index !== -1 && child)\n        parentInstance.children.splice(index, 0, child);\n    },\n\n    removeChild(parentInstance, child) {\n      const index = parentInstance.children.indexOf(child);\n      if (index !== -1) parentInstance.children.splice(index, 1);\n    },\n\n    removeChildFromContainer(parentInstance, child) {\n      const index = parentInstance.children.indexOf(child);\n      if (index !== -1) parentInstance.children.splice(index, 1);\n    },\n\n    commitTextUpdate(textInstance, oldText, newText) {\n      textInstance.value = newText;\n    },\n\n    commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n      const { style, ...props } = newProps;\n      instance.props = props;\n      instance.style = style;\n    },\n  });\n};\n\nexport default createRenderer;\n","import flatten from './flatten';\n\nconst create = styles => styles;\n\nconst absoluteFillObject = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport default {\n  hairlineWidth: 1,\n  create,\n  flatten,\n  absoluteFillObject,\n};\n","import BlobStream from 'blob-stream';\nimport PDFDocument from '@react-pdf/pdfkit';\n\nimport Font from './font';\nimport renderPDF from './render';\nimport layoutDocument from './layout';\nimport createRenderer from './renderer';\nimport StyleSheet from './stylesheet';\nimport { version } from '../package.json';\nimport {\n  VIEW,\n  TEXT,\n  LINK,\n  PAGE,\n  NOTE,\n  IMAGE,\n  DOCUMENT,\n  CANVAS,\n  SVG,\n  GROUP,\n  PATH,\n  RECT,\n  LINE,\n  CIRCLE,\n  ELLIPSE,\n  POLYGON,\n  POLYLINE,\n  DEFS,\n  TSPAN,\n  CLIP_PATH,\n  STOP,\n  LINEAR_GRADIENT,\n  RADIAL_GRADIENT,\n} from './constants';\n\nconst View = VIEW;\nconst Text = TEXT;\nconst Link = LINK;\nconst Page = PAGE;\nconst Note = NOTE;\nconst Image = IMAGE;\nconst Document = DOCUMENT;\nconst Canvas = CANVAS;\nconst Svg = SVG;\nconst G = GROUP;\nconst Path = PATH;\nconst Rect = RECT;\nconst Line = LINE;\nconst Circle = CIRCLE;\nconst Ellipse = ELLIPSE;\nconst Polygon = POLYGON;\nconst Polyline = POLYLINE;\nconst Defs = DEFS;\nconst Tspan = TSPAN;\nconst ClipPath = CLIP_PATH;\nconst Stop = STOP;\nconst LinearGradient = LINEAR_GRADIENT;\nconst RadialGradient = RADIAL_GRADIENT;\n\nconst pdf = ({ initialValue, onChange }) => {\n  const container = { type: 'ROOT', document: null };\n  const PDFRenderer = createRenderer({ onChange });\n  const mountNode = PDFRenderer.createContainer(container);\n\n  if (initialValue) updateContainer(initialValue);\n\n  const render = async () => {\n    const ctx = new PDFDocument({ autoFirstPage: false });\n\n    console.time('layout');\n    const layout = await layoutDocument(container.document);\n    console.timeEnd('layout');\n\n    return renderPDF(ctx, layout);\n  };\n\n  const layout = async () => {\n    return layoutDocument(container);\n  };\n\n  function updateContainer(doc) {\n    PDFRenderer.updateContainer(doc, mountNode, null);\n  }\n\n  function callOnRender(params = {}) {\n    if (container.document.props.onRender) {\n      container.document.props.onRender(params);\n    }\n  }\n\n  async function toBlob() {\n    const instance = await render();\n    const stream = instance.pipe(BlobStream());\n\n    return new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        try {\n          const blob = stream.toBlob('application/pdf');\n          callOnRender({ blob });\n          resolve(blob);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      stream.on('error', reject);\n    });\n  }\n\n  async function toBuffer() {\n    callOnRender();\n    return render();\n  }\n\n  function toString() {\n    let result = '';\n    const instance = render();\n\n    return new Promise((resolve, reject) => {\n      try {\n        instance.on('data', function(buffer) {\n          result += buffer;\n        });\n\n        instance.on('end', function() {\n          resolve(result);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  return {\n    layout,\n    container,\n    updateContainer,\n    toBuffer,\n    toBlob,\n    toString,\n  };\n};\n\nexport {\n  version,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Document,\n  Canvas,\n  Svg,\n  G,\n  Path,\n  Rect,\n  Line,\n  Circle,\n  Ellipse,\n  Polygon,\n  Defs,\n  Tspan,\n  ClipPath,\n  Polyline,\n  Stop,\n  LinearGradient,\n  RadialGradient,\n  StyleSheet,\n  pdf,\n};\n","import fs from 'fs';\nimport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Canvas,\n  Svg,\n  G,\n  Path,\n  Rect,\n  Line,\n  Circle,\n  Ellipse,\n  Polygon,\n  Polyline,\n  Defs,\n  Tspan,\n  ClipPath,\n  Stop,\n  LinearGradient,\n  RadialGradient,\n  version,\n  Document,\n  StyleSheet,\n} from './index';\n\nexport const renderToStream = async function(element) {\n  const instance = pdf({ initialValue: element });\n  const buffer = await instance.toBuffer();\n  return buffer;\n};\n\nexport const renderToFile = async function(element, filePath, callback) {\n  const output = await renderToStream(element);\n  const stream = fs.createWriteStream(filePath);\n\n  output.pipe(stream);\n\n  return new Promise((resolve, reject) => {\n    stream.on('finish', () => {\n      if (callback) callback(output, filePath);\n      resolve(output);\n    });\n    stream.on('error', reject);\n  });\n};\n\nconst throwEnvironmentError = name => {\n  throw new Error(\n    `${name} is a web specific API. Or you're either using this component on Node, or your bundler is not loading react-pdf from the appropiate web build.`,\n  );\n};\n\nexport const PDFViewer = () => {\n  throwEnvironmentError('PDFViewer');\n};\n\nexport const PDFDownloadLink = () => {\n  throwEnvironmentError('PDFDownloadLink');\n};\n\nexport const BlobProvider = () => {\n  throwEnvironmentError('BlobProvider');\n};\n\nexport const render = renderToFile;\n\nexport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Canvas,\n  Svg,\n  G,\n  Path,\n  Rect,\n  Line,\n  Circle,\n  Ellipse,\n  Polygon,\n  Polyline,\n  Defs,\n  Tspan,\n  ClipPath,\n  Stop,\n  LinearGradient,\n  RadialGradient,\n  version,\n  Document,\n  StyleSheet,\n} from './index';\n\nexport default {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Canvas,\n  Svg,\n  G,\n  Path,\n  Rect,\n  Line,\n  Circle,\n  Ellipse,\n  Polygon,\n  Polyline,\n  Defs,\n  Tspan,\n  ClipPath,\n  Stop,\n  LinearGradient,\n  RadialGradient,\n  version,\n  Document,\n  StyleSheet,\n  PDFViewer,\n  BlobProvider,\n  PDFDownloadLink,\n  renderToStream,\n  renderToFile,\n  render,\n};\n"],"names":["VIEW","TEXT","LINK","PAGE","NOTE","IMAGE","DOCUMENT","CANVAS","TEXT_INSTANCE","SVG","GROUP","PATH","RECT","LINE","CIRCLE","ELLIPSE","POLYGON","POLYLINE","DEFS","TSPAN","CLIP_PATH","STOP","LINEAR_GRADIENT","RADIAL_GRADIENT","DPI","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","PAGE_SIZES","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","PORTRAIT","LANDSCAPE","INHERITED_PROPERTIES","SVG_INHERITED_PROPS","RULER_WIDTH","RULER_COLOR","RULER_FONT_SIZE","DEFAULT_RULER_STEPS","LINE_WIDTH","LINE_COLOR","GRID_COLOR","BOX_MODEL_REGEX","OBJECT_POSITION_REGEX","BORDER_SHORTHAND_REGEX","TRANSFORM_ORIGIN_REGEX","matchBoxModel","R","matchObjectPosition","matchBorderShorthand","matchTransformOrigin","isNumber","Number","isFontWeightStyle","key","match","isBorderStyle","value","isBoxModelStyle","isObjectPositionStyle","isTransformOriginStyle","isFlexGrow","isFlexShrink","isFlexBasis","processBorders","Error","processBoxModel","processFontWeight","toLowerCase","processObjectPosition","transformOffsetKeywords","processTransformOrigin","result","processFlexGrow","split","processFlexShrink","processFlexBasis","keepSame","matchNumber","String","castFloat","v","parseFloat","transformStyle","transformStyles","fetchFont","async","src","options","response","fetch","buffer","arrayBuffer","constructor","name","Buffer","from","FontSource","fontFamily","fontStyle","fontWeight","data","loading","BROWSER","this","headers","body","method","fontkit","create","Promise","resolve","reject","open","err","Font","family","sources","register","push","descriptor","styleSources","filter","s","exactFit","find","res","leftOffset","rightOffset","length","lt","gt","emojiSource","registerEmojiSource","url","format","getEmojiSource","hyphenationCallback","registerHyphenationCallback","callback","getHyphenationCallback","fonts","font","i","getRegisteredFonts","getRegisteredFontFamilies","Object","keys","getFont","standardFonts","includes","load","reset","hasOwnProperty","clear","emoji","hyphenation","save","ctx","node","PROTOCOL_REGEXP","DEST_REGEXP","getURL","isSrcId","getSource","setLink","top","left","width","height","box","instanceMethod","slice","restore","isSvg","isText","isPage","hasSource","isLink","isNote","isImage","isCanvas","KAPPA","Math","sqrt","clipNode","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","style","rtr","min","ctr","moveTo","lineTo","bezierCurveTo","rbr","cbr","rbl","cbl","rtl","ctl","closePath","clip","renderPath","path","props","d","getProp","p","renderRect","x","y","rx","ry","krx","kry","renderLine","x1","y1","x2","y2","drawEllipse","cx","cy","ox","oy","xe","ye","xm","ym","renderEllipse","renderCircle","r","renderRun","run","runAdvanceWidth","runWidth","fontSize","color","opacity","attributes","fillColor","fillOpacity","sbix","COLR","CPAL","translate","ascent","glyphs","position","positions","glyph","xOffset","yOffset","render","xAdvance","yAdvance","_addGlyphs","error","console","log","renderSpan","line","textAnchor","lineWidth","runs","renderSvgText","span","children","lines","isOdd","lengthIsOdd","parsePoints","drawPolyline","points","forEach","renderPolyline","renderPolygon","printWarning","args","argIndex","message","replace","__DEV__","process","env","NODE_ENV","warning","condition","undefined","drawImage","paddingTop","paddingLeft","image","href","renderImage","getRotation","transform","exec","PI","getTranslateX","matchX","matchGeneric","getTranslateY","matchY","getScaleX","getScaleY","getMatrix","applySingleTransformation","origin","test","rotate","scale","applyTransformations","re","isPath","isRect","isLine","isTspan","isGroup","isCircle","isTextInstance","renderGroup","isEllipse","isPolygon","isPolyline","normalizePath","prev","bezierX","bezierY","startX","startY","quadX","quadY","len","seg","command","curves","arcToCurve","px","py","xAxisRotation","largeArcFlag","sweepFlag","c","j","quadratic","getPathBoundingBox","absPath","parsePath","bounds","Infinity","l","getCircleBoundingBox","getEllipseBoundingBox","getLineBoundingBox","getRectBoundingBox","max","getPolylineBoundingBox","xValues","yValues","getBoundingBox","warnUnsupportedNode","warn","type","setStrokeWidth","setStrokeColor","strokeColor","setOpacity","setFillOpacity","setStrokeOpacity","strokeOpacity","setLineJoin","lineJoin","setLineCap","lineCap","setLineDash","dashArray","dash","space","hasLinearGradientFill","hasRadialGradientFill","setLinearGradientFill","bbox","gradient","m0","m3","m4","m5","gx1","gy1","gx2","gy2","grad","linearGradient","stop","offset","stopColor","stopOpacity","fill","setRadialGradientFill","fx","fy","gr","gcx","gcy","gfx","gfy","radialGradient","setFillColor","setFill","draw","stroke","fillAndStroke","fillRule","renderNode","renderSvgImage","drawNode","clipPath","drawChildren","defaultsZero","preserveAspectRatio","viewBox","meetOrSlice","align","minX","minY","logicalWidth","maxX","logicalHeight","maxY","logicalRatio","physicalRatio","scaleX","scaleY","moveToOrigin","renderSvg","renderText","initialY","PDFRenderer","renderPage","addPage","size","margin","renderNote","note","isPercent","matchPercent","percent","absValue","abs","absPercent","isNumeric","n","isNaN","isFinite","applyContainObjectFit","cw","ch","iw","ih","cr","ir","pxp","pyp","pxv","pyv","applyNoneObjectFit","applyCoverObjectFit","applyScaleDownObjectFit","containDimension","noneDimension","applyFillObjectFit","resolveObjectFit","objectPositionX","objectPositionY","paddingRight","paddingBottom","objectFit","availableMethods","painter","reduce","acc","prop","renderCanvas","availableWidth","availableHeight","paint","hasVerticalRuler","hasHorizontalRuler","range","steps","Array","ceil","_","matchPercentage","getVerticalSteps","page","horizontalRulerSteps","rulerSteps","percentage","getHorizontalSteps","verticalRulerSteps","renderVerticalRuler","hRange","rect","map","step","text","round","renderHorizontalRuler","renderRulers","getDocumentProp","target","or","setPDFMetadata","info","addMetadata","doc","setProp","title","author","subject","keywords","creator","producer","CONTENT_COLOR","PADDING_COLOR","MARGIN_COLOR","shouldDebug","debugContent","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","debugPadding","debugMargin","marginLeft","marginTop","marginRight","marginBottom","debugText","roundedWidth","roundedHeight","debugOrigin","circle","renderDebug","clipBorderTop","layout","c0","topRightYCoord","innerTopRightRadiusX","innerTopRightRadiusY","c1","c2","innerTopLeftRadiusX","innerTopLeftRadiusY","c3","c4","topLeftYCoord","c5","trSlope","fillBorderTop","borderTopColor","borderTopStyle","undash","clipBorderRight","topBottomXCoord","innerBottomRightRadiusX","innerBottomRightRadiusY","topRightXCoord","brSlope","fillBorderRight","borderRightColor","borderRightStyle","clipBorderBottom","bottomLeftYCoord","innerBottomLeftRadiusX","innerBottomLeftRadiusY","bottomRightYCoord","fillBorderBottom","borderBottomColor","borderBottomStyle","clipBorderLeft","topLeftCoordX","bottomLeftXCoord","fillBorderLeft","borderLeftColor","borderLeftStyle","shouldRenderBorders","renderBorders","setDestination","id","addNamedDestination","drawBackground","backgroundColor","shouldRenderBackground","renderBackground","shouldRenderChildren","renderChildren","renderDocument","end","capitalize","toUpperCase","upperFirst","transformText","transformation","StandardFont","PDFFont","str","encoded","encode","stringIndices","g","getGlyph","parseInt","advanceWidth","glyphForCodePoint","codePoint","_font","codePoints","isLigature","characterToGlyph","hasGlyphForCodePoint","fontCache","IGNORED_CODE_POINTS","getFontSize","getOrCreateFont","getFallbackFont","shouldFallbackToFont","fontSubstitution","string","lastFont","lastIndex","index","defaultFont","start","char","codePointAt","unitsPerEm","engines","linebreaker","justification","textDecoration","scriptItemizer","wordHyphenation","engine","layoutEngine","layoutOptions","shrinkWhitespaceFactor","before","after","getFragments","instance","fragments","textDecorationColor","textDecorationStyle","textTransform","obj","underlineStyle","underline","underlineColor","strike","strikeStyle","strikeColor","child","getAttributedString","AttributedString","fromFragments","AlmostInfinity","layoutTspan","attributedString","container","layoutText","isDefs","getChildren","getId","getDefs","isNotDefs","detachDefs","URL_REGEX","replaceDef","defs","parseNodeDefs","parseDefs","root","replaceDefs","parseViewbox","values","getContainer","viewbox","parseViewBox","getInheritProps","inheritProps","parseAspectRatio","isRgb","isRgba","isHsl","isHsla","parseRgb","colorString","to","hex","get","rgb","parseHsl","hlsToHex","hsl","transformColor","transformColors","styles","STYLE_PROPS","VERTICAL_PROPS","HORIZONTAL_PROPS","transformPercent","parsePercent","parseProps","mergeStyles","removeNoneValues","pickStyleProps","styleProps","parseSvgProps","wrapBetweenTspan","addMissingTspan","resolveSvgNode","resolveChildren","parseText","resolveSvgRoot","resolveSvg","getZIndex","isType","shouldNotSort","sortZIndex","a","b","za","zb","resolveZIndex","adjustPageSize","resolveRulers","PNG","isValid","e","MARKERS","JPEG","readUInt16BE","marker","pos","isBuffer","createCache","limit","cache","set","shift","IMAGE_CACHE","getAbsoluteLocalPath","protocol","auth","host","port","hostname","pathname","parse","absolutePath","fetchLocalFile","fs","readFile","fetchRemoteFile","uri","isValidFormat","lower","guessFormat","isCompatibleBase64","getImage","extension","resolveBase64Image","resolveImageFromData","JSON","stringify","resolveBufferImage","getImageFormat","isPng","isJpg","resolveImageFromUrl","resolveImage","cacheKey","toString","isNotNil","firstPass","fns","fn","resolveSrc","fetchImage","source","emojis","regex","emojiRegex","reflect","promise","then","makeFetchEmojiImage","_removeNoColor","getCodePoints","join","buildEmojiUrl","fetchEmojis","promises","emojiUrl","fetchEmojiImage","embedEmojis","fragment","emojiSize","chunk","fromCharCode","attachment","floor","fetchAssets","listToExplore","childNode","resolveAssets","all","isNotArray","castArray","compact","Boolean","isArray","flatten","prototype","styleShorthands","marginHorizontal","marginVertical","padding","paddingHorizontal","paddingVertical","border","borderTop","borderRight","borderBottom","borderLeft","borderColor","borderRadius","borderStyle","borderWidth","objectPosition","transformOrigin","transformOriginX","transformOriginY","flex","flexGrow","flexShrink","flexBasis","expandStyles","propsArray","resolvedStyle","expandedProps","propName","call","MM_FACTOR","CM_FACTOR","parseValue","unit","transformUnit","scalar","transformUnits","resolveMediaQueries","matchMedia","LINK_STYLES","filterNoneValues","resolveStyles","flattenStyles","resolveNodeStyles","resolvePageStyles","getTransformStyle","getOrigin","percentX","percentY","resolveNodeOrigin","resolveOrigin","VALID_ORIENTATIONS","getOrientation","isLandscape","toSizeObject","flipSizeObject","getStringSize","getNumberSize","throwInvalidError","getSize","assocIfNil","resolvePageSize","getPageSize","resolvePageSizes","lineIndexAtHeight","heightAtLineIndex","counter","zero","getTop","getWidows","getOrphans","getLineBreak","widows","orphans","linesQuantity","slicedLine","splitText","slicedLineIndex","currentHeight","nextHeight","hasFixedHeight","subtractHeight","splitNode","nodeTop","current","isString","isNotString","createInstance","element","getNodesHeight","nodes","getWrap","getBreak","getMinPresenceAhead","defaultPresenceAhead","getPresenceAhead","elements","isElementInside","presenceAhead","shouldBreak","futureElements","minPresenceAhead","futureHeight","shouldSplit","shouldWrap","getComputedPadding","edge","yogaNode","_yogaNode","getPadding","Yoga","EDGE_TOP","EDGE_RIGHT","EDGE_BOTTOM","EDGE_LEFT","getContentArea","IGNORABLE_CODEPOINTS","buildSubsetForFont","ignoreChars","charSubset","subsetRegex","RegExp","PREPROCESSORS","textAlign","lineHeight","letterSpacing","textIndent","indent","link","characterSpacing","preprocessor","maxLines","truncateMode","getLayoutOptions","hyphenationPenalty","isNotSvg","hasLines","fixed","shouldLayoutText","resolveTextLayout","getInheritStyles","resolveInheritance","inheritStyles","getComputedMargin","getMargin","getComputedTop","getRight","getComputedRight","getBottom","getComputedBottom","getLeft","getComputedLeft","getPosition","right","bottom","DEFAULT_DIMENSION","getDimension","getComputedWidth","getComputedHeight","getComputedBorder","getBorderWidth","setDisplay","DISPLAY_NONE","DISPLAY_FLEX","setOverflow","yogaValue","OVERFLOW_HIDDEN","OVERFLOW_SCROLL","OVERFLOW_VISIBLE","setFlexWrap","WRAP_WRAP","WRAP_WRAP_REVERSE","WRAP_NO_WRAP","setYogaValue","attr","hasEdge","fixedMethod","autoMethod","percentMethod","setFlexGrow","setFlexBasis","setAlign","ALIGN_FLEX_START","ALIGN_CENTER","ALIGN_FLEX_END","ALIGN_STRETCH","ALIGN_BASELINE","ALIGN_SPACE_BETWEEN","ALIGN_SPACE_AROUND","ALIGN_AUTO","setAlignSelf","setAlignItems","setFlexShrink","setAspectRatio","setAlignContent","setPositionType","POSITION_TYPE_ABSOLUTE","POSITION_TYPE_RELATIVE","isRow","isRowReverse","isColumnReverse","setFlexDirection","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","FLEX_DIRECTION_COLUMN_REVERSE","FLEX_DIRECTION_COLUMN","setJustifyContent","JUSTIFY_CENTER","JUSTIFY_FLEX_END","JUSTIFY_SPACE_BETWEEN","JUSTIFY_SPACE_AROUND","JUSTIFY_SPACE_EVENLY","JUSTIFY_FLEX_START","setMarginTop","setMarginRight","setMarginBottom","setMarginLeft","setPaddingTop","setPaddingRight","setPaddingBottom","setPaddingLeft","setBorderTop","setBorderRight","setBorderBottom","setBorderLeft","setPositionTop","setPositionRight","setPositionBottom","setPositionLeft","setWidth","setMinWidth","setMaxWidth","setHeight","setMinHeight","setMaxHeight","getAspectRatio","measureCanvas","widthMode","heightMode","aspectRatio","MEASURE_MODE_EXACTLY","MEASURE_MODE_AT_MOST","linesWidth","linesHeight","measureText","getRatio","isHeightAuto","SAFETY_HEIGHT","measureImage","imageRatio","imageMargin","pagePadding","pageArea","MEASURE_MODE_UNDEFINED","scaledHeight","getMax","measureCtx","nil","addPoint","w","h","ellipse","polygon","pts","roundedRect","quadraticCurveTo","miterLimit","getWidth","getHeight","YOGA_NODE","YOGA_CONFIG","Config","setPointScaleFactor","setNodeHeight","setYogaValues","minWidth","maxWidth","minHeight","maxHeight","display","flexDirection","alignSelf","alignContent","alignItems","justifyContent","flexWrap","overflow","insertYogaNodes","parent","insertChild","getChildCount","setMeasureFunc","measureSvg","isNotText","isNotNote","isNotTextInstance","isLayoutElement","createYogaNodes","Node","createWithConfig","calculateLayout","persistDimensions","destroyYogaNodes","destroy","resolvePageDimensions","resolveDimensions","SAFTY_THRESHOLD","assingChildren","isElementOutside","isFixed","allFixed","isDynamic","relayoutPage","splitView","currentNode","nextNode","currentChilds","nextChildren","splitChildren","splitNodes","currentChildren","futureNodes","futureFixedNodes","nodeHeight","isOutside","shouldNodeBreak","next","break","currentChild","nextChild","splitPage","pageNumber","contentArea","dynamicPage","resolveDynamicPage","nextChilds","currentPage","shouldResolveDynamicNodes","resolveDynamicNodes","isNodeDynamic","paginate","splittedPage","pages","nextPage","resolvePageIndices","totalPages","resolvePagination","subpages","concat","removeMargins","resolvePageMargins","getNodeText","getNodesText","wrapTextInstance","resolveNoteChildren","resolvePageHorizontalPadding","resolvePageVerticalPadding","resolvePagePaddings","resolveRadius","resolvePercentRadius","transformHeight","getPageArea","hasHeight","resolveNodePercentHeight","resolvePagePercentHeight","resolvePercentHeight","hasRenderProp","hasTextInstanceChilds","resolveLinkSubstitution","asyncCompose","resolveOrigins","propsEqual","oldPropsKeys","newPropsKeys","emptyObject","createRenderer","onChange","ReactFiberReconciler","schedulePassiveEffects","cancelPassiveEffects","supportsMutation","isPrimaryRenderer","warnsIfNotActing","appendInitialChild","parentInstance","createTextInstance","rootContainerInstance","finalizeInitialChildren","getPublicInstance","prepareForCommit","prepareUpdate","oldProps","newProps","resetAfterCommit","resetTextContent","getRootHostContext","getChildHostContext","shouldSetTextContent","now","Date","useSyncScheduling","appendChild","appendChildToContainer","document","insertBefore","beforeChild","indexOf","splice","removeChild","removeChildFromContainer","commitTextUpdate","textInstance","oldText","newText","commitUpdate","updatePayload","absoluteFillObject","hairlineWidth","View","Text","Link","Page","Note","Image","Document","Canvas","Svg","G","Path","Rect","Line","Circle","Ellipse","Polygon","Polyline","Defs","Tspan","ClipPath","Stop","LinearGradient","RadialGradient","pdf","initialValue","mountNode","createContainer","updateContainer","PDFDocument","autoFirstPage","time","layoutDocument","timeEnd","renderPDF","callOnRender","params","onRender","toBuffer","toBlob","stream","pipe","BlobStream","on","blob","renderToStream","renderToFile","filePath","output","createWriteStream","throwEnvironmentError","PDFViewer","PDFDownloadLink","BlobProvider","version","StyleSheet"],"mappings":"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"}